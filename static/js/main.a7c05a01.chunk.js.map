{"version":3,"sources":["hooks/useTypedSelector.ts","components/PageHeader/PageHeader.tsx","types/auth.ts","routing/index.ts","pages/About/AboutPage.tsx","api/auth.ts","store/action-creators/auth.ts","types/candidate.ts","api/candidate.ts","store/action-creators/candidate.ts","types/companyService.ts","api/service.ts","store/action-creators/companyService.ts","types/country.ts","api/country.ts","store/action-creators/country.ts","types/employee.ts","api/employee.ts","store/action-creators/employee.ts","types/office.ts","api/office.ts","store/action-creators/office.ts","types/user.ts","api/user.ts","store/action-creators/user.ts","types/vacancy.ts","api/vacancy.ts","store/action-creators/vacancy.ts","types/common/orderType.ts","store/action-creators/index.ts","hooks/useActions.ts","components/FiltersArea/SearchTextFilter/SearchTextFilter.tsx","components/FiltersArea/CheckBoxFilter/CheckBoxFilter.tsx","components/FiltersArea/CreateNewButton/CreateNewButton.tsx","pages/Admin/AdminCandidate/AdminCandidateFilters.tsx","components/Messages/types.ts","types/common/RegularExpressions.ts","components/Messages/ErrorMessage.tsx","pages/Admin/AdminCandidate/AdminCandidateForm.tsx","components/TablePagination/TablePagination.tsx","components/TableHeader/TableHeader.tsx","pages/Admin/AdminCandidate/AdminCandidateTable.tsx","pages/Admin/AdminCandidate/AdminCandidatePage.tsx","pages/Admin/AdminCountry/AdminCountryForm.tsx","pages/Admin/AdminCountry/AdminCountryTable.tsx","pages/Admin/AdminCountry/AdminCountryFilters.tsx","pages/Admin/AdminCountry/AdminCountryPage.tsx","pages/Admin/AdminService/AdminServiceTable.tsx","pages/Admin/AdminService/AdminServiceForm.tsx","pages/Admin/AdminService/AdminServiceFilters.tsx","pages/Admin/AdminService/AdminServicePage.tsx","pages/Admin/AdminOffice/AdminOfficeForm.tsx","pages/Admin/AdminOffice/AdminOfficeTable.tsx","pages/Admin/AdminOffice/AdminOfficeFilters.tsx","pages/Admin/AdminOffice/AdminOfficePage.tsx","pages/Admin/AdminTeam/AdminEmployeeForm.tsx","pages/Admin/AdminTeam/AdminEmployeeTable.tsx","pages/Admin/AdminTeam/AdminTeamFilters.tsx","pages/Admin/AdminTeam/AdminTeamPage.tsx","components/FiltersArea/AutocompleteFilter/AutocompleteFilter.tsx","components/FiltersArea/SelectItemFilter/SelectItemFilter.tsx","pages/Admin/AdminVacancy/AdminVacancyFilters.tsx","pages/Admin/AdminVacancy/AdminVacancyForm.tsx","pages/Admin/AdminVacancy/AdminVacancyTable.tsx","pages/Admin/AdminVacancy/AdminVacancyPage.tsx","components/Button/LoadMoreButton.tsx","components/ServiceList/ServiceCard.tsx","components/ServiceList/ServicesList.tsx","components/Spinner/Spinner.tsx","pages/CompanyServices/ServicesPage.tsx","api/email.ts","pages/Contact/ContactForm.tsx","pages/Contact/ContactInfoCard.tsx","pages/Contact/types.ts","pages/Contact/ContactInfoCardsList.tsx","pages/Contact/ContactPage.tsx","pages/Error/ErrorPage.tsx","pages/Home/HeaderChapter.tsx","pages/Home/ServiceChapter.tsx","components/EmployeeList/EmployeeCard.tsx","components/EmployeeList/EmployeesList.tsx","pages/Home/TeamChapter.tsx","pages/Home/HomePage.tsx","pages/Account/Login/LoginForm.tsx","pages/Account/Login/LoginPage.tsx","pages/Account/RegisterComplete/RegisterCompletePage.tsx","pages/Account/Register/RegisterForm.tsx","pages/Account/Register/RegisterPage.tsx","pages/Team/TeamPage.tsx","pages/Admin/AdminUser/AdminUserFilters.tsx","pages/Admin/AdminUser/AdminUserTable.tsx","pages/Admin/AdminUser/AdminUsersPage.tsx","pages/Vacancies/VacanciesFilters.tsx","pages/Vacancies/VacancyCard.tsx","pages/Vacancies/VacanciesList.tsx","pages/Vacancies/VacanciesPage.tsx","pages/Vacancies/VacancyApplyForm.tsx","pages/Vacancies/VacancyDetails.tsx","pages/Account/ChangeEmail/ChangeEmailForm.tsx","pages/Account/ChangeEmail/ChangeEmailPage.tsx","pages/Account/ChangePassword/ChangePasswordForm.tsx","pages/Account/ChangePassword/ChangePasswordPage.tsx","pages/Account/Profile/ProfileForm.tsx","pages/Account/Profile/ProfilePage.tsx","components/AppBars/MainAppBar/MainAppBar.tsx","components/AppBars/AdminAppBar/AdminAppBar.tsx","api/mailSubscriber.ts","components/Footer/SubscriptionForm.tsx","components/Footer/Footer.tsx","components/Layouts/AdminLayout.tsx","components/Layouts/PublicLayout.tsx","components/Messages/SuccessMessage.tsx","pages/Account/EmailConfirm/EmailConfirmPage.tsx","pages/Test/TestUI.tsx","components/AppRouter.tsx","App.tsx","reportWebVitals.ts","store/reducers/authReducer.ts","store/reducers/candidateReducer.ts","store/reducers/countryReducer.ts","store/reducers/employeeReducer.ts","store/reducers/officeReducer.ts","store/reducers/serviceReducer.ts","store/reducers/userReduser.ts","store/reducers/vacancyReducer.ts","store/index.ts","types/common/error.ts","api/middleware.ts","index.tsx"],"names":["useTypedSelector","useSelector","PageHeader","title","text","Grid","container","spacing","direction","alignItems","justifyContent","item","className","Roles","AuthActionTypes","RouteNames","AboutPage","Container","maxWidth","xs","md","textAlign","Box","component","sx","width","alt","src","changeEmailAxios","changeEmailDto","axios","post","data","changePasswordAxios","changePasswordDto","confirmEmailAxios","code","email","get","loginAxios","loginDto","logoutAxios","token","headers","Authorization","registerAxios","registerDto","refreshTokenAxios","accessToken","refreshToken","CandidateStatus","CandidateActionTypes","login","authModel","dispatch","type","LOGIN","payload","logout","SET_AUTH_LOADING","SET_AUTH_ERROR","message","localStorage","removeItem","LOGOUT","getCandidatesAxios","limit","page","search","candidateStatus","vacancyId","sortField","order","getCandidateByIdAxios","id","toString","updateCandidateIsDismissedStatusAxios","isDismissed","patch","op","path","value","createCandidateAxios","candidate","updateCandidateAxios","put","CompanyServiceStatus","CompanyServiceActionTypes","getCandidates","filters","SET_CANDIDATE_LOADING","SET_CANDIDATE_ERROR","GET_CANDIDATES","searchInFullName","active","getCandidateById","GET_CANDIDATE_BY_ID","setCandidateLoading","isLoading","setCandidatePage","SET_CANDIDATE_PAGE","setCandidateActiveFilter","status","SET_CANDIDATE_ACTIVE_FILTER","setCandidateVacancyFilter","SET_CANDIDATE_VACANCY_FILTER","setCandidateSearchCriteria","SET_CANDIDATE_SEARCH_CRITERIA","updateCandidateIsDismissedStatus","candidateToUpdate","UPDATE_CANDIDATE_ISDISMISSED_STATUS","createCandidate","CREATE_CANDIDATE","updateCandidate","UPDATE_CANDIDATE","getServicesAxios","companyServiceStatus","getServiceByIdAxios","updateServiceIsActiveStatusAxios","isActive","createServiceAxios","service","updateServiceAxios","removeServiceAxios","delete","CountryActionTypes","getServices","SET_COMPANY_SERVICE_LOADING","SET_COMPANY_SERVICE_ERROR","GET_COMPANY_SERVICES","console","log","getServiceById","GET_COMPANY_SERVICE_BY_ID","loadMoreServices","LOAD_MORE_COMPANY_SERVICES","setServicePage","SET_COMPANY_SERVICE_PAGE","setServiceActiveFilter","SET_COMPANY_SERVICE_ACTIVE_FILTER","setServiceError","setServiceLoading","updateServiceIsActiveStatus","serviceToUpdate","UPDATE_COMPANY_SERVICE_ISACTIVE_STATUS","createService","CREATE_COMPANY_SERVICE","updateService","UPDATE_COMPANY_SERVICE","removeService","REMOVE_COMPANY_SERVICE","getCountriesAxios","getCountryByIdAxios","createCountryAxios","country","updateCountryAxios","removeCountryAxios","EmployeeActionTypes","getCountries","SET_COUNTRY_LOADING","SET_COUNTRY_ERROR","GET_COUNTRIES","getCountryById","GET_COUNTRY_BY_ID","setCountryError","setCountryLoading","setCountryPage","SET_COUNTRY_PAGE","createCountry","CREATE_COUNTRY","updateCountry","UPDATE_COUNTRY","removeCountry","REMOVE_COUNTRY","getEmployeesAxios","createEmployeeAxios","employee","updateEmployeeAxios","removeEmployeeAxios","OfficeActionTypes","getEmployees","SET_EMPLOYEE_LOADING","SET_EMPLOYEE_ERROR","GET_EMPLOYEES","loadMoreEmployees","LOAD_MORE_EMPLOYEES","setEmployeePage","SET_EMPLOYEE_PAGE","createEmployee","CREATE_EMPLOYEE","updateEmployee","UPDATE_EMPLOYEE","removeEmployee","REMOVE_EMPLOYEE","getOfficesAxios","getOfficeNameIdsAxios","getOfficeByIdAxios","createOfficeAxios","office","updateOfficeAxios","removeOfficeAxios","UserActionTypes","getOffices","SET_OFFICE_LOADING","SET_OFFICE_ERROR","GET_OFFICES","getOfficeById","GET_OFFICE_BY_ID","setOfficeError","setOfficeLoading","setOfficePage","SET_OFFICE_PAGE","createOffice","CREATE_OFFICE","updateOffice","UPDATE_OFFICE","removeOffice","REMOVE_OFFICE","getUsersAxios","updateUserEmailConfirmedStatusAxios","confirmed","updateUserAxios","user","VacancyStatus","VacancyActionTypes","getUsers","SET_USER_LOADING","SET_USER_ERROR","GET_USERS","searchInUserName","updateUserEmailConfirmedStatus","userToUpdate","emailConfirmed","UPDATE_USER_EMAILCONFIRMED_STATUS","setUserSearchCriteria","SET_USER_SEARCH_CRITERIA","setUserPage","SET_USER_PAGE","setUserError","getVacanciesAxios","vacancyStatus","officeId","getVacancyByIdAxios","searchVacanciesTitlesAxios","searchValue","incrementPreviewsAxios","number","updateVacancyIsActiveStatusAxios","createVacancyAxios","vacancy","updateVacancyAxios","OrderType","getVacancies","SET_VACANCY_LOADING","SET_VACANCY_ERROR","GET_VACANCIES","getVacancyById","GET_VACANCY_BY_ID","getOfficeNameIdDtos","SET_FILTERS_LOADING","SET_FILTERS_ERROR","SET_VACANCY_OFFICES","getVacanciesTitles","SET_VACANCIES_TITLES","loadMoreVacancies","LOAD_MORE_VACANCIES","setVacancyPage","SET_VACANCY_PAGE","setVacancyActiveFilter","SET_VACANCY_ACTIVE_FILTER","setVacancyLoading","setVacancyOfficeFilter","SET_VACANCY_OFFICE_FILTER","setVacancySearchCriteria","SET_VACANCY_SEARCH_CRITERIA","setCurrentVacancy","SET_CURRENT_VACANCY","incrementPreviews","INCREMENT_PREVIEWS","updateVacancyIsActiveStatus","vacancyToUpdate","UPDATE_VACANCY_ISACTIVE_STATUS","createVacancy","CREATE_VACANCY","updateVacancy","UPDATE_VACANCY","ActionCreators","AuthActionCreators","CandidateActionCreators","CompanyServiceActionCreators","CountryActionCreators","EmployeeActionCreators","OfficeActionCreators","UserActionCreators","VacancyActionCreators","useActions","useDispatch","bindActionCreators","SearchText","onSearch","TextField","label","margin","fullWidth","onChange","event","target","CheckBoxFilter","onCheck","isChecked","FormControlLabel","control","Checkbox","checked","CreateNewButton","onAction","children","Button","variant","style","marginTop","onClick","AdminCandidateFilters","onAddNew","state","Active","All","length","MessageAppearance","EMAIL_REG_EXP","PASSWORD_REG_EXP","PHONE_REG_EXP","ErrorMessage","cssClass","appearance","LARGE","my","Typography","position","top","left","transform","bgcolor","boxShadow","p","AdminCandidateForm","closeForm","useState","error","setError","joinedAt","joinedAtValue","setJoinedAtValue","validationSchema","Yup","required","fullName","min","max","matches","phone","notes","positive","defaultValues","useForm","resolver","yupResolver","handleSubmit","errors","formState","register","reset","onSubmit","onCancelHandler","Modal","open","onClose","overflowY","padding","fontWeight","name","render","field","Boolean","helperText","InputProps","endAdornment","InputAdornment","IconButton","edge","multiline","rows","height","props","e","LocalizationProvider","dateAdapter","AdapterMoment","DatePicker","format","moment","newValue","toDate","sm","REGULAR","TablePagination","count","onChangePage","setPage","mt","mb","display","Pagination","TableHeader","titles","TableHead","TableRow","map","header","index","TableCell","align","AdminCandidateTable","onEdit","candidateSearchResult","TableContainer","Paper","Table","minWidth","TableBody","itemList","border","scope","slice","concat","Switch","choosedCandidate","find","c","onChangeIsDismissed","vacancyDto","Tooltip","placement","cursor","fill","onEditHandler","Divider","orientation","flexItem","alert","Math","ceil","totalItemCount","pageSize","AdminCandidatePage","setCandidate","useEffect","currentPageNumber","Ascending","Date","AdminCountryForm","toggleDrawer","anchor","key","officeDtos","SwipeableDrawer","onOpen","AdminCountryTable","countrySearchResult","address","choosedCountry","countryToUpdate","AdminCountryFilters","AdminCountryPage","setCountry","AdminServiceTable","serviceSearchResult","description","imageUrl","choosedService","s","onChangeIsActive","AdminServiceForm","AdminServiceFilters","AdminServicePage","setService","AdminOfficeForm","countries","latitude","longitude","countryId","FormControl","InputLabel","defaultValue","Select","MenuItem","FormHelperText","AdminOfficeTable","officeSearchResult","countryDto","vacancyDtos","choosedOffice","officeToUpdate","AdminOfficeFilters","AdminOfficePage","setOffice","AdminEmployeeForm","offices","avatarUrl","AdminEmployeeTable","employeeSearchResult","officeDto","choosedEmployee","employeeToUpdate","AdminTeamFilters","AdminTeamPage","setEmployee","searchCriteria","AutocompleteFilter","options","Autocomplete","freeSolo","disableClearable","option","values","renderInput","params","SelectItemsFilter","items","onSelectChanged","AdminVacancyFilters","o","overflow","maxHeight","AdminVacancyForm","editorValue","setEditorValue","previews","theme","AdminVacancyTable","vacancySearchResult","candidates","gutterBottom","Badge","badgeContent","filter","color","substring","choosedVacancy","v","AdminVacancyPage","errorFilters","errorVacancies","setVacancy","LoadMoreButton","isDisabled","onClickHandler","disabled","ServiceCard","ServicesList","services","Spinner","flexDirection","CircularProgress","ServicesPage","loading","sendEmailAxios","ContactForm","setLoading","openSnackBar","setOpenSnackBar","serverConfirmation","setServerConfirmation","senderName","senderEmail","subject","sendEmail","responceFromServer","size","Snackbar","autoHideDuration","reason","ContactInfoCard","contactInfoItem","lines","line","contactInfoItems","ContactInfoCardsList","ContactPage","ErrorPage","HeaderChapter","navigate","useNavigate","backgroundImage","backgroundSize","borderRadius","fixed","alignContent","SERVICES","window","scroll","ServiceChapter","EmployeeCard","Card","elevation","paddingTop","CardContent","EmployeesList","employees","TeamChapter","TEAM","HomePage","LoginForm","showPassword","setShowPassword","password","remember","loginModel","setItem","JSON","stringify","HOME","onMouseDown","preventDefault","Visibility","VisibilityOff","LoginPage","to","REGISTER","RegisterCompletePage","RegisterForm","showConfirmPassword","setShowConfirmPassword","confirmPassword","REGISTER_COMPLETE","RegisterPage","TeamPage","AdminUserFilters","AdminUserTable","userSearchResult","userName","choosedUser","onChangeEmailConfirmed","phoneNumber","AdminUsersPage","VacanciesFilters","VacancyCard","showDetailesHandler","VACANCY","fontSize","VacanciesList","VacanciesPage","loadingFilters","loadingVacancies","VacancyApplyForm","openForm","onSuccess","VacancyDetailes","useParams","currentVacancy","auth","snackbarOpened","setSnackbarOpened","Number","onApply","marginBottom","ReactHtmlParser","ChangeEmailForm","existingEmail","newEmail","setTimeout","ChangeEmailPage","ChangePasswordForm","showOldPassword","setShowOldPassword","showNewPassword","setShowNewPassword","oldPassword","newPassword","confirmNewPassword","tokens","ChangePasswordPage","ProfileForm","updateUserData","ProfilePage","settings","PROFILE","CHANGE_EMAIL","CHANGE_PASSWORD","mainMenuRoutes","ABOUT","CONTACT","MainAppBar","React","anchorElNav","setAnchorElNav","anchorElUser","setAnchorElUser","handleCloseNavMenu","handleCloseUserMenu","AppBar","backgroundColor","Toolbar","disableGutters","href","mr","lineHeight","fontFamily","textDecoration","flexGrow","currentTarget","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","Link","Avatar","setting","textTransform","adminMenuLinks","ADMIN_COUNTRIES","ADMIN_OFFICES","ADMIN_SERVICES","ADMIN_TEAM","ADMIN_VACANCIES","ADMIN_CANDIDATES","USERS","AdminAppBar","marginLeft","subscribeAxios","mailSubscriber","SubscriptionForm","createdSubscriber","subscriber","emailAddress","isSubscribed","mailSubscriptionId","Footer","List","ListItemButton","ListItemIcon","htmlColor","ListItemText","primary","AdminLayout","document","PublicLayout","SuccessMessage","EmailConfirmPage","urlSearchParams","URLSearchParams","location","Object","fromEntries","entries","tryToConfirmEmailByUrlParams","encodeURIComponent","TestUI","AppRouter","anonimousRoleRoutes","TEST_UI","EMAIL_CONFIRM","registeredRoleRoutes","VACANCY_DETAILES","adminRoleRoutes","route","element","roles","includes","ADMIN","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","parse","getItem","pageCount","Descending","deleteCountry","action","deleteEmployee","deleteOffice","deleteService","updateUser","searchInTitle","ErrorStatus","rootReducer","combineReducers","vacancyOffices","unshift","AxiosMiddleware","defaults","baseURL","process","interceptors","request","use","config","authFromLocalStorage","keys","Promise","reject","response","errorMessage","Forbidden","Error","Unauthorized","common","store","configureStore","reducer","boot","ReactDOM","createRoot","getElementById"],"mappings":"uqHAGaA,EAAoDC,I,2CCClD,SAASC,EAAW,GAAgD,IAA9CC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KACxC,OACI,eAACC,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,SAASC,WAAY,SAAUC,eAAgB,SAAS,UAC1F,cAACL,EAAA,EAAI,CAACM,MAAI,EAACC,UAAU,YAAW,SAC5B,oBAAIA,UAAU,cAAa,SAAET,MAEhCC,GACG,cAACC,EAAA,EAAI,CAACM,MAAI,EAACC,UAAU,YAAW,SAC5B,mBAAGA,UAAU,iBAAgB,SAAER,QAInD,C,ICoBYS,EAWAC,ECzCAC,E,OCFG,SAASC,IACpB,OACI,eAACC,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACV,EAAU,CACPC,MAAM,WACNC,KAAK,iQAET,eAACC,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGE,WAAW,SAASG,UAAU,yBAAwB,UAC9E,cAACP,EAAA,EAAI,CAACM,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAGC,UAAU,SAAQ,SACxC,cAACC,EAAA,EAAG,CAACC,UAAU,MAAMC,GAAI,CAAEC,MAAO,QAAUC,IAAI,gBAAgBC,IAAI,sDAExE,eAACtB,EAAA,EAAI,CAACM,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAE,UACrB,+BAAI,0BAAuB,iCAAQ,2CACnC,4BACI,4BAAG,kIAEP,4BAAG,oNAGH,cAACE,EAAA,EAAG,CAACC,UAAU,MAAMC,GAAI,CAAEC,MAAO,QAAUC,IAAI,oBAAoBC,IAAI,6DAK5F,EFWC,SAHWd,KAAK,cAALA,EAAK,wBAGhB,CAHWA,MAAK,KAgBhB,SALWC,KAAe,cAAfA,EAAe,gBAAfA,EAAe,gCAAfA,EAAe,oCAK1B,CALWA,MAAe,KCjB1B,SAxBWC,KAAU,eAAVA,EAAU,mBAAVA,EAAU,6BAAVA,EAAU,mCAAVA,EAAU,SAAVA,EAAU,qBAAVA,EAAU,aAAVA,EAAU,gBAAVA,EAAU,mBAAVA,EAAU,uCAAVA,EAAU,eAAVA,EAAU,eAAVA,EAAU,mBAAVA,EAAU,qBAAVA,EAAU,uCAAVA,EAAU,+BAAVA,EAAU,eAAVA,EAAU,qCAAVA,EAAU,mCAAVA,EAAU,+BAAVA,EAAU,iCAAVA,EAAU,yBAAVA,EAAU,mCAwBrB,CAxBWA,MAAU,K,iEEEf,SAAea,EAAiB,GAAD,+BAItC,aAFC,OAED,kCAJO,WAAgCC,GAA+B,2FACpDC,IAAMC,KAAa,uBAAwBF,GAAe,uCAAEG,MAAI,4CACjF,sBAOM,SAAeC,EAAoB,GAAD,+BAExC,sDAFM,WAAmCC,GAAqC,2FAC7DJ,IAAMC,KAAa,0BAA2BG,GAAkB,uCAAEF,MAAI,4CACvF,sBAEM,SAAeG,EAAkB,EAAD,kCAEtC,sDAFM,WAAiCC,EAAcC,GAAa,2FACzDP,IAAMQ,IAAI,8BAAD,OAA+BF,EAAI,kBAAUC,IAAS,KAAD,uCACvE,sBAEM,SAAeE,EAAW,GAAD,+BAE/B,sDAFM,WAA0BC,GAAmB,2FAClCV,IAAMC,KAAY,iBAAkBS,GAAS,uCAAER,MAAI,4CACpE,sBAEM,SAAeS,EAAY,EAAD,kCAEhC,sDAFM,WAA2BJ,EAAeK,GAAa,2FACpDZ,IAAMQ,IAAI,mBAAD,OAAoBD,GAAS,CAAEM,QAAS,CAAEC,cAAc,UAAD,OAAYF,MAAa,KAAD,uCACjG,sBAEM,SAAeG,EAAc,GAAD,+BAElC,sDAFM,WAA6BC,GAAyB,2FAC3ChB,IAAMC,KAAmB,oBAAqBe,GAAY,uCAAEd,MAAI,4CACjF,sBAEM,SAAee,EAAkB,EAAD,kCAEtC,sDAFM,WAAiCC,EAAqBC,GAAoB,2FAC/DnB,IAAMC,KAAY,wBAAyB,CAAEiB,cAAaC,iBAAe,uCAAEjB,MAAI,4CAChG,sBCnCM,ICWKkB,EAmBAC,ED9BCC,EAAQ,SAACC,GAClB,wDAAO,WAAOC,GAA8B,2EACxCA,EAAS,CAAEC,KAAMzC,EAAgB0C,MAAOC,QAASJ,IAAa,2CACjE,mDAFD,EAGJ,EAEaK,EAAS,SAACrB,EAAeK,GAClC,wDAAO,WAAOY,GAA8B,2EAG8B,OAH9B,SAEpCA,EAAS,CAAEC,KAAMzC,EAAgB6C,iBAAkBF,SAAS,IAC5DH,EAAS,CAAEC,KAAMzC,EAAgB8C,eAAgBH,QAAS,OAAQ,SAC5DhB,EAAYJ,EAAOK,GAAO,KAAD,kDAE/BY,EAAS,CAAEC,KAAMzC,EAAgB8C,eAAgBH,QAAS,KAAMI,SAAW,mBAAoB,QAK1B,OAL0B,UAG/FC,aAAaC,WAAW,QACxBT,EAAS,CAAEC,KAAMzC,EAAgBkD,OAAQP,QAAS,OAClDH,EAAS,CAAEC,KAAMzC,EAAgB6C,iBAAkBF,SAAS,IAAS,4EAE5E,mDAbD,EAcJ,EEVO,SAAeQ,EAAmB,EAAD,4CAYxC,aAFC,OAED,kCAZO,WACHC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAgB,2FAEN1C,IAAMQ,IAAI,wBAAD,OAAyB4B,EAAK,iBAASC,EAAI,mBAAWC,EAAM,4BAAoBC,EAAe,sBAA2B,MAAbC,EAAoB,GAAKA,EAAS,sBAAcC,EAAS,kBAAUC,IAAQ,uCAAExC,MAAI,4CACpN,sBAMM,SAAeyC,GAAsB,GAAD,gCAa3C,cAXC,OAWD,mCAbO,WAAqCC,GAAU,2FACpC5C,IAAMQ,IAAI,sBAAD,OAAuBoC,EAAGC,aAAa,uCAAE3C,MAAI,4CACvE,sBAeM,SAAe4C,GAAsC,EAAD,mCAI3D,cAFC,OAED,mCAJO,WAAqDF,EAAYG,GAAoB,2FAClF/C,IAAMgD,MAAM,qCAAD,OAAsCJ,GAAM,CAAC,CAAEK,GAAI,UAAWC,KAAM,eAAgBC,MAAOJ,KAAgB,KAAD,uCAC9H,sBAOM,SAAeK,GAAqB,GAAD,gCAI1C,cAFC,OAED,mCAJO,WAAoCC,GAAqB,2FAC9CrD,IAAMC,KAAK,oBAAqBoD,GAAU,uCAAEnD,MAAI,4CACjE,sBAOM,SAAeoD,GAAqB,GAAD,gCAEzC,wDAFM,WAAoCD,GAAqB,2FAC9CrD,IAAMuD,IAAI,oBAAqBF,GAAU,uCAAEnD,MAAI,4CAChE,uBDjDA,SAJWkB,OAAe,mBAAfA,IAAe,yBAAfA,IAAe,aAI1B,CAJWA,MAAe,KA+B1B,SAZWC,KAAoB,gCAApBA,EAAoB,0CAApBA,EAAoB,0CAApBA,EAAoB,8CAApBA,EAAoB,wCAApBA,EAAoB,0DAApBA,EAAoB,4DAApBA,EAAoB,8DAApBA,EAAoB,0EAApBA,EAAoB,oCAApBA,EAAoB,oCAY/B,CAZWA,MAAoB,KE7BzB,ICKKmC,GAeAC,GDpBCC,GAAgB,SAACtB,EAAeC,EAAcsB,EAA2BlB,EAAmBC,GACrG,wDAAO,WAAOlB,GAAmC,2EAKI,OALJ,SAEzCA,EAAS,CAAEC,KAAMJ,EAAqBuC,sBAAuBjC,SAAS,IACtEH,EAAS,CAAEC,KAAMJ,EAAqBwC,oBAAqBlC,QAAS,OAAQ,KAC5EH,EAAQ,KACEH,EAAqByC,eAAc,SAC/B3B,EAAmBC,EAAOC,EAAMsB,EAAQI,iBAAkBJ,EAAQK,OAAQL,EAAQnB,UAAWC,EAAWC,GAAM,yBADxHjB,KAAK,EAAD,GAAuCE,QAAQ,EAAD,qEAItDH,EAAS,CAAEC,KAAMJ,EAAqBwC,oBAAqBlC,QAAS,KAAMI,SAAW,iCAAiC,QAEvC,OAFuC,UAEtHP,EAAS,CAAEC,KAAMJ,EAAqBuC,sBAAuBjC,SAAS,IAAS,6EAEtF,mDAbD,EAcJ,EAEasC,GAAmB,SAACrB,GAC7B,wDAAO,WAAOpB,GAAmC,2EAIgB,OAJhB,SAEzCA,EAAS,CAAEC,KAAMJ,EAAqBuC,sBAAuBjC,SAAS,IACtEH,EAAS,CAAEC,KAAMJ,EAAqBwC,oBAAqBlC,QAAS,OAAQ,KAC5EH,EAAQ,KAASH,EAAqB6C,oBAAmB,SAAiBvB,GAAsBC,GAAG,yBAAxFnB,KAAK,EAAD,GAA4CE,QAAQ,EAAD,qEAElEH,EAAS,CAAEC,KAAMJ,EAAqBwC,oBAAqBlC,QAAS,KAAMI,SAAW,wCAAwC,QAE9C,OAF8C,UAE7HP,EAAS,CAAEC,KAAMJ,EAAqBuC,sBAAuBjC,SAAS,IAAS,6EAEtF,mDAVD,EAWJ,EAEawC,GAAsB,SAACC,GAChC,wDAAO,WAAO5C,GAAmC,2EAC7CA,EAAS,CAAEC,KAAMJ,EAAqBuC,sBAAuBjC,QAASyC,IAAa,2CACtF,mDAFD,EAGJ,EAEaC,GAAmB,SAAChC,GAC7B,wDAAO,WAAOb,GAAmC,2EAC7CA,EAAS,CAAEC,KAAMJ,EAAqBiD,mBAAoB3C,QAASU,IAAQ,2CAC9E,mDAFD,EAGJ,EAEakC,GAA2B,SAACC,GACrC,wDAAO,WAAOhD,GAAmC,2EAC7CA,EAAS,CAAEC,KAAMJ,EAAqBoD,4BAA6B9C,QAAS6C,IAAU,2CACzF,mDAFD,EAGJ,EAEaE,GAA4B,SAAClC,GACtC,wDAAO,WAAOhB,GAAmC,2EAC7CA,EAAS,CAAEC,KAAMJ,EAAqBsD,6BAA8BhD,QAASa,IAAa,2CAC7F,mDAFD,EAGJ,EAEaoC,GAA6B,SAACtC,GACvC,wDAAO,WAAOd,GAAmC,2EAC7CA,EAAS,CAAEC,KAAMJ,EAAqBwD,8BAA+BlD,QAASW,IAAU,2CAC3F,mDAFD,EAGJ,EAEawC,GAAmC,SAAClC,EAAYmC,GACzD,wDAAO,WAAOvD,GAAmC,2EAGmC,OAHnC,SAEzCA,EAAS,CAAEC,KAAMJ,EAAqBuC,sBAAuBjC,SAAS,IACtEH,EAAS,CAAEC,KAAMJ,EAAqBwC,oBAAqBlC,QAAS,OAAQ,SACtEmB,GAAsCF,EAAImC,EAAkBhC,aAAa,KAAD,EAC9EvB,EAAS,CAAEC,KAAMJ,EAAqB2D,oCAAqCrD,QAASoD,IAAqB,gDAEzGvD,EAAS,CAAEC,KAAMJ,EAAqBwC,oBAAqBlC,QAAS,KAAMI,SAAW,oDAAoD,QAE1D,OAF0D,UAEzIP,EAAS,CAAEC,KAAMJ,EAAqBuC,sBAAuBjC,SAAS,IAAS,4EAEtF,mDAXD,EAYJ,EAEasD,GAAkB,SAAC5B,GAC5B,wDAAO,WAAO7B,GAAmC,2EAIa,OAJb,SAEzCA,EAAS,CAAEC,KAAMJ,EAAqBuC,sBAAuBjC,SAAS,IACtEH,EAAS,CAAEC,KAAMJ,EAAqBwC,oBAAqBlC,QAAS,OAAQ,KAC5EH,EAAQ,KAASH,EAAqB6D,iBAAgB,SAAiB9B,GAAqBC,GAAU,yBAA3F5B,KAAK,EAAD,GAAyCE,QAAQ,EAAD,qEAE/DH,EAAS,CAAEC,KAAMJ,EAAqBwC,oBAAqBlC,QAAS,KAAMI,SAAW,wCAAwC,QAE9C,OAF8C,UAE7HP,EAAS,CAAEC,KAAMJ,EAAqBuC,sBAAuBjC,SAAS,IAAS,6EAEtF,mDAVD,EAWJ,EAEawD,GAAkB,SAAC9B,GAC5B,wDAAO,WAAO7B,GAAmC,2EAIa,OAJb,SAEzCA,EAAS,CAAEC,KAAMJ,EAAqBuC,sBAAuBjC,SAAS,IACtEH,EAAS,CAAEC,KAAMJ,EAAqBwC,oBAAqBlC,QAAS,OAAQ,KAC5EH,EAAQ,KAASH,EAAqB+D,iBAAgB,SAAiB9B,GAAqBD,GAAU,yBAA3F5B,KAAK,EAAD,GAAyCE,QAAQ,EAAD,qEAE/DH,EAAS,CAAEC,KAAMJ,EAAqBwC,oBAAqBlC,QAAS,KAAMI,SAAW,wCAAwC,QAE9C,OAF8C,UAE7HP,EAAS,CAAEC,KAAMJ,EAAqBuC,sBAAuBjC,SAAS,IAAS,6EAEtF,mDAVD,EAWJ,EE/FO,SAAe0D,GAAiB,EAAD,uCAItC,cAFC,OAED,mCAJO,WAAgCjD,EAAeC,EAAciD,EAA4C5C,GAAgB,2FAC9G1C,IAAMQ,IAAI,6BAAD,OAA8B4B,EAAK,iBAASC,EAAI,iCAAyBiD,EAAoB,kBAAU5C,IAAQ,uCAAExC,MAAI,4CAC/I,sBAOM,SAAeqF,GAAoB,GAAD,gCAIzC,cAFC,OAED,mCAJO,WAAmC3C,GAAU,2FAClC5C,IAAMQ,IAAI,2BAAD,OAA4BoC,EAAGC,aAAa,uCAAE3C,MAAI,4CAC5E,sBAMM,SAAesF,GAAiC,EAAD,mCAItD,cAFC,OAED,mCAJO,WAAgD5C,EAAY6C,GAAiB,2FAC1EzF,IAAMgD,MAAM,wCAAD,OAAyCJ,GAAM,CAAC,CAAEK,GAAI,UAAWC,KAAM,YAAaC,MAAOsC,KAAa,KAAD,uCAC3H,sBAOM,SAAeC,GAAmB,GAAD,gCAIxC,cAFC,OAED,mCAJO,WAAkCC,GAAwB,2FAC/C3F,IAAMC,KAAK,yBAA0B0F,GAAQ,uCAAEzF,MAAI,4CACpE,sBAOM,SAAe0F,GAAmB,GAAD,gCAIxC,cAFC,OAED,mCAJO,WAAkCD,GAAwB,2FAC/C3F,IAAMuD,IAAI,yBAA0BoC,GAAQ,uCAAEzF,MAAI,4CACnE,sBAMM,SAAe2F,GAAmB,GAAD,gCAEvC,wDAFM,WAAkCjD,GAAU,2FAClC5C,IAAM8F,OAAO,0BAAD,OAA2BlD,EAAGC,aAAc,KAAD,+EACvE,uBD3CA,SAJWW,OAAoB,mBAApBA,IAAoB,uBAApBA,IAAoB,aAI/B,CAJWA,QAAoB,KA2B/B,SAZWC,KAAyB,4CAAzBA,EAAyB,sDAAzBA,EAAyB,wDAAzBA,EAAyB,sDAAzBA,EAAyB,0DAAzBA,EAAyB,oDAAzBA,EAAyB,sEAAzBA,EAAyB,gFAAzBA,EAAyB,gDAAzBA,EAAyB,gDAAzBA,EAAyB,gDAYpC,CAZWA,QAAyB,KEpB9B,ICUKsC,GDVCC,GAAc,SAAC5D,EAAeC,EAAciD,EAA4C5C,GACjG,wDAAO,WAAOlB,GAAwC,2EAKU,OALV,SAE9CA,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IACjFH,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,OAAQ,KACvFH,EAAQ,KACEiC,GAA0B0C,qBAAoB,SAC1Cd,GAAiBjD,EAAOC,EAAMiD,EAAsB5C,GAAM,yBADpEjB,KAAK,EAAD,GAAkDE,QAAQ,EAAD,qEAIjEyE,QAAQC,IAAI,SAAS,EAAD,IACpB7E,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,KAAMI,SAAW,+BAA+B,QAErC,OAFqC,UAE/HP,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IAAS,6EAEjG,mDAdD,EAeJ,EAEa2E,GAAiB,SAAC1D,GAC3B,wDAAO,WAAOpB,GAAwC,2EAIsB,OAJtB,SAE9CA,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IACjFH,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,OAAQ,KACvFH,EAAQ,KAASiC,GAA0B8C,0BAAyB,SAAiBhB,GAAoB3C,GAAG,yBAAjGnB,KAAK,EAAD,GAAuDE,QAAQ,EAAD,qEAE7EH,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,KAAMI,SAAW,sCAAsC,QAE5C,OAF4C,UAEtIP,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IAAS,6EAEjG,mDAVD,EAWJ,EAEa6E,GAAmB,SAACpE,EAAeC,EAAciD,EAA4C5C,GACtG,wDAAO,WAAOlB,GAAwC,2EAKgB,OALhB,SAE9CA,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IACjFH,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,OAAQ,KACvFH,EAAQ,KACEiC,GAA0BgD,2BAA0B,SAChDpB,GAAiBjD,EAAOC,EAAMiD,EAAsB5C,GAAM,yBADpEjB,KAAK,EAAD,GAAwDE,QAAQ,EAAD,qEAIvEH,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,+BAA+B,QAEpB,OAFoB,UAE9GH,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IAAS,6EAEjG,mDAbD,EAcJ,EAEa+E,GAAiB,SAACrE,GAC3B,wDAAO,WAAOb,GAAwC,2EAClDA,EAAS,CAAEC,KAAMgC,GAA0BkD,yBAA0BhF,QAASU,IAAQ,2CACzF,mDAFD,EAGJ,EAEauE,GAAyB,SAACpC,GACnC,wDAAO,WAAOhD,GAAwC,2EAClDA,EAAS,CAAEC,KAAMgC,GAA0BoD,kCAAmClF,QAAS6C,IAAU,2CACpG,mDAFD,EAGJ,EAEasC,GAAkB,SAAC/E,GAC5B,wDAAO,WAAOP,GAAwC,2EAClDA,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAASI,IAAW,2CAC7F,mDAFD,EAGJ,EAEagF,GAAoB,SAAC3C,GAC9B,wDAAO,WAAO5C,GAAwC,2EAClDA,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,QAASyC,IAAa,2CACjG,mDAFD,EAGJ,EAEa4C,GAA8B,SAACpE,EAAYqE,GACpD,wDAAO,WAAOzF,GAAwC,2EAGyC,OAHzC,SAE9CA,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IACjFH,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,OAAQ,SACjF6D,GAAiC5C,EAAIqE,EAAgBxB,UAAU,KAAD,EACpEjE,EAAS,CAAEC,KAAMgC,GAA0ByD,uCAAwCvF,QAASsF,IAAmB,gDAE/GzF,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,KAAMI,SAAW,+CAA+C,QAErD,OAFqD,UAE/IP,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IAAS,4EAEjG,mDAXD,EAYJ,EAEawF,GAAgB,SAACxB,GAC1B,wDAAO,WAAOnE,GAAwC,2EAImB,OAJnB,SAE9CA,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IACjFH,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,OAAQ,KACvFH,EAAQ,KAASiC,GAA0B2D,uBAAsB,SAAiB1B,GAAmBC,GAAQ,yBAAlGlE,KAAK,EAAD,GAAoDE,QAAQ,EAAD,qEAE1EH,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,KAAMI,SAAW,sCAAsC,QAE5C,OAF4C,UAEtIP,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IAAS,6EAEjG,mDAVD,EAWJ,EAEa0F,GAAgB,SAAC1B,GAC1B,wDAAO,WAAOnE,GAAwC,2EAImB,OAJnB,SAE9CA,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IACjFH,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,OAAQ,KACvFH,EAAQ,KAASiC,GAA0B6D,uBAAsB,SAAiB1B,GAAmBD,GAAQ,yBAAlGlE,KAAK,EAAD,GAAoDE,QAAQ,EAAD,qEAE1EH,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,KAAMI,SAAW,sCAAsC,QAE5C,OAF4C,UAEtIP,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IAAS,6EAEjG,mDAVD,EAWJ,EAEa4F,GAAgB,SAAC3E,GAC1B,wDAAO,WAAOpB,GAAwC,2EAGyC,OAHzC,SAE9CA,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IACjFH,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,OAAQ,SACjFkE,GAAmBjD,GAAI,KAAD,EAC5BpB,EAAS,CAAEC,KAAMgC,GAA0B+D,uBAAwB7F,QAASiB,IAAM,gDAElFpB,EAAS,CAAEC,KAAMgC,GAA0ByC,0BAA2BvE,QAAS,KAAMI,SAAW,sCAAsC,QAE5C,OAF4C,UAEtIP,EAAS,CAAEC,KAAMgC,GAA0BwC,4BAA6BtE,SAAS,IAAS,4EAEjG,mDAXD,EAYJ,EE1HO,SAAe8F,GAAkB,EAAD,uCAIvC,cAFC,OAED,mCAJO,WAAiCrF,EAAeC,EAAcI,EAAmBC,GAAgB,2FACtF1C,IAAMQ,IAAI,sBAAD,OAAuB4B,EAAK,iBAASC,EAAI,sBAAcI,EAAS,kBAAUC,IAAQ,uCAAExC,MAAI,4CAClH,sBAOM,SAAewH,GAAoB,GAAD,gCAIzC,cAFC,OAED,mCAJO,WAAmC9E,GAAU,2FAClC5C,IAAMQ,IAAI,oBAAD,OAAqBoC,EAAGC,aAAa,uCAAE3C,MAAI,4CACrE,sBAOM,SAAeyH,GAAmB,GAAD,gCAIxC,cAFC,OAED,mCAJO,WAAkCC,GAAiB,2FACxC5H,IAAMC,KAAK,kBAAmB2H,GAAQ,uCAAE1H,MAAI,4CAC7D,sBAOM,SAAe2H,GAAmB,GAAD,gCAIxC,cAFC,OAED,mCAJO,WAAkCD,GAAiB,2FACxC5H,IAAMuD,IAAI,kBAAmBqE,GAAQ,uCAAE1H,MAAI,4CAC5D,sBAMM,SAAe4H,GAAmB,GAAD,gCAEvC,wDAFM,WAAkClF,GAAU,2FAClC5C,IAAM8F,OAAO,mBAAD,OAAoBlD,IAAM,KAAD,+EACrD,uBDzBA,SATWmD,KAAkB,8BAAlBA,EAAkB,sCAAlBA,EAAkB,sCAAlBA,EAAkB,0CAAlBA,EAAkB,oCAAlBA,EAAkB,gCAAlBA,EAAkB,gCAAlBA,EAAkB,gCAS7B,CATWA,QAAkB,KEVvB,ICkBKgC,GDlBCC,GAAe,SAAC5F,EAAeC,EAAcI,EAAmBC,GACzE,wDAAO,WAAOlB,GAAiC,2EAKG,OALH,SAEvCA,EAAS,CAAEC,KAAMsE,GAAmBkC,oBAAqBtG,SAAS,IAClEH,EAAS,CAAEC,KAAMsE,GAAmBmC,kBAAmBvG,QAAS,OAAQ,KACxEH,EAAQ,KACEuE,GAAmBoC,cAAa,SAC5BV,GAAkBrF,EAAOC,EAAMI,EAAWC,GAAM,yBAD1DjB,KAAK,EAAD,GAAoCE,QAAQ,EAAD,qEAInDH,EAAS,CAAEC,KAAMsE,GAAmBmC,kBAAmBvG,QAAS,KAAMI,SAAW,gCAAgC,QAEtC,OAFsC,UAEjHP,EAAS,CAAEC,KAAMsE,GAAmBkC,oBAAqBtG,SAAS,IAAS,6EAElF,mDAbD,EAcJ,EAEayG,GAAiB,SAACxF,GAC3B,wDAAO,WAAOpB,GAAiC,2EAIc,OAJd,SAEvCA,EAAS,CAAEC,KAAMsE,GAAmBkC,oBAAqBtG,SAAS,IAClEH,EAAS,CAAEC,KAAMsE,GAAmBmC,kBAAmBvG,QAAS,OAAQ,KACxEH,EAAQ,KAASuE,GAAmBsC,kBAAiB,SAAiBX,GAAoB9E,GAAG,yBAAlFnB,KAAK,EAAD,GAAwCE,QAAQ,EAAD,qEAE9DH,EAAS,CAAEC,KAAMsE,GAAmBmC,kBAAmBvG,QAAS,KAAMI,SAAW,sCAAsC,QAE5C,OAF4C,UAEvHP,EAAS,CAAEC,KAAMsE,GAAmBkC,oBAAqBtG,SAAS,IAAS,6EAElF,mDAVD,EAWJ,EAEa2G,GAAkB,SAACvG,GAC5B,wDAAO,WAAOP,GAAiC,2EAC3CA,EAAS,CAAEC,KAAMsE,GAAmBmC,kBAAmBvG,QAASI,IAAW,2CAC9E,mDAFD,EAGJ,EAEawG,GAAoB,SAACnE,GAC9B,wDAAO,WAAO5C,GAAiC,2EAC3CA,EAAS,CAAEC,KAAMsE,GAAmBkC,oBAAqBtG,QAASyC,IAAa,2CAClF,mDAFD,EAGJ,EAEaoE,GAAiB,SAACnG,GAC3B,wDAAO,WAAOb,GAAiC,2EAC3CA,EAAS,CAAEC,KAAMsE,GAAmB0C,iBAAkB9G,QAASU,IAAQ,2CAC1E,mDAFD,EAGJ,EAEaqG,GAAgB,SAACd,GAC1B,wDAAO,WAAOpG,GAAiC,2EAIW,OAJX,SAEvCA,EAAS,CAAEC,KAAMsE,GAAmBkC,oBAAqBtG,SAAS,IAClEH,EAAS,CAAEC,KAAMsE,GAAmBmC,kBAAmBvG,QAAS,OAAQ,KACxEH,EAAQ,KAASuE,GAAmB4C,eAAc,SAAiBhB,GAAmBC,GAAQ,yBAAnFnG,KAAK,EAAD,GAAqCE,QAAQ,EAAD,qEAE3DH,EAAS,CAAEC,KAAMsE,GAAmBmC,kBAAmBvG,QAAS,KAAMI,SAAW,sCAAsC,QAE5C,OAF4C,UAEvHP,EAAS,CAAEC,KAAMsE,GAAmBkC,oBAAqBtG,SAAS,IAAS,6EAElF,mDAVD,EAWJ,EAEaiH,GAAgB,SAAChB,GAC1B,wDAAO,WAAOpG,GAAiC,2EAIW,OAJX,SAEvCA,EAAS,CAAEC,KAAMsE,GAAmBkC,oBAAqBtG,SAAS,IAClEH,EAAS,CAAEC,KAAMsE,GAAmBmC,kBAAmBvG,QAAS,OAAQ,KACxEH,EAAQ,KAASuE,GAAmB8C,eAAc,SAAiBhB,GAAmBD,GAAQ,yBAAnFnG,KAAK,EAAD,GAAqCE,QAAQ,EAAD,qEAE3DH,EAAS,CAAEC,KAAMsE,GAAmBmC,kBAAmBvG,QAAS,KAAMI,SAAW,sCAAsC,QAE5C,OAF4C,UAEvHP,EAAS,CAAEC,KAAMsE,GAAmBkC,oBAAqBtG,SAAS,IAAS,6EAElF,mDAVD,EAWJ,EAEamH,GAAgB,SAAClG,GAC1B,wDAAO,WAAOpB,GAAiC,2EAGiC,OAHjC,SAEvCA,EAAS,CAAEC,KAAMsE,GAAmBkC,oBAAqBtG,SAAS,IAClEH,EAAS,CAAEC,KAAMsE,GAAmBmC,kBAAmBvG,QAAS,OAAQ,SAClEmG,GAAmBlF,GAAI,KAAD,EAC5BpB,EAAS,CAAEC,KAAMsE,GAAmBgD,eAAgBpH,QAASiB,IAAM,gDAEnEpB,EAAS,CAAEC,KAAMsE,GAAmBmC,kBAAmBvG,QAAS,KAAMI,SAAW,sCAAsC,QAE5C,OAF4C,UAEvHP,EAAS,CAAEC,KAAMsE,GAAmBkC,oBAAqBtG,SAAS,IAAS,4EAElF,mDAXD,EAYJ,EEjFO,SAAeqH,GAAkB,EAAD,yCAIvC,cAFC,OAED,mCAJO,WAAiC5G,EAAeC,EAAcC,EAAgBG,EAAmBC,GAAgB,2FACtG1C,IAAMQ,IAAI,uBAAD,OAAwB4B,EAAK,iBAASC,EAAI,mBAAWC,EAAM,sBAAcG,EAAS,kBAAUC,IAAQ,uCAAExC,MAAI,4CACpI,sBAOM,SAAe+I,GAAoB,GAAD,gCAIzC,cAFC,OAED,mCAJO,WAAmCC,GAAmB,2FAC3ClJ,IAAMC,KAAK,mBAAoBiJ,GAAS,uCAAEhJ,MAAI,4CAC/D,sBAOM,SAAeiJ,GAAoB,GAAD,gCAIzC,cAFC,OAED,mCAJO,WAAmCD,GAAmB,2FAC3ClJ,IAAMuD,IAAI,mBAAoB2F,GAAS,uCAAEhJ,MAAI,4CAC9D,sBAMM,SAAekJ,GAAoB,GAAD,gCAExC,wDAFM,WAAmCxG,GAAU,2FACnC5C,IAAM8F,OAAO,oBAAD,OAAqBlD,EAAGC,aAAc,KAAD,+EACjE,uBDVA,SATWkF,KAAmB,8BAAnBA,EAAmB,0CAAnBA,EAAmB,wCAAnBA,EAAmB,4CAAnBA,EAAmB,sCAAnBA,EAAmB,kCAAnBA,EAAmB,kCAAnBA,EAAmB,kCAS9B,CATWA,QAAmB,KEjBxB,ICgBKsB,GDhBCC,GAAe,SAAClH,EAAeC,EAAcC,EAAgBG,EAAmBC,GACzF,wDAAO,WAAOlB,GAAkC,2EAIU,OAJV,SAExCA,EAAS,CAAEC,KAAMsG,GAAoBwB,qBAAsB5H,SAAS,IACpEH,EAAS,CAAEC,KAAMsG,GAAoByB,mBAAoB7H,QAAS,OAAQ,KAC1EH,EAAQ,KAASuG,GAAoB0B,cAAa,SAAiBT,GAAkB5G,EAAOC,EAAMC,EAAQG,EAAWC,GAAM,yBAAhHjB,KAAK,EAAD,GAAqCE,QAAQ,EAAD,qEAE3DH,EAAS,CAAEC,KAAMsG,GAAoByB,mBAAoB7H,QAAS,KAAMI,SAAW,gCAAgC,QAEtC,OAFsC,UAEnHP,EAAS,CAAEC,KAAMsG,GAAoBwB,qBAAsB5H,SAAS,IAAS,6EAEpF,mDAVD,EAWJ,EAEa+H,GAAoB,SAACtH,EAAeC,EAAcC,EAAgBG,EAAmBC,GAC9F,wDAAO,WAAOlB,GAAkC,2EAIgB,OAJhB,SAExCA,EAAS,CAAEC,KAAMsG,GAAoBwB,qBAAsB5H,SAAS,IACpEH,EAAS,CAAEC,KAAMsG,GAAoByB,mBAAoB7H,QAAS,OAAQ,KAC1EH,EAAQ,KAASuG,GAAoB4B,oBAAmB,SAAiBX,GAAkB5G,EAAOC,EAAMC,EAAQG,EAAWC,GAAM,yBAAtHjB,KAAK,EAAD,GAA2CE,QAAQ,EAAD,qEAEjEH,EAAS,CAAEC,KAAMsG,GAAoByB,mBAAoB7H,QAAS,KAAMI,SAAW,gCAAgC,QAEtC,OAFsC,UAEnHP,EAAS,CAAEC,KAAMsG,GAAoBwB,qBAAsB5H,SAAS,IAAS,6EAEpF,mDAVD,EAWJ,EAEaiI,GAAkB,SAACvH,GAC5B,wDAAO,WAAOb,GAAkC,2EAC5CA,EAAS,CAAEC,KAAMsG,GAAoB8B,kBAAmBlI,QAASU,IAAQ,2CAC5E,mDAFD,EAGJ,EAEayH,GAAiB,SAACZ,GAC3B,wDAAO,WAAO1H,GAAkC,2EAIY,OAJZ,SAExCA,EAAS,CAAEC,KAAMsG,GAAoBwB,qBAAsB5H,SAAS,IACpEH,EAAS,CAAEC,KAAMsG,GAAoByB,mBAAoB7H,QAAS,OAAQ,KAC1EH,EAAQ,KAASuG,GAAoBgC,gBAAe,SAAiBd,GAAoBC,GAAS,yBAAvFzH,KAAK,EAAD,GAAuCE,QAAQ,EAAD,qEAE7DH,EAAS,CAAEC,KAAMsG,GAAoByB,mBAAoB7H,QAAS,KAAMI,SAAW,uCAAuC,QAE7C,OAF6C,UAE1HP,EAAS,CAAEC,KAAMsG,GAAoBwB,qBAAsB5H,SAAS,IAAS,6EAEpF,mDAVD,EAWJ,EAEaqI,GAAiB,SAACd,GAC3B,wDAAO,WAAO1H,GAAkC,2EAIY,OAJZ,SAExCA,EAAS,CAAEC,KAAMsG,GAAoBwB,qBAAsB5H,SAAS,IACpEH,EAAS,CAAEC,KAAMsG,GAAoByB,mBAAoB7H,QAAS,OAAQ,KAC1EH,EAAQ,KAASuG,GAAoBkC,gBAAe,SAAiBd,GAAoBD,GAAS,yBAAvFzH,KAAK,EAAD,GAAuCE,QAAQ,EAAD,qEAE7DH,EAAS,CAAEC,KAAMsG,GAAoByB,mBAAoB7H,QAAS,KAAMI,SAAW,uCAAuC,QAE7C,OAF6C,UAE1HP,EAAS,CAAEC,KAAMsG,GAAoBwB,qBAAsB5H,SAAS,IAAS,6EAEpF,mDAVD,EAWJ,EACauI,GAAiB,SAACtH,GAC3B,wDAAO,WAAOpB,GAAkC,2EAEoC,OAFpC,SAExCA,EAAS,CAAEC,KAAMsG,GAAoBwB,qBAAsB5H,SAAS,IAAQ,SACtEyH,GAAoBxG,GAAI,KAAD,EAC7BpB,EAAS,CAAEC,KAAMsG,GAAoBoC,gBAAiBxI,QAASiB,IAAM,gDAErEpB,EAAS,CAAEC,KAAMsG,GAAoByB,mBAAoB7H,QAAS,KAAMI,SAAW,sCAAsC,QAE5C,OAF4C,UAEzHP,EAAS,CAAEC,KAAMsG,GAAoBwB,qBAAsB5H,SAAS,IAAS,4EAEpF,mDAVD,EAWJ,EElEO,SAAeyI,GAAgB,EAAD,uCAIrC,cAFC,OAED,mCAJO,WAA+BhI,EAAeC,EAAcI,EAAmBC,GAAgB,2FACpF1C,IAAMQ,IAAI,qBAAD,OAAsB4B,EAAK,iBAASC,EAAI,sBAAcI,EAAS,kBAAUC,IAAQ,uCAAExC,MAAI,4CACjH,sBAMM,SAAemK,KAAqB,gCAI3C,cAFC,OAED,mCAJO,wGACWrK,IAAMQ,IAAI,4BAA2B,uCAAEN,MAAI,4CAC5D,sBAOM,SAAeoK,GAAmB,GAAD,gCAIxC,cAFC,OAED,mCAJO,WAAkC1H,GAAU,2FACjC5C,IAAMQ,IAAI,mBAAD,OAAoBoC,EAAGC,aAAa,uCAAE3C,MAAI,4CACpE,sBAOM,SAAeqK,GAAkB,GAAD,gCAIvC,cAFC,OAED,mCAJO,WAAiCC,GAAe,2FACrCxK,IAAMC,KAAK,iBAAkBuK,GAAO,uCAAEtK,MAAI,4CAC3D,sBAOM,SAAeuK,GAAkB,GAAD,gCAIvC,cAFC,OAED,mCAJO,WAAiCD,GAAe,2FACrCxK,IAAMuD,IAAI,iBAAkBiH,GAAO,uCAAEtK,MAAI,4CAC1D,sBAMM,SAAewK,GAAkB,GAAD,gCAEtC,wDAFM,WAAiC9H,GAAU,2FACjC5C,IAAM8F,OAAO,kBAAD,OAAmBlD,IAAM,KAAD,+EACpD,uBD3BA,SATWyG,KAAiB,0BAAjBA,EAAiB,oCAAjBA,EAAiB,oCAAjBA,EAAiB,wCAAjBA,EAAiB,kCAAjBA,EAAiB,8BAAjBA,EAAiB,8BAAjBA,EAAiB,8BAS5B,CATWA,QAAiB,KEjBtB,ICiBKsB,GDjBCC,GAAa,SAACxI,EAAeC,EAAcI,EAAmBC,GACvE,wDAAO,WAAOlB,GAAgC,2EAKC,OALD,SAEtCA,EAAS,CAAEC,KAAM4H,GAAkBwB,mBAAoBlJ,SAAS,IAChEH,EAAS,CAAEC,KAAM4H,GAAkByB,iBAAkBnJ,QAAS,OAAQ,KACtEH,EAAQ,KACE6H,GAAkB0B,YAAW,SACzBX,GAAgBhI,EAAOC,EAAMI,EAAWC,GAAM,yBADxDjB,KAAK,EAAD,GAAiCE,QAAQ,EAAD,qEAIhDH,EAAS,CAAEC,KAAM4H,GAAkByB,iBAAkBnJ,QAAS,KAAMI,SAAW,8BAA8B,QAEpC,OAFoC,UAE7GP,EAAS,CAAEC,KAAM4H,GAAkBwB,mBAAoBlJ,SAAS,IAAS,6EAEhF,mDAbD,EAcJ,EAEaqJ,GAAgB,SAACpI,GAC1B,wDAAO,WAAOpB,GAAgC,2EAIa,OAJb,SAEtCA,EAAS,CAAEC,KAAM4H,GAAkBwB,mBAAoBlJ,SAAS,IAChEH,EAAS,CAAEC,KAAM4H,GAAkByB,iBAAkBnJ,QAAS,OAAQ,KACtEH,EAAQ,KAAS6H,GAAkB4B,iBAAgB,SAAiBX,GAAmB1H,GAAG,yBAA/EnB,KAAK,EAAD,GAAsCE,QAAQ,EAAD,qEAE5DH,EAAS,CAAEC,KAAM4H,GAAkByB,iBAAkBnJ,QAAS,KAAMI,SAAW,qCAAqC,QAE3C,OAF2C,UAEpHP,EAAS,CAAEC,KAAM4H,GAAkBwB,mBAAoBlJ,SAAS,IAAS,6EAEhF,mDAVD,EAWJ,EAEauJ,GAAiB,SAACnJ,GAC3B,wDAAO,WAAOP,GAAgC,2EAC1CA,EAAS,CAAEC,KAAM4H,GAAkByB,iBAAkBnJ,QAASI,IAAW,2CAC5E,mDAFD,EAGJ,EAEaoJ,GAAmB,SAAC/G,GAC7B,wDAAO,WAAO5C,GAAgC,2EAC1CA,EAAS,CAAEC,KAAM4H,GAAkBwB,mBAAoBlJ,QAASyC,IAAa,2CAChF,mDAFD,EAGJ,EAEagH,GAAgB,SAAC/I,GAC1B,wDAAO,WAAOb,GAAgC,2EAC1CA,EAAS,CAAEC,KAAM4H,GAAkBgC,gBAAiB1J,QAASU,IAAQ,2CACxE,mDAFD,EAGJ,EAEaiJ,GAAe,SAACd,GACzB,wDAAO,WAAOhJ,GAAgC,2EAIU,OAJV,SAEtCA,EAAS,CAAEC,KAAM4H,GAAkBwB,mBAAoBlJ,SAAS,IAChEH,EAAS,CAAEC,KAAM4H,GAAkByB,iBAAkBnJ,QAAS,OAAQ,KACtEH,EAAQ,KAAS6H,GAAkBkC,cAAa,SAAiBhB,GAAkBC,GAAO,yBAA/E/I,KAAK,EAAD,GAAmCE,QAAQ,EAAD,qEAEzDH,EAAS,CAAEC,KAAM4H,GAAkByB,iBAAkBnJ,QAAS,KAAMI,SAAW,qCAAqC,QAE3C,OAF2C,UAEpHP,EAAS,CAAEC,KAAM4H,GAAkBwB,mBAAoBlJ,SAAS,IAAS,6EAEhF,mDAVD,EAWJ,EAEa6J,GAAe,SAAChB,GACzB,wDAAO,WAAOhJ,GAAgC,2EAIU,OAJV,SAEtCA,EAAS,CAAEC,KAAM4H,GAAkBwB,mBAAoBlJ,SAAS,IAChEH,EAAS,CAAEC,KAAM4H,GAAkByB,iBAAkBnJ,QAAS,OAAQ,KACtEH,EAAQ,KAAS6H,GAAkBoC,cAAa,SAAiBhB,GAAkBD,GAAO,yBAA/E/I,KAAK,EAAD,GAAmCE,QAAQ,EAAD,qEAEzDH,EAAS,CAAEC,KAAM4H,GAAkByB,iBAAkBnJ,QAAS,KAAMI,SAAW,qCAAqC,QAE3C,OAF2C,UAEpHP,EAAS,CAAEC,KAAM4H,GAAkBwB,mBAAoBlJ,SAAS,IAAS,6EAEhF,mDAVD,EAWJ,EAEa+J,GAAe,SAAC9I,GACzB,wDAAO,WAAOpB,GAAgC,2EAGgC,OAHhC,SAEtCA,EAAS,CAAEC,KAAM4H,GAAkBwB,mBAAoBlJ,SAAS,IAChEH,EAAS,CAAEC,KAAM4H,GAAkByB,iBAAkBnJ,QAAS,OAAQ,SAChE+I,GAAkB9H,GAAI,KAAD,EAC3BpB,EAAS,CAAEC,KAAM4H,GAAkBsC,cAAehK,QAASiB,IAAM,gDAEjEpB,EAAS,CAAEC,KAAM4H,GAAkByB,iBAAkBnJ,QAAS,KAAMI,SAAW,qCAAqC,QAE3C,OAF2C,UAEpHP,EAAS,CAAEC,KAAM4H,GAAkBwB,mBAAoBlJ,SAAS,IAAS,4EAEhF,mDAXD,EAYJ,EErFO,SAAeiK,GAAc,EAAD,qCAInC,cAFC,OAED,mCAJO,WAA6BxJ,EAAeC,EAAcC,GAAc,2FAC7DtC,IAAMQ,IAAI,sBAAD,OAAuB4B,EAAK,iBAASC,EAAI,mBAAWC,IAAS,uCAAEpC,MAAI,4CAC7F,sBAMM,SAAe2L,GAAoC,EAAD,mCAIzD,cAFC,OAED,mCAJO,WAAmDjJ,EAAYkJ,GAAkB,2FAC9E9L,IAAMgD,MAAM,8BAAD,OAA+BJ,GAAM,CAAC,CAAEK,GAAI,UAAWC,KAAM,kBAAmBC,MAAO2I,KAAc,KAAD,uCACxH,sBAOM,SAAeC,GAAgB,GAAD,gCAEpC,wDAFM,WAA+BC,GAAW,2FAC/BhM,IAAMC,KAAK,kBAAmB+L,GAAK,uCAAE9L,MAAI,4CAC1D,uBDAA,SAPWyK,KAAe,0BAAfA,EAAe,sEAAfA,EAAe,oDAAfA,EAAe,8BAAfA,EAAe,gCAAfA,EAAe,oCAO1B,CAPWA,QAAe,KElBpB,ICYKsB,GA4BAC,GDxCCC,GAAW,SAAC/J,EAAeC,EAAcsB,GAClD,wDAAO,WAAOnC,GAA8B,2EAIM,OAJN,SAEpCA,EAAS,CAAEC,KAAMkJ,GAAgByB,iBAAkBzK,SAAS,IAC5DH,EAAS,CAAEC,KAAMkJ,GAAgB0B,eAAgB1K,QAAS,OAAQ,KAClEH,EAAQ,KAASmJ,GAAgB2B,UAAS,SAAiBV,GAAcxJ,EAAOC,EAAMsB,EAAQ4I,kBAAiB,yBAApG9K,KAAK,EAAD,GAA6BE,QAAQ,EAAD,qEAEnDH,EAAS,CAAEC,KAAMkJ,GAAgB0B,eAAgB1K,QAAS,KAAMI,SAAW,4BAA4B,QAElC,OAFkC,UAEvGP,EAAS,CAAEC,KAAMkJ,GAAgByB,iBAAkBzK,SAAS,IAAS,6EAE5E,mDAVD,EAWJ,EAEa6K,GAAiC,SAAC5J,EAAY6J,GACvD,wDAAO,WAAOjL,GAA8B,2EAG8B,OAH9B,SAEpCA,EAAS,CAAEC,KAAMkJ,GAAgByB,iBAAkBzK,SAAS,IAC5DH,EAAS,CAAEC,KAAMkJ,GAAgB0B,eAAgB1K,QAAS,OAAQ,SAC5DkK,GAAoCjJ,EAAI6J,EAAaC,gBAAgB,KAAD,EAC1ElL,EAAS,CAAEC,KAAMkJ,GAAgBgC,kCAAmChL,QAAS8K,IAAgB,gDAE7FjL,EAAS,CAAEC,KAAMkJ,GAAgB0B,eAAgB1K,QAAS,KAAMI,SAAW,kDAAkD,QAExD,OAFwD,UAE7HP,EAAS,CAAEC,KAAMkJ,GAAgByB,iBAAkBzK,SAAS,IAAS,4EAE5E,mDAXD,EAYJ,EAEaiL,GAAwB,SAACtK,GAClC,wDAAO,WAAOd,GAA8B,2EACxCA,EAAS,CAAEC,KAAMkJ,GAAgBkC,yBAA0BlL,QAASW,IAAU,2CACjF,mDAFD,EAGJ,EAEawK,GAAc,SAACzK,GACxB,wDAAO,WAAOb,GAA8B,2EACxCA,EAAS,CAAEC,KAAMkJ,GAAgBoC,cAAepL,QAASU,IAAQ,2CACpE,mDAFD,EAGJ,EAEa2K,GAAe,SAACjL,GACzB,wDAAO,WAAOP,GAA8B,2EACxCA,EAAS,CAAEC,KAAMkJ,GAAgB0B,eAAgB1K,QAASI,IAAW,2CACxE,mDAFD,EAGJ,EElCO,SAAekL,GAAkB,EAAD,6CAYvC,cAFC,OAED,mCAZO,WACH7K,EACAC,EACAC,EACA4K,EACAC,EACA1K,EACAC,GAAgB,2FAEN1C,IAAMQ,IAAI,sBAAD,OAAuB4B,EAAK,iBAASC,EAAI,mBAAWC,EAAM,0BAAkB4K,EAAcrK,WAAU,qBAAasK,EAAQ,sBAAc1K,EAAS,kBAAUC,IAAQ,uCAAExC,MAAI,4CAC9L,sBAMM,SAAekN,GAAoB,GAAD,gCAIzC,cAFC,OAED,mCAJO,WAAmCxK,GAAU,2FAClC5C,IAAMQ,IAAI,oBAAD,OAAqBoC,EAAGC,aAAa,uCAAE3C,MAAI,4CACrE,sBAOM,SAAemN,GAA2B,EAAD,mCAIhD,cAFC,OAED,mCAJO,WAA0CC,EAAqBH,GAAgB,2FACpEnN,IAAMQ,IAAI,8CAAD,OAA+C8M,EAAW,qBAAaH,IAAW,uCAAEjN,MAAI,4CAClH,sBAMM,SAAeqN,GAAuB,EAAD,mCAI5C,cAFC,OAED,mCAJO,WAAsC3K,EAAY4K,GAAc,2FAC7DxN,IAAMgD,MAAM,iCAAD,OAAkCJ,GAAM,CAAC,CAAEK,GAAI,UAAWC,KAAM,YAAaC,MAAOqK,KAAW,KAAD,uCAClH,sBAMM,SAAeC,GAAiC,EAAD,mCAItD,cAFC,OAED,mCAJO,WAAgD7K,EAAY6C,GAAiB,2FAC1EzF,IAAMgD,MAAM,iCAAD,OAAkCJ,GAAM,CAAC,CAAEK,GAAI,UAAWC,KAAM,YAAaC,MAAOsC,KAAa,KAAD,uCACpH,sBAOM,SAAeiI,GAAmB,GAAD,gCAIxC,cAFC,OAED,mCAJO,WAAkCC,GAAiB,2FACxC3N,IAAMC,KAAK,kBAAmB0N,GAAQ,uCAAEzN,MAAI,4CAC7D,sBAOM,SAAe0N,GAAmB,GAAD,gCAEvC,wDAFM,WAAkCD,GAAiB,2FACxC3N,IAAMuD,IAAI,kBAAmBoK,GAAQ,uCAAEzN,MAAI,4CAC5D,uBDxDA,SAJW+L,OAAa,mBAAbA,IAAa,uBAAbA,IAAa,aAIxB,CAJWA,QAAa,KA+CxB,SAnBWC,KAAkB,8BAAlBA,EAAkB,sCAAlBA,EAAkB,0CAAlBA,EAAkB,sCAAlBA,EAAkB,0CAAlBA,EAAkB,sCAAlBA,EAAkB,0CAAlBA,EAAkB,oCAAlBA,EAAkB,sDAAlBA,EAAkB,sDAAlBA,EAAkB,0DAAlBA,EAAkB,0CAAlBA,EAAkB,4CAAlBA,EAAkB,0CAAlBA,EAAkB,wCAAlBA,EAAkB,gEAAlBA,EAAkB,gCAAlBA,EAAkB,gCAmB7B,CAnBWA,QAAkB,KEtCvB,ICNK2B,GDMCC,GAAe,SAAC1L,EAAeC,EAAcC,EAAgB4K,EAA8BC,EAAkB1K,EAAmBC,GACzI,wDAAO,WAAOlB,GAAiC,2EAKG,OALH,SAEvCA,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAClEH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,OAAQ,KACxEH,EAAQ,KACE0K,GAAmB+B,cAAa,SAC5BhB,GAAkB7K,EAAOC,EAAMC,EAAQ4K,EAAeC,EAAU1K,EAAWC,GAAM,yBAD3FjB,KAAK,EAAD,GAAoCE,QAAQ,EAAD,qEAInDH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,KAAMI,SAAW,gCAAgC,QAEtC,OAFsC,UAEjHP,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAAS,6EAElF,mDAbD,EAcJ,EAEauM,GAAiB,SAACtL,GAC3B,wDAAO,WAAOpB,GAAiC,2EAIc,OAJd,SAEvCA,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAClEH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,OAAQ,KACxEH,EAAQ,KAAS0K,GAAmBiC,kBAAiB,SAAiBf,GAAoBxK,GAAG,yBAAlFnB,KAAK,EAAD,GAAwCE,QAAQ,EAAD,qEAE9DH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,KAAMI,SAAW,sCAAsC,QAE5C,OAF4C,UAEvHP,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAAS,6EAElF,mDAVD,EAWJ,EAEayM,GAAsB,WAC/B,wDAAO,WAAO5M,GAAiC,2EAIgB,OAJhB,SAEvCA,EAAS,CAAEC,KAAMyK,GAAmBmC,oBAAqB1M,SAAS,IAClEH,EAAS,CAAEC,KAAMyK,GAAmBoC,kBAAmB3M,QAAS,OAAQ,KACxEH,EAAQ,KAAS0K,GAAmBqC,oBAAmB,SAAiBlE,KAAuB,yBAApF5I,KAAK,EAAD,GAA0CE,QAAQ,EAAD,qEAEhEH,EAAS,CAAEC,KAAMyK,GAAmBoC,kBAAmB3M,QAAS,KAAMI,SAAW,gCAAgC,QAEtC,OAFsC,UAEjHP,EAAS,CAAEC,KAAMyK,GAAmBmC,oBAAqB1M,SAAS,IAAS,6EAElF,mDAVD,EAWJ,EAEa6M,GAAqB,SAAClM,EAAgB6K,GAC/C,wDAAO,WAAO3L,GAAiC,2EAIiB,OAJjB,SAEvCA,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAClEH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,OAAQ,KACxEH,EAAQ,KAAS0K,GAAmBuC,qBAAoB,SAAiBpB,GAA2B/K,EAAQ6K,GAAS,yBAA1G1L,KAAK,EAAD,GAA2CE,QAAQ,EAAD,qEAEjEH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,KAAMI,SAAW,uCAAuC,QAE7C,OAF6C,UAExHP,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAAS,6EAElF,mDAVD,EAWJ,EAEa+M,GAAoB,SAACtM,EAAeC,EAAcC,EAAgB4K,EAA8BC,EAAkB1K,EAAmBC,GAC9I,wDAAO,WAAOlB,GAAiC,2EAKS,OALT,SAEvCA,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAClEH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,OAAQ,KACxEH,EAAQ,KACE0K,GAAmByC,oBAAmB,SAClC1B,GAAkB7K,EAAOC,EAAMC,EAAQ4K,EAAeC,EAAU1K,EAAWC,GAAM,yBAD3FjB,KAAK,EAAD,GAA0CE,QAAQ,EAAD,qEAIzDH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,KAAMI,SAAW,gCAAgC,QAEtC,OAFsC,UAEjHP,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAAS,6EAElF,mDAbD,EAcJ,EAMaiN,GAAiB,SAACvM,GAC3B,wDAAO,WAAOb,GAAiC,2EAC3CA,EAAS,CAAEC,KAAMyK,GAAmB2C,iBAAkBlN,QAASU,IAAQ,2CAC1E,mDAFD,EAGJ,EAEayM,GAAyB,SAAC9K,GACnC,wDAAO,WAAOxC,GAAiC,2EAC3CA,EAAS,CAAEC,KAAMyK,GAAmB6C,0BAA2BpN,QAASqC,IAAU,2CACrF,mDAFD,EAGJ,EAEagL,GAAoB,SAAC5K,GAC9B,wDAAO,WAAO5C,GAAiC,2EAC3CA,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,QAASyC,IAAa,2CAClF,mDAFD,EAGJ,EAEa6K,GAAyB,SAAC9B,GACnC,wDAAO,WAAO3L,GAAiC,2EAC3CA,EAAS,CAAEC,KAAMyK,GAAmBgD,0BAA2BvN,QAASwL,IAAY,2CACvF,mDAFD,EAGJ,EAEagC,GAA2B,SAAC7M,GACrC,wDAAO,WAAOd,GAAiC,2EAC3CA,EAAS,CAAEC,KAAMyK,GAAmBkD,4BAA6BzN,QAASW,IAAU,2CACvF,mDAFD,EAGJ,EAEa+M,GAAoB,SAAC1B,GAC9B,wDAAO,WAAOnM,GAAiC,2EAC3CA,EAAS,CAAEC,KAAMyK,GAAmBoD,oBAAqB3N,QAASgM,IAAW,2CAChF,mDAFD,EAGJ,EAEa4B,GAAoB,SAAC3M,EAAY4K,GAC1C,wDAAO,WAAOhM,GAAiC,2EAGiC,OAHjC,SAEvCA,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAClEH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,OAAQ,SAClE4L,GAAuB3K,EAAI4K,GAAQ,KAAD,EACxChM,EAAS,CAAEC,KAAMyK,GAAmBsD,mBAAoB7N,QAAS6L,IAAU,gDAE3EhM,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,KAAMI,SAAW,oDAAoD,QAE1D,OAF0D,UAErIP,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAAS,4EAElF,mDAXD,EAYJ,EAEa8N,GAA8B,SAAC7M,EAAY8M,GACpD,wDAAO,WAAOlO,GAAiC,2EAGiC,OAHjC,SAEvCA,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAClEH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,OAAQ,SAClE8L,GAAiC7K,EAAI8M,EAAgBjK,UAAU,KAAD,EACpEjE,EAAS,CAAEC,KAAMyK,GAAmByD,+BAAgChO,QAAS+N,IAAmB,gDAEhGlO,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,KAAMI,SAAW,+CAA+C,QAErD,OAFqD,UAEhIP,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAAS,4EAElF,mDAXD,EAYJ,EAEaiO,GAAgB,SAACjC,GAC1B,wDAAO,WAAOnM,GAAiC,2EAIW,OAJX,SAEvCA,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAClEH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,OAAQ,KACxEH,EAAQ,KAAS0K,GAAmB2D,eAAc,SAAiBnC,GAAmBC,GAAQ,yBAAnFlM,KAAK,EAAD,GAAqCE,QAAQ,EAAD,qEAE3DH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,KAAMI,SAAW,sCAAsC,QAE5C,OAF4C,UAEvHP,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAAS,6EAElF,mDAVD,EAWJ,EAEamO,GAAgB,SAACnC,GAC1B,wDAAO,WAAOnM,GAAiC,2EAIW,OAJX,SAEvCA,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAClEH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,OAAQ,KACxEH,EAAQ,KAAS0K,GAAmB6D,eAAc,SAAiBnC,GAAmBD,GAAQ,yBAAnFlM,KAAK,EAAD,GAAqCE,QAAQ,EAAD,qEAE3DH,EAAS,CAAEC,KAAMyK,GAAmB8B,kBAAmBrM,QAAS,KAAMI,SAAW,sCAAsC,QAE5C,OAF4C,UAEvHP,EAAS,CAAEC,KAAMyK,GAAmB6B,oBAAqBpM,SAAS,IAAS,6EAElF,mDAVD,EAWJ,EEzKaqO,GAAc,mGACpBC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GCbMC,GAAa,WACtB,IAAMjP,EAAWkP,cACjB,OAAOC,YAAmBX,GAAgBxO,EAC9C,GFHC,SAJWqM,OAAS,yBAATA,IAAS,2BAATA,IAAS,eAIpB,CAJWA,QAAS,K,cGGN,SAAS+C,GAAW,GAA0D,IAAxDvS,EAAK,EAALA,MAAOwS,EAAQ,EAARA,SAExC,OACI,cAACtS,EAAA,EAAI,CAACM,MAAI,WACN,cAACiS,GAAA,EAAS,CACNC,MAAO1S,EACPoD,KAAK,OACLuP,OAAO,SACPC,WAAS,EACTC,SAAU,SAACC,GAAK,OAAKN,EAASM,EAAMC,OAAOjO,MAAM,KAIjE,C,wBCXe,SAASkO,GAAe,GAAkE,IAAhEN,EAAK,EAALA,MAAOO,EAAO,EAAPA,QAASC,EAAS,EAATA,UAErD,OACI,cAAChT,EAAA,EAAI,CAACM,MAAI,WACN,cAAC2S,GAAA,EAAgB,CACbC,QACI,cAACC,GAAA,EAAQ,CACLR,SAAU,SAACC,EAAsCQ,GAAgB,OAAKL,EAAQK,EAAQ,EACtFA,QAASJ,IAEjBR,MAAOA,KAGvB,C,cCfe,SAASa,GAAgB,GAA4D,IAA1DC,EAAQ,EAARA,SAAUC,EAAQ,EAARA,SAEhD,OACI,cAACvT,EAAA,EAAI,CAACM,MAAI,WACN,cAACkT,GAAA,EAAM,CACHC,QAAQ,YACRC,MAAO,CAAEC,UAAW,QACpBC,QAASN,EAAS,SACjBC,KAIjB,CCNe,SAASM,GAAsB,GAA2C,IAAzCC,EAAQ,EAARA,SACpC1O,EAAYzF,GAAiB,SAAAoU,GAAK,OAAIA,EAAMjP,SAAS,IAArDM,QACR,EAAmF8M,KAA3EpM,EAAgB,EAAhBA,iBAAkBO,EAA0B,EAA1BA,2BAA4BL,EAAwB,EAAxBA,yBAatD,OACI,eAAChG,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,MAAME,eAAgB,gBAAiBD,WAAY,SAAS,UAC9F,cAAC0S,GAAc,CAACN,MAAM,0BAA0BO,QAblB,SAACK,GACzBpN,EAAVoN,EAAmCvQ,EAAgBmR,OAAmCnR,EAAgBoR,IAC1G,EAWgGjB,UAAW5N,EAAQK,SAAW5C,EAAgBmR,SACtI,cAAC3B,GAAgB,CAACvS,MAAM,mBAAmBwS,SAV5B,SAACvO,GACE,IAAlBA,EAAOmQ,QAAc7N,EAA2B,IAChDtC,EAAOmQ,OAAS,IACpBpO,EAAiB,GACjBO,EAA2BtC,GAC/B,IAMQ,cAACsP,GAAe,CAACC,SAAUQ,EAAS,SAAC,sBAGjD,C,IC7BYK,G,+CCFCC,GAAe,wJAKfC,GAAkB,uCAOlBC,GAAe,4D,gHDN3B,SAJWH,OAAiB,iBAAjBA,IAAiB,qBAAjBA,IAAiB,iBAI5B,CAJWA,QAAiB,K,OEEd,SAASI,GAAa,GAAsD,IACnFC,EAD+BjB,EAAQ,EAARA,SAAUkB,EAAU,EAAVA,WAE7C,GAAQA,IACCN,GAAkBO,MACnBF,EAAW,2BAGXA,EAAW,wBAGnB,OAMI,aALA,CAKCxU,EAAA,EAAI,CAACC,WAAS,EACXE,UAAU,MACVE,eAAe,SACfsU,GAAIF,IAAeN,GAAkBO,MAAQ,EAAI,EAAE,SAEnD,cAACE,GAAA,EAAU,CACPnB,QAASgB,IAAeN,GAAkBO,MAAQ,KAAO,QACzDxT,UAAW,OACXX,UAAWiU,EAAS,SAEnBjB,KAIjB,CCjBA,IAAMG,GAAQ,CACVmB,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,QAAS,mBACTC,UAAW,GACXC,EAAG,GAGQ,SAASC,GAAmB,GAAiE,IAA/DtQ,EAAS,EAATA,UAAWuQ,EAAS,EAATA,UACpD,EAA6CnD,KAArCxL,EAAe,EAAfA,gBAAiBE,EAAe,EAAfA,gBACzB,EAA0B0O,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KACtB,EAA0CF,mBAAexQ,EAAU2Q,UAAS,mBAArEC,EAAa,KAAEC,EAAgB,KAEhCC,EAAmBC,KAAW,CAChCxR,GAAIwR,OACCC,WACLC,SAAUF,OACLC,WACAE,IAAI,EAAG,2CACPC,IAAI,GAAI,6DACbjU,MAAO6T,OACFI,IAAI,GAAI,0DACRC,QAAQ9B,GAAe,sCAC5B+B,MAAON,OACFK,QAAQ5B,GAAe,yLAC5B8B,MAAOP,OACFC,WACAE,IAAI,EAAG,wCACZP,SAAUI,OACLC,SAAS,oBACd7R,UAAW4R,OACNQ,WACAP,SAAS,6BAGZQ,EAA4B,CAC9BjS,GAAIS,EAAUT,GACd0R,SAAUjR,EAAUiR,SACpB/T,MAAO8C,EAAU9C,MACjBmU,MAAOrR,EAAUqR,MACjBC,MAAOtR,EAAUsR,MACjB5R,YAAaM,EAAUN,YACvBiR,SAAU3Q,EAAU2Q,SACpBxR,UAAmC,IAAxBa,EAAUb,UAAkBa,EAAUb,UAAY,MAGjE,EAA0EsS,aAAQ,CAC9EC,SAAUC,aAAYb,GACtBU,kBAFIpD,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUE,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAK1DC,EAAQ,iDAAG,WAAOjS,GAAqB,2EACzCA,EAAU2Q,SAAWC,EACJ,IAAjB5Q,EAAUT,GAAWqC,EAAgB5B,GAAa8B,EAAgB9B,GAClEkS,IAAkB,2CACrB,gBAJa,sCAMRA,EAAkB,WACpBxB,EAAS,MACTsB,IACAzB,GACJ,EAEA,OACI,cAAC4B,GAAA,EAAK,CACFC,MAAM,EACNC,QAAS9B,EACTlU,GAAI,CAAEiW,UAAW,UAAU,SAE3B,eAACnW,EAAA,EAAG,CAACE,GAAIuS,GAAM,UACX,uBAAMqD,SAAUL,EAAaK,GAAWrD,MAAO,CAAE7S,SAAU,SAAU,UACjE,iDAAWgW,EAAS,OAAK,IAAE3T,KAAK,YAChC,eAAClD,EAAA,EAAI,CAACC,WAAS,EAACE,UAAW,SAAUE,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UAC7F,cAACzC,GAAA,EAAU,CAACnB,QAAQ,KAAKvS,UAAW,IAAKC,GAAI,CAAEkW,QAAS,OAAQC,WAAY,KAAM,SAAC,mBAGnF,cAACtX,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,WAAWrE,QAASA,EACjCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,YAAYtP,KAAK,OAAOuP,OAAO,SAASC,WAAS,EAC1E6C,MAAOmC,QAAQf,EAAOZ,UAAW4B,WAA2B,QAAjB,EAAEhB,EAAOZ,gBAAQ,aAAf,EAAiBvS,UAAW,MAEzF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,QACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,QAAQtP,KAAK,QAAQuP,OAAO,SAASC,WAAS,EACvEkF,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAe,SAIhCzC,MAAOmC,QAAQf,EAAO3U,OAAQ2V,WAAwB,QAAd,EAAEhB,EAAO3U,aAAK,aAAZ,EAAcwB,UAAW,MAEnF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,QAAQrE,QAASA,EAC9BsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,QAAQtP,KAAK,OAAOuP,OAAO,SAASC,WAAS,EACrEkF,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAS,SAI1BzC,MAAOmC,QAAQf,EAAOR,OAAQwB,WAAwB,QAAd,EAAEhB,EAAOR,aAAK,aAAZ,EAAc3S,UAAW,MAEnF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,QAAQrE,QAASA,EAC9BsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,QAAQE,WAAS,EACzCD,OAAO,SAASwF,WAAS,EAACC,KAAM,EAAGzE,QAAQ,WAAWC,MAAO,CAAEyE,OAAQ,QACvE5C,MAAOmC,QAAQf,EAAOP,OAAQuB,WAAwB,QAAd,EAAEhB,EAAOP,aAAK,aAAZ,EAAc5S,UAAW,MAEnF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC2S,GAAA,EAAgB,CACbC,QACI,cAAC,KAAU,CAACqE,KAAK,cAAcrE,QAASA,EACpCsE,OAAQ,gBAAUY,EAAK,EAAZX,MAAK,OACZ,cAACtE,GAAA,EAAQ,2BACDiF,GAAK,IACThF,QAASgF,EAAMxT,MACf+N,SAAU,SAAC0F,GAAC,OAAKD,EAAMzF,SAAS0F,EAAExF,OAAOO,QAAQ,IACnD,IAIdZ,MAAM,iBAGd,cAACxS,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,WAAWrE,QAASA,EACjCsE,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACZ,cAACa,GAAA,EAAoB,CAACC,YAAaC,KAAc,SAC7C,cAACC,GAAA,EAAU,2BACHhB,GAAK,IACTjF,MAAM,YACNkG,OAAO,aACP9T,MAAO+T,KAAOjD,GACd/C,SAAU,SAACiG,GAAQ,OAAKjD,EAAiBiD,EAASC,SAAS,MAE5C,SAIvC,eAAC7Y,EAAA,EAAI,CAACC,WAAS,EAACI,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UACxE,cAACrX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWG,QAASoD,EAAgB,SAAC,aAEzD,cAAChX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SAAC,iBAIpDqS,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,QAIhF,C,gJClLe,SAASyD,GAAgB,GAA6D,IAA3DC,EAAK,EAALA,MAAOC,EAAY,EAAZA,aAC7C,EAAwB5D,mBAAS,GAAE,mBAA5BxR,EAAI,KAAEqV,EAAO,KAMpB,OACI,cAAClY,EAAA,EAAG,CAACmY,GAAI,EAAGC,GAAI,EAAGC,QAAQ,OAAOjZ,eAAgB,SAAS,SACvD,cAACkZ,GAAA,EAAU,CAACN,MAAOA,EAAOnV,KAAMA,EAAM6O,SAPzB,SAACC,EAA6BhO,GAC/CsU,EAAatU,GACbuU,EAAQvU,EACZ,KAOJ,C,cCbe,SAAS4U,GAAY,GAA4C,IAA1CC,EAAM,EAANA,OAClC,OACI,cAACC,GAAA,EAAS,UACN,cAACC,GAAA,EAAQ,UACJF,EAAOG,KAAI,SAACC,EAAQC,GAAK,OACtB,cAACC,GAAA,EAAS,CAAaC,MAAM,SAAQ,SAAEH,GAAvBC,EAA0C,OAI9E,CCDe,SAASG,GAAoB,GAAoD,IAAlDC,EAAM,EAANA,OAClCC,EAA0Bxa,GAAiB,SAAAoU,GAAK,OAAIA,EAAMjP,SAAS,IAAnEqV,sBACR,EAA+DjI,KAAvD3L,EAAgC,EAAhCA,iCAAkCT,EAAgB,EAAhBA,iBAwB1C,OACI,qCACI,cAACsU,GAAA,EAAc,CAAClZ,UAAWmZ,KAAOlZ,GAAI,CAAEsR,OAAQ,UAAW,SACvD,eAAC6H,GAAA,EAAK,CAACnZ,GAAI,CAAEoZ,SAAU,KAAO,aAAW,eAAc,UACnD,cAACf,GAAW,CAACC,OAAQ,CAAC,YAAa,QAAS,QAAS,QAAS,aAAc,SAAU,UAAW,aACjG,cAACe,GAAA,EAAS,UACLL,EAAsBM,SAASb,KAAI,SAAC9U,GAAS,iBAC1C,eAAC6U,GAAA,EAAQ,CAAoBxY,GAAI,CAAE,mCAAoC,CAAEuZ,OAAQ,IAAM,UACnF,cAACX,GAAA,EAAS,CAAC7Y,UAAU,KAAKyZ,MAAM,MAAK,SAAE7V,EAAUiR,WACjD,cAACgE,GAAA,EAAS,CAACC,MAAM,OAAM,SAAElV,EAAU9C,QACnC,cAAC+X,GAAA,EAAS,CAACC,MAAM,OAAM,SAAElV,EAAUqR,QACnC,cAAC4D,GAAA,EAAS,CAACC,MAAM,OAAM,SAAElV,EAAUsR,MAAMwE,MAAM,EAAG,IAAIC,OAAO,SAC7D,cAACd,GAAA,EAAS,CAACC,MAAM,OAAM,SACnB,cAACc,GAAA,EAAM,CAAC1H,QAAStO,EAAUN,YAAaoP,QAAS,kBAnCrD,SAACvP,GACzB,IAAM0W,EAAmBZ,EAAsBM,SAASO,MAAK,SAAAC,GAAC,OAAIA,EAAE5W,KAAOA,CAAE,IACvEmC,EAA6B,eAAQuU,GAC3CvU,EAAkBhC,aAAeuW,EAAiBvW,YAClD+B,EAAiClC,EAAImC,EACzC,CA8BuF0U,CAAoBpW,EAAUT,GAAG,MAE5F,cAAC0V,GAAA,EAAS,CAACC,MAAM,OAAM,SAAErB,KAAO7T,EAAU2Q,UAAUiD,OAAO,gBAC3D,cAACqB,GAAA,EAAS,CAACC,MAAM,OAAM,UAAsB,QAApB,EAAAlV,EAAUqW,kBAAU,aAApB,EAAsBrb,MAAMoU,QAAS,GAAyB,QAAvB,EAAGpP,EAAUqW,kBAAU,aAApB,EAAsBrb,MAAM8a,MAAM,EAAG,IAAIC,OAAO,OAA6B,QAAvB,EAAG/V,EAAUqW,kBAAU,aAApB,EAAsBrb,QAClJ,cAACia,GAAA,EAAS,CAACC,MAAM,SAAQ,SACrB,sBAAKtG,MAAO,CAAE4F,QAAS,OAAQjZ,eAAgB,UAAW,UACtD,cAAC+a,GAAA,EAAO,CAACtb,MAAM,uBAAuBub,UAAU,MAAK,SACjD,cAAC,KAAQ,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,WAAa3H,QAAS,kBAnClG,SAACvP,GACnB,IAAM0W,EAAmBZ,EAAsBM,SAASO,MAAK,SAAAC,GAAC,OAAIA,EAAE5W,KAAOA,CAAE,IACvEmC,EAAgC,CAClCnC,GAAI0W,EAAiB1W,GACrB0R,SAAUgF,EAAiBhF,SAC3B/T,MAAO+Y,EAAiB/Y,MACxBmU,MAAO4E,EAAiB5E,MACxBC,MAAO2E,EAAiB3E,MACxB5R,YAAauW,EAAiBvW,YAC9BiR,SAAUsF,EAAiBtF,SAC3BxR,UAAW8W,EAAiB9W,WAEhCiW,EAAO1T,EACX,CAsB8HgV,CAAc1W,EAAUT,GAAG,MAErH,cAACoX,GAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,IACxC,cAACP,GAAA,EAAO,CAACtb,MAAM,yBAAyBub,UAAU,MAAK,SACnD,cAAC,KAAU,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,OAAS3H,QAAS,kBAAMgI,MAAM,iCAAmC9W,EAAUT,GAAG,aAjB3IS,EAAUT,GAqBd,WAK3B,cAAC2U,GAAe,CACZC,MAAO4C,KAAKC,KAAK3B,EAAsB4B,eAAiB5B,EAAsB6B,UAC9E9C,aAAc,SAACtU,GAAa,OAAKkB,EAAiBlB,EAAM,MAIxE,CClEe,SAASqX,KACpB,MAA2Ctc,GAAiB,SAAAoU,GAAK,OAAIA,EAAMjP,SAAS,IAA5EqV,EAAqB,EAArBA,sBAAuB/U,EAAO,EAAPA,QACvBD,EAAkB+M,KAAlB/M,cACR,EAAkCmQ,mBAA4B,MAAK,mBAA5DxQ,EAAS,KAAEoX,EAAY,KAE9BC,qBAAU,WACNhX,EAAcgV,EAAsB6B,SAAU7B,EAAsBiC,kBAAmBhX,EAAS,WAAYkK,GAAU+M,UAE1H,GAAG,CAACjX,EAAS+U,EAAsBiC,oBAInC,OACI,qCACI,cAACvc,EAAU,CAACC,MAAM,0BAClB,cAAC+T,GAAqB,CAACC,SAAU,kBAAMoI,EAAa,CAAE7X,GAAI,EAAG0R,SAAU,GAAI/T,MAAO,GAAImU,MAAO,GAAIC,MAAO,GAAI5R,aAAa,EAAOiR,SAAU,IAAI6G,KAAQrY,UAAW,GAAI,IACrK,cAACgW,GAAmB,CAACC,OANR,SAACpV,GAA4B,OAAKoX,EAAapX,EAAW,IAOtEA,GAAa,cAACsQ,GAAkB,CAACtQ,UAAWA,EAAWuQ,UAAW,kBAAM6G,EAAa,KAAK,MAGvG,C,cCnBe,SAASK,GAAiB,GAA6D,IAA3DlT,EAAO,EAAPA,QAASgM,EAAS,EAATA,UAChD,EAAyCnD,KAAjC/H,EAAa,EAAbA,cAAeE,EAAa,EAAbA,cACvB,EAA0BiL,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KAEhBgH,EAAe,SAACC,EAAgBvF,GAAa,OAC/C,SAACtE,KACOA,GAAwB,YAAfA,EAAM1P,MACyB,QAAtC0P,EAA8B8J,KAAwD,UAAtC9J,EAA8B8J,OAI/ExF,GAAM7B,IACf,CAAE,EAEAO,EAAmBC,KAAW,CAChCxR,GAAIwR,OACCC,WACLyB,KAAM1B,OACDC,WACAE,IAAI,EAAG,sCACPC,IAAI,GAAI,yDACblU,KAAM8T,OACDC,WACAE,IAAI,EAAG,2CACPC,IAAI,EAAG,6CAGVK,EAA0B,CAC5BjS,GAAIgF,EAAQhF,GACZkT,KAAMlO,EAAQkO,KACdxV,KAAMsH,EAAQtH,KACd4a,WAAY,MAGhB,EAA0EpG,aAAQ,CAC9EC,SAAUC,aAAYb,GACtBU,kBAFIpD,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUE,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAK1DC,EAAQ,iDAAG,WAAO1N,GAAiB,2EACtB,IAAfA,EAAQhF,GAAW8F,EAAcd,GAAWgB,EAAchB,GAC1D2N,IAAkB,2CACrB,gBAHa,sCAKRA,EAAkB,WACpBxB,EAAS,MACTsB,IACAzB,GACJ,EAEA,OACI,eAACuH,GAAA,EAAe,CACZ1F,MAAM,EACNuF,OAAO,OACPtF,QAASqF,EAAa,GAAQ,GAC9BK,OAAQL,EAAa,GAAQ,GAAM,UAEnC,uBAAMzF,SAAUL,EAAaK,GAAWrD,MAAO,CAAE7S,SAAU,SAAU,UACjE,iDAAWgW,EAAS,OAAK,IAAE3T,KAAK,YAChC,eAAClD,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAASE,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UAC3F,cAACzC,GAAA,EAAU,CAACnB,QAAQ,KAAKvS,UAAW,IAAKC,GAAI,CAAEkW,QAAS,OAAQC,WAAY,KAAM,SAAC,iBAGnF,cAACtX,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,OACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,OAAOtP,KAAK,OACpCuP,OAAO,SAASC,WAAS,EACzB6C,MAAOmC,QAAQf,EAAOY,MAAOI,WAAuB,QAAb,EAAEhB,EAAOY,YAAI,aAAX,EAAa/T,UACxD,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,OACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,OAAOtP,KAAK,OACpCuP,OAAO,SAASC,WAAS,EACzB6C,MAAOmC,QAAQf,EAAO5U,MAAO4V,WAAuB,QAAb,EAAEhB,EAAO5U,YAAI,aAAX,EAAayB,UACxD,SAKlB,eAACxD,EAAA,EAAI,CAACC,WAAS,EAACI,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UACxE,cAACrX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWG,QAASoD,EAAgB,SAAC,aAIzD,cAAChX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SAAC,iBAMpDqS,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,MAG5E,CCvGe,SAASuH,GAAkB,GAAkD,IAAhD5C,EAAM,EAANA,OACxC,EAAuCva,GAAiB,SAAAoU,GAAK,OAAIA,EAAM1K,OAAO,IAAtE0T,EAAmB,EAAnBA,oBAAqBxH,EAAK,EAALA,MAC7B,EAA0CrD,KAAlC3H,EAAa,EAAbA,cAAeN,EAAc,EAAdA,eAYvB,OAAIsL,EAAc,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,IAGpE,qCACI,cAAC6E,GAAA,EAAc,CAAClZ,UAAWmZ,KAAOlZ,GAAI,CAAEsR,OAAQ,UAAW,SACvD,eAAC6H,GAAA,EAAK,CAACnZ,GAAI,CAAEoZ,SAAU,KAAO,aAAW,eAAc,UACnD,cAACf,GAAW,CAACC,OAAQ,CAAC,OAAQ,OAAQ,UAAW,aACjD,cAACe,GAAA,EAAS,UACLuC,EAAoBtC,SAASb,KAAI,SAACvQ,GAAO,OACtC,eAACsQ,GAAA,EAAQ,CAELxY,GAAI,CAAE,mCAAoC,CAAEuZ,OAAQ,IAAM,UAE1D,cAACX,GAAA,EAAS,CAAC7Y,UAAU,KAAKyZ,MAAM,MAAK,SAAEtR,EAAQkO,OAC/C,cAACwC,GAAA,EAAS,CAACC,MAAM,OAAM,SAAE3Q,EAAQtH,OACjC,cAACgY,GAAA,EAAS,CAACC,MAAM,OAAM,SACnB3Q,EAAQsT,YACRtT,EAAQsT,WAAW/C,KAAI,SAAA3N,GACnB,OAAO,4BAAqB,+BAAOA,EAAOsL,KAAO,KAAOtL,EAAO+Q,WAAhD/Q,EAAOsL,KAC1B,MAEJ,cAACwC,GAAA,EAAS,CAACC,MAAM,SAAQ,SACrB,sBAAKtG,MAAO,CAAE4F,QAAS,OAAQjZ,eAAgB,UAAW,UACtD,cAAC+a,GAAA,EAAO,CAACtb,MAAM,eAAeub,UAAU,MAAK,SACzC,cAAC,KAAQ,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,WAAa3H,QAAS,kBAlClG,SAACvP,GACnB,IAAM4Y,EAAiBF,EAAoBtC,SAASO,MAAK,SAAAC,GAAC,OAAIA,EAAE5W,KAAOA,CAAE,IACnE6Y,EAA4B,CAC9B7Y,GAAI4Y,EAAe5Y,GACnBkT,KAAM0F,EAAe1F,KACrBxV,KAAMkb,EAAelb,MAEzBmY,EAAOgD,EACX,CA0B8H1B,CAAcnS,EAAQhF,GAAG,MAEnH,cAACoX,GAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,IACxC,cAACP,GAAA,EAAO,CAACtb,MAAM,iBAAiBub,UAAU,MAAK,SAC3C,cAAC,KAAU,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,OAAS3H,QAAS,kBAAMrJ,EAAclB,EAAQhF,GAAG,aAlBpHgF,EAAQhF,GAsBN,WAK3B,cAAC2U,GAAe,CACZC,MAAO4C,KAAKC,KAAKiB,EAAoBhB,eAAiBgB,EAAoBf,UAC1E9C,aAAc,SAACtU,GAAa,OAAKqF,EAAerF,EAAM,MAItE,CChEe,SAASuY,GAAoB,GAAsD,IAApDrJ,EAAQ,EAARA,SAE1C,OACI,cAAC9T,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,MAAME,eAAgB,WAAYD,WAAY,SAAS,SACzF,cAACiT,GAAe,CAACC,SAAUQ,EAAS,SAAC,mBAGjD,CCFe,SAASsJ,KACpB,IAAQL,EAAwBpd,GAAiB,SAAAoU,GAAK,OAAIA,EAAM1K,OAAO,IAA/D0T,oBACAtT,EAAiByI,KAAjBzI,aACR,EAA8B6L,mBAA0B,MAAK,mBAAtDjM,EAAO,KAAEgU,EAAU,KAE1BlB,qBAAU,WACN1S,EAAa,EAAGsT,EAAoBX,kBAAmB,OAAQ9M,GAAU+M,UAE7E,GAAG,CAACU,EAAoBX,oBAIxB,OACI,qCACI,cAACvc,EAAU,CAACC,MAAM,yBAClB,cAACqd,GAAmB,CAACrJ,SAAU,kBAAMuJ,EAAW,CAAEhZ,GAAI,EAAGkT,KAAM,GAAIxV,KAAM,IAAK,IAC9E,cAAC+a,GAAiB,CAAC5C,OANN,SAAC7Q,GAAwB,OAAKgU,EAAWhU,EAAS,IAO9DA,GAAW,cAACkT,GAAgB,CAAClT,QAASA,EAASgM,UAAW,kBAAMgI,EAAW,KAAK,MAG7F,CClBe,SAASC,GAAkB,GAAkD,IAAhDpD,EAAM,EAANA,OACxC,EAAuCva,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3M,OAAO,IAAtEmW,EAAmB,EAAnBA,oBAAqBhI,EAAK,EAALA,MAC7B,EAAuErD,KAA/DlJ,EAAa,EAAbA,cAAeP,EAA2B,EAA3BA,4BAA6BN,EAAc,EAAdA,eAqBpD,OAAIoN,EAAc,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,IAGpE,qCACI,cAAC6E,GAAA,EAAc,CAAClZ,UAAWmZ,KAAOlZ,GAAI,CAAEsR,OAAQ,UAAW,SACvD,eAAC6H,GAAA,EAAK,CAACnZ,GAAI,CAAEoZ,SAAU,KAAO,aAAW,eAAc,UACnD,cAACf,GAAW,CAACC,OAAQ,CAAC,QAAS,cAAe,YAAa,aAAc,aACzE,cAACe,GAAA,EAAS,UACL+C,EAAoB9C,SAASb,KAAI,SAACxS,GAAO,OACtC,eAACuS,GAAA,EAAQ,CAELxY,GAAI,CAAE,mCAAoC,CAAEuZ,OAAQ,IAAM,UAE1D,cAACX,GAAA,EAAS,CAAC7Y,UAAU,KAAKyZ,MAAM,MAAK,SAChCvT,EAAQtH,QAEb,cAACia,GAAA,EAAS,CAACC,MAAM,OAAM,SAAE5S,EAAQoW,YAAY5C,MAAM,EAAG,IAAIC,OAAO,SACjE,cAACd,GAAA,EAAS,CAACC,MAAM,OAAM,SAAE5S,EAAQqW,SAAS7C,MAAM,EAAG,IAAIC,OAAO,SAC9D,cAACd,GAAA,EAAS,CAACC,MAAM,OAAM,SACnB,cAACc,GAAA,EAAM,CAAC1H,QAAShM,EAAQF,SAAU0M,QAAS,kBA1BnD,SAACvP,GACtB,IAAMqZ,EAAiBH,EAAoB9C,SAASO,MAAK,SAAA2C,GAAC,OAAIA,EAAEtZ,KAAOA,CAAE,IACnEqE,EAAgC,eAAQgV,GAC9ChV,EAAgBxB,UAAYwW,EAAexW,SAC3CuB,EAA4BpE,EAAIqE,EACpC,CAqBkFkV,CAAiBxW,EAAQ/C,GAAG,MAElF,cAAC0V,GAAA,EAAS,CAACC,MAAM,SAAQ,SACrB,sBAAKtG,MAAO,CAAE4F,QAAS,OAAQjZ,eAAgB,UAAW,UACtD,cAAC+a,GAAA,EAAO,CAACtb,MAAM,uBAAuBub,UAAU,MAAK,SACjD,cAAC,KAAQ,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,WAAa3H,QAAS,kBA3ClG,SAACvP,GACnB,IAAMqZ,EAAiBH,EAAoB9C,SAASO,MAAK,SAAA2C,GAAC,OAAIA,EAAEtZ,KAAOA,CAAE,IACnEqE,EAAmC,CACrCrE,GAAIqZ,EAAerZ,GACnBvE,MAAO4d,EAAe5d,MACtB0d,YAAaE,EAAeF,YAC5BC,SAAUC,EAAeD,SACzBvW,SAAUwW,EAAexW,UAE7BgT,EAAOxR,EACX,CAiC8H8S,CAAcpU,EAAQ/C,GAAG,MAEnH,cAACoX,GAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,IACxC,cAACP,GAAA,EAAO,CAACtb,MAAM,yBAAyBub,UAAU,MAAK,SACnD,cAAC,KAAU,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,OAAS3H,QAAS,kBAAM5K,EAAc5B,EAAQ/C,GAAG,aAlBpH+C,EAAQ/C,GAsBN,WAK3B,cAAC2U,GAAe,CACZC,MAAO4C,KAAKC,KAAKyB,EAAoBxB,eAAiBwB,EAAoBvB,UAC1E9C,aAAc,SAACtU,GAAa,OAAKuD,EAAevD,EAAM,MAItE,CCnEe,SAASiZ,GAAiB,GAA6D,IAA3DzW,EAAO,EAAPA,QAASiO,EAAS,EAATA,UAChD,EAAyCnD,KAAjCtJ,EAAa,EAAbA,cAAeE,EAAa,EAAbA,cACvB,EAA0BwM,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KAEhBgH,EAAe,SAACC,EAAgBvF,GAAa,OAC/C,SAACtE,KAEOA,GACe,YAAfA,EAAM1P,MACkC,QAAtC0P,EAA8B8J,KACW,UAAtC9J,EAA8B8J,OAIlCxF,GAAM7B,IACf,CAAE,EAEAO,EAAmBC,KAAW,CAChC/V,MAAO+V,OACFC,WACAE,IAAI,EAAG,wCACPC,IAAI,IAAK,2DACduH,YAAa3H,OACRC,WACAE,IAAI,EAAG,8CACPC,IAAI,KAAM,kEACfwH,SAAU5H,OACLC,WACAE,IAAI,EAAG,2CACPC,IAAI,KAAM,+DACf/O,SAAU2O,OACLC,WACLzR,GAAIwR,OACCC,aAGHQ,EAAyG,CAC3GxW,MAAOsH,EAAQtH,MACf0d,YAAapW,EAAQoW,YACrBC,SAAUrW,EAAQqW,SAClBvW,SAAUE,EAAQF,SAClB7C,GAAI+C,EAAQ/C,IAGhB,EAA0EkS,aAAQ,CAC9EC,SAAUC,aAAYb,GACtBU,kBAFIpD,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUE,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAK1DC,EAAQ,iDAAG,WAAO3P,GAAwB,2EAC7B,IAAfA,EAAQ/C,GAAWuE,EAAcxB,GAAW0B,EAAc1B,GAC1D4P,IAAkB,2CACrB,gBAHa,sCAKRA,EAAkB,WACpBxB,EAAS,MACTsB,IACAzB,GACJ,EAEA,OACI,eAACuH,GAAA,EAAe,CACZ1F,MAAM,EACNuF,OAAO,OACPtF,QAASqF,EAAa,GAAQ,GAC9BK,OAAQL,EAAa,GAAQ,GAAM,UAEnC,uBAAMzF,SAAUL,EAAaK,GAAWrD,MAAO,CAAE7S,SAAU,SAAU,UACjE,iDAAWgW,EAAS,OAAK,IAAE3T,KAAK,YAChC,eAAClD,EAAA,EAAI,CAACC,WAAS,EAACI,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UACxE,cAACzC,GAAA,EAAU,CAACnB,QAAQ,KAAKvS,UAAW,IAAKC,GAAI,CAAEkW,QAAS,OAAQC,WAAY,KAAM,SAAC,yBAGnF,cAACtX,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,QACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BACFkF,GAAK,IACTjF,MAAM,QACNtP,KAAK,OACLuP,OAAO,SACPC,WAAS,EACT6C,MAAOmC,QAAQf,EAAO7W,OACtB6X,WAAwB,QAAd,EAAEhB,EAAO7W,aAAK,aAAZ,EAAc0D,UAC5B,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,cACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BACFkF,GAAK,IACTjF,MAAM,cACNE,WAAS,EACTD,OAAO,SACPwF,WAAS,EACTC,KAAM,EACNzE,QAAQ,WACRC,MAAO,CAAEyE,OAAQ,QACjB5C,MAAOmC,QAAQf,EAAO6G,aACtB7F,WAA8B,QAApB,EAAEhB,EAAO6G,mBAAW,aAAlB,EAAoBha,UAClC,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,WACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BACFkF,GAAK,IACTjF,MAAM,YACNtP,KAAK,OACLuP,OAAO,SACPC,WAAS,EACT6C,MAAOmC,QAAQf,EAAO8G,UACtB9F,WAA2B,QAAjB,EAAEhB,EAAO8G,gBAAQ,aAAf,EAAiBja,UAC/B,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC2S,GAAA,EAAgB,CACbC,QACI,cAAC,KAAU,CACPqE,KAAK,WACLrE,QAASA,EACTsE,OAAQ,gBAAUY,EAAK,EAAZX,MAAK,OACZ,cAACtE,GAAA,EAAQ,2BACDiF,GAAK,IACThF,QAASgF,EAAMxT,MACf+N,SAAU,SAAC0F,GAAC,OAAKD,EAAMzF,SAAS0F,EAAExF,OAAOO,QAAQ,IACnD,IAIdZ,MAAM,oBAKlB,eAACxS,EAAA,EAAI,CAACC,WAAS,EAACI,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UACxE,cAACrX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWG,QAASoD,EAAgB,SAAC,aAIzD,cAAChX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SAAC,iBAMpDqS,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,MAG5E,CCtKe,SAASuI,GAAoB,GAAsD,IAApDhK,EAAQ,EAARA,SAClC1O,EAAYzF,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3M,OAAO,IAAnDhC,QACAiD,EAA2B6J,KAA3B7J,uBAMR,OACI,eAACrI,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,MAAME,eAAgB,gBAAiBD,WAAY,SAAS,UAC9F,cAAC0S,GAAc,CAACN,MAAM,mBAAmBO,QANb,SAACK,GACvB/K,EAAV+K,EAAiCnO,GAAqB+O,OAAiC/O,GAAqBgP,IAChH,EAIuFjB,UAAW5N,EAAQK,SAAWR,GAAqB+O,SAClI,cAACX,GAAe,CAACC,SAAUQ,EAAS,SAAC,mBAGjD,CCZe,SAASiK,KACpB,MAAyCpe,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3M,OAAO,IAAxEmW,EAAmB,EAAnBA,oBAAqBnY,EAAO,EAAPA,QACrBqC,EAAgByK,KAAhBzK,YACR,EAA8B6N,mBAAiC,MAAK,mBAA7DlO,EAAO,KAAE4W,EAAU,KAE1B7B,qBAAU,WACN1U,EAAY,EAAG8V,EAAoBnB,kBAAmBhX,EAAQK,OAAQ6J,GAAU+M,UAEpF,GAAG,CAACkB,EAAoBnB,kBAAmBhX,IAI3C,OACI,qCACI,cAACvF,EAAU,CAACC,MAAM,wBAClB,cAACge,GAAmB,CAAChK,SAAU,kBAAMkK,EAAW,CAAE3Z,GAAI,EAAGvE,MAAO,GAAI0d,YAAa,GAAIC,SAAU,GAAIvW,UAAU,GAAO,IACpH,cAACoW,GAAiB,CAACpD,OANN,SAAC9S,GAA+B,OAAK4W,EAAW5W,EAAS,IAOrEA,GAAW,cAACyW,GAAgB,CAACzW,QAASA,EAASiO,UAAW,kBAAM2I,EAAW,KAAK,MAG7F,C,sDClBe,SAASC,GAAgB,GAA2D,IAAD,EAAxDhS,EAAM,EAANA,OAAQoJ,EAAS,EAATA,UACtC0H,EAAwBpd,GAAiB,SAAAoU,GAAK,OAAIA,EAAM1K,OAAO,IAA/D0T,oBACR,EAAuC7K,KAA/BnF,EAAY,EAAZA,aAAcE,EAAY,EAAZA,aACtB,EAA0BqI,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KAEhB0I,EAAYnB,EAAoBtC,SAEhC+B,EAAe,SAACC,EAAgBvF,GAAa,OAC/C,SAACtE,KACOA,GAAwB,YAAfA,EAAM1P,MACyB,QAAtC0P,EAA8B8J,KAAwD,UAAtC9J,EAA8B8J,OAI/ExF,GAAM7B,IACf,CAAE,EAEAO,EAAmBC,KAAW,CAChCxR,GAAIwR,OACCC,WACLyB,KAAM1B,OACDC,WACAE,IAAI,EAAG,sCACPC,IAAI,IAAK,0DACduH,YAAa3H,OACRC,WACAE,IAAI,EAAG,8CACPC,IAAI,IAAM,wDACf+G,QAASnH,OACJC,WACAE,IAAI,EAAG,0CACPC,IAAI,IAAM,8DACfkI,SAAUtI,OACLC,WACAE,IAAI,EAAG,uCACPC,IAAI,IAAK,mDACdmI,UAAWvI,OACNC,WACAE,IAAI,EAAG,wCACPC,IAAI,IAAK,oDACdoI,UAAWxI,OACNC,aAGHQ,EAAyB,CAC3BjS,GAAI4H,EAAO5H,GACXkT,KAAMtL,EAAOsL,KACbiG,YAAavR,EAAOuR,YACpBR,QAAS/Q,EAAO+Q,QAChBmB,SAAUlS,EAAOkS,SACjBC,UAAWnS,EAAOmS,UAClBC,UAAWpS,EAAOoS,WAGtB,EAA0E9H,aAAQ,CAC9EC,SAAUC,aAAYb,GACtBU,kBAFIpD,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUE,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAK1DC,EAAQ,iDAAG,WAAO9K,GAAe,2EACrB,IAAdA,EAAO5H,GAAW0I,EAAad,GAAUgB,EAAahB,GACtD+K,IAAkB,2CACrB,gBAHa,sCAKRA,EAAkB,WACpBxB,EAAS,MACTsB,IACAzB,GACJ,EAEA,OACI,eAACuH,GAAA,EAAe,CACZ1F,MAAM,EACNuF,OAAO,OACPtF,QAASqF,EAAa,GAAQ,GAC9BK,OAAQL,EAAa,GAAQ,GAAM,UAEnC,uBAAMzF,SAAUL,EAAaK,GAAWrD,MAAO,CAAE7S,SAAU,SAAU,UACjE,iDAAWgW,EAAS,OAAK,IAAE3T,KAAK,YAChC,eAAClD,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAASE,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UAC3F,cAACzC,GAAA,EAAU,CAACnB,QAAQ,KAAKvS,UAAW,IAAKC,GAAI,CAAEkW,QAAS,OAAQC,WAAY,KAAM,SAAC,gBAGnF,cAACtX,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,OACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,OAAOtP,KAAK,OACpCuP,OAAO,SAASC,WAAS,EACzB6C,MAAOmC,QAAQf,EAAOY,MAAOI,WAAuB,QAAb,EAAEhB,EAAOY,YAAI,aAAX,EAAa/T,UACxD,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,cACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,cACzBE,WAAS,EAACD,OAAO,SAASwF,WAAS,EAACC,KAAM,EAAGzE,QAAQ,WAAWC,MAAO,CAAEyE,OAAQ,QACjF5C,MAAOmC,QAAQf,EAAO6G,aAAc7F,WAA8B,QAApB,EAAEhB,EAAO6G,mBAAW,aAAlB,EAAoBha,UACtE,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,UACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,UAAUtP,KAAK,OACvCuP,OAAO,SAASC,WAAS,EACzB6C,MAAOmC,QAAQf,EAAOqG,SAAUrF,WAA0B,QAAhB,EAAEhB,EAAOqG,eAAO,aAAd,EAAgBxZ,UAC9D,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,WACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,WAAWtP,KAAK,SACxCuP,OAAO,SAASC,WAAS,EACzB6C,MAAOmC,QAAQf,EAAOwH,UAAWxG,WAA2B,QAAjB,EAAEhB,EAAOwH,gBAAQ,aAAf,EAAiB3a,UAChE,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,YACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,YAAYtP,KAAK,SACzCuP,OAAO,SAASC,WAAS,EACzB6C,MAAOmC,QAAQf,EAAOyH,WAAYzG,WAA4B,QAAlB,EAAEhB,EAAOyH,iBAAS,aAAhB,EAAkB5a,UAClE,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,eAACge,GAAA,EAAW,CAACnd,GAAI,CAAEC,MAAO,KAAM,UAC5B,cAACmd,GAAA,EAAU,CAACla,GAAG,cAAa,SAAC,YAC7B,cAAC,KAAU,CACPkT,KAAK,YACLiH,aAAcN,EAAU,GAAG7Z,GAC3B6O,QAASA,EACTsE,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACZ,cAACgH,GAAA,EAAM,yBAACjM,MAAM,WAAciF,GAAK,aAC5ByG,EAAUtE,KAAI,SAACvQ,GAAO,OAAK,cAACqV,GAAA,EAAQ,CAAkB9Z,MAAOyE,EAAQhF,GAAG,SAAEgF,EAAQkO,MAAxClO,EAAQhF,GAAgD,MAC9F,IAGjB,cAACsa,GAAA,EAAc,CAACpJ,OAAO,EAAK,SAAkB,QAAlB,EAAEoB,EAAO0H,iBAAS,aAAhB,EAAkB7a,kBAI5D,eAACxD,EAAA,EAAI,CAACC,WAAS,EAACI,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UACxE,cAACrX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWG,QAASoD,EAAgB,SAAC,aAIzD,cAAChX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SAAC,iBAMpDqS,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,MAG5E,CChLe,SAASqJ,GAAiB,GAAiD,IAA/C1E,EAAM,EAANA,OACvC,EAAsCva,GAAiB,SAAAoU,GAAK,OAAIA,EAAM9H,MAAM,IAApE4S,EAAkB,EAAlBA,mBAAoBtJ,EAAK,EAALA,MAC5B,EAAwCrD,KAAhC/E,EAAY,EAAZA,aAAcN,EAAa,EAAbA,cAgBtB,OAAI0I,EAAc,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,IAGpE,qCACI,cAAC6E,GAAA,EAAc,CAAClZ,UAAWmZ,KAAOlZ,GAAI,CAAEsR,OAAQ,UAAW,SACvD,eAAC6H,GAAA,EAAK,CAACnZ,GAAI,CAAEoZ,SAAU,KAAO,aAAW,eAAc,UACnD,cAACf,GAAW,CAACC,OAAQ,CAAC,OAAQ,cAAe,UAAW,UAAW,YAAa,aAChF,cAACe,GAAA,EAAS,UACLqE,EAAmBpE,SAASb,KAAI,SAAC3N,GAAM,eACpC,eAAC0N,GAAA,EAAQ,CAELxY,GAAI,CAAE,mCAAoC,CAAEuZ,OAAQ,IAAM,UAE1D,cAACX,GAAA,EAAS,CAAC7Y,UAAU,KAAKyZ,MAAM,MAAK,SAAE1O,EAAOsL,OAC9C,cAACwC,GAAA,EAAS,CAACC,MAAM,OAAM,SAAE/N,EAAOuR,YAAY5C,MAAM,EAAG,IAAIC,OAAO,SAChE,cAACd,GAAA,EAAS,CAACC,MAAM,OAAM,SAAE/N,EAAO+Q,QAAQpC,MAAM,EAAG,IAAIC,OAAO,SAC5D,cAACd,GAAA,EAAS,CAACC,MAAM,SAAQ,SAAmB,QAAnB,EAAE/N,EAAO6S,kBAAU,aAAjB,EAAmB/c,OAC9C,cAACgY,GAAA,EAAS,CAACC,MAAM,SAAQ,SAAoB,QAApB,EAAE/N,EAAO8S,mBAAW,aAAlB,EAAoB7K,SAC/C,cAAC6F,GAAA,EAAS,CAACC,MAAM,SAAQ,SACrB,sBAAKtG,MAAO,CAAE4F,QAAS,OAAQjZ,eAAgB,UAAW,UACtD,cAAC+a,GAAA,EAAO,CAACtb,MAAM,cAAcub,UAAU,MAAK,SACxC,cAAC,KAAQ,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,WAAa3H,QAAS,kBAnClG,SAACvP,GACnB,IAAM2a,EAAgBH,EAAmBpE,SAASO,MAAK,SAAAC,GAAC,OAAIA,EAAE5W,KAAOA,CAAE,IACjE4a,EAA0B,CAC5B5a,GAAI2a,EAAc3a,GAClBkT,KAAMyH,EAAczH,KACpBiG,YAAawB,EAAcxB,YAC3BR,QAASgC,EAAchC,QACvBmB,SAAUa,EAAcb,SACxBC,UAAWY,EAAcZ,UACzBC,UAAWW,EAAcX,WAE7BnE,EAAO+E,EACX,CAuB8HzD,CAAcvP,EAAO5H,GAAG,MAElH,cAACoX,GAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,IACxC,cAACP,GAAA,EAAO,CAACtb,MAAM,gBAAgBub,UAAU,MAAK,SAC1C,cAAC,KAAU,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,OAAS3H,QAAS,kBAAMzG,EAAalB,EAAO5H,GAAG,aAflH4H,EAAO5H,GAmBL,WAK3B,cAAC2U,GAAe,CACZC,MAAO4C,KAAKC,KAAK+C,EAAmB9C,eAAiB8C,EAAmB7C,UACxE9C,aAAc,SAACtU,GAAa,OAAKiI,EAAcjI,EAAM,MAIrE,CClEe,SAASsa,GAAmB,GAAqD,IAAnDpL,EAAQ,EAARA,SAEzC,OACI,cAAC9T,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,MAAME,eAAgB,WAAYD,WAAY,SAAS,SACzF,cAACiT,GAAe,CAACC,SAAUQ,EAAS,SAAC,kBAGjD,CCDe,SAASqL,KACpB,IAAQN,EAAuBlf,GAAiB,SAAAoU,GAAK,OAAIA,EAAM9H,MAAM,IAA7D4S,mBACA9B,EAAwBpd,GAAiB,SAAAoU,GAAK,OAAIA,EAAM1K,OAAO,IAA/D0T,oBACR,EAAqC7K,KAA7BzI,EAAY,EAAZA,aAAc4C,EAAU,EAAVA,WACtB,EAA4BiJ,mBAAyB,MAAK,mBAAnDrJ,EAAM,KAAEmT,EAAS,KAExBjD,qBAAU,WACN1S,EAAa,IAAKsT,EAAoBX,kBAAmB,OAAQ9M,GAAU+M,UAE/E,GAAG,IAEHF,qBAAU,WACN9P,EAAW,EAAGwS,EAAmBzC,kBAAmB,OAAQ9M,GAAU+M,UAE1E,GAAG,CAACwC,EAAmBzC,oBAIvB,OACI,qCACI,cAACvc,EAAU,CAACC,MAAM,uBAKlB,cAACof,GAAkB,CAACpL,SAAU,kBAAMsL,EAAU,CAAE/a,GAAI,EAAGkT,KAAM,GAAIiG,YAAa,GAAIR,QAAS,GAAImB,SAAU,EAAGC,UAAW,EAAGC,UAAWtB,EAAoBtC,SAAS,GAAGpW,IAAK,IAC1K,cAACua,GAAgB,CAAC1E,OAVL,SAACjO,GAAsB,OAAKmT,EAAUnT,EAAQ,IAW1DA,GAAU,cAACgS,GAAe,CAAChS,OAAQA,EAAQoJ,UAAW,kBAAM+J,EAAU,KAAK,MAGxF,CC1Be,SAASC,GAAkB,GAA+D,IAAD,EAA5D1U,EAAQ,EAARA,SAAU0K,EAAS,EAATA,UAC1CiK,EAAY3f,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3E,OAAO,IAAnDkQ,QACR,EAA2CpN,KAAnC3G,EAAc,EAAdA,eAAgBE,EAAc,EAAdA,eACxB,EAA0B6J,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KAEhBgH,EAAe,SAACC,EAAgBvF,GAAa,OAC/C,SAACtE,KACOA,GAAwB,YAAfA,EAAM1P,MACyB,QAAtC0P,EAA8B8J,KAAwD,UAAtC9J,EAA8B8J,OAI/ExF,GAAM7B,IACf,CAAE,EAEAO,EAAmBC,KAAW,CAChCxR,GAAIwR,OACCC,WACLC,SAAUF,OACLC,WACAE,IAAI,EAAG,2CACPC,IAAI,GAAI,8DACbjU,MAAO6T,OACFI,IAAI,GAAI,0DACRC,QAAQ9B,GAAe,gFAC5BS,SAAUgB,OACLC,WACAE,IAAI,EAAG,0CACPC,IAAI,GAAI,6DACbuH,YAAa3H,OACRC,WACAE,IAAI,EAAG,8CACPC,IAAI,KAAM,kEACfsJ,UAAW1J,OACNC,WACAE,IAAI,EAAG,2CACPC,IAAI,KAAM,+DACfrH,SAAUiH,OACLC,SAAS,sBAGZQ,EAA2B,CAC7BjS,GAAIsG,EAAStG,GACb0R,SAAUpL,EAASoL,SACnB/T,MAAO2I,EAAS3I,MAChB6S,SAAUlK,EAASkK,SACnB2I,YAAa7S,EAAS6S,YACtB+B,UAAW5U,EAAS4U,UACpB3Q,SAAUjE,EAASiE,UAGvB,EAA0E2H,aAAQ,CAC9EC,SAAUC,aAAYb,GACtBU,kBAFIpD,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUE,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAK1DC,EAAQ,iDAAG,WAAOpM,GAAmB,2EACvB,IAAhBA,EAAStG,GAAWkH,EAAeZ,GAAYc,EAAed,GAC9DqM,IAAkB,2CACrB,gBAHa,sCAKRA,EAAkB,WACpBxB,EAAS,MACTsB,IACAzB,GACJ,EAEA,OACI,eAACuH,GAAA,EAAe,CACZ1F,MAAM,EACNuF,OAAO,OACPtF,QAASqF,EAAa,GAAQ,GAC9BK,OAAQL,EAAa,GAAQ,GAAM,UAEnC,uBAAMzF,SAAUL,EAAaK,GAAWrD,MAAO,CAAE7S,SAAU,SAAU,UACjE,iDAAWgW,EAAS,OAAK,IAAE3T,KAAK,YAChC,eAAClD,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAASE,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UAC3F,cAACzC,GAAA,EAAU,CAACnB,QAAQ,KAAKvS,UAAW,IAAKC,GAAI,CAAEkW,QAAS,OAAQC,WAAY,KAAM,SAAC,kBAGnF,cAACtX,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,WACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,YAAYtP,KAAK,OACzCuP,OAAO,SAASC,WAAS,EACzB6C,MAAOmC,QAAQf,EAAOZ,UAAW4B,WAA2B,QAAjB,EAAEhB,EAAOZ,gBAAQ,aAAf,EAAiBvS,UAChE,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,QACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,QAAQtP,KAAK,QACrCuP,OAAO,SAASC,WAAS,EACzBkF,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAe,SAIhCzC,MAAOmC,QAAQf,EAAO3U,OAAQ2V,WAAwB,QAAd,EAAEhB,EAAO3U,aAAK,aAAZ,EAAcwB,UAC1D,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,WACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,WAAWtP,KAAK,OACxCuP,OAAO,SAASC,WAAS,EACzB6C,MAAOmC,QAAQf,EAAO9B,UAAW8C,WAA2B,QAAjB,EAAEhB,EAAO9B,gBAAQ,aAAf,EAAiBrR,UAChE,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,cACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,cACzBE,WAAS,EAACD,OAAO,SAASwF,WAAS,EAACC,KAAM,EAAGzE,QAAQ,WAAWC,MAAO,CAAEyE,OAAQ,QACjF5C,MAAOmC,QAAQf,EAAO6G,aAAc7F,WAA8B,QAApB,EAAEhB,EAAO6G,mBAAW,aAAlB,EAAoBha,UACtE,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,YACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,aAAatP,KAAK,OAC1CuP,OAAO,SAASC,WAAS,EACzB6C,MAAOmC,QAAQf,EAAO4I,WAAY5H,WAA4B,QAAlB,EAAEhB,EAAO4I,iBAAS,aAAhB,EAAkB/b,UAClE,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,eAACge,GAAA,EAAW,CAACnd,GAAI,CAAEC,MAAO,KAAM,UAC5B,cAACmd,GAAA,EAAU,CAACla,GAAG,cAAa,SAAC,WAC7B,cAAC,KAAU,CACPkT,KAAK,WACLiH,aAAcc,EAAQ,GAAGjb,GACzB6O,QAASA,EACTsE,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACZ,cAACgH,GAAA,EAAM,yBAACjM,MAAM,UAAaiF,GAAK,aAC3B6H,EAAQ1E,MAAM,GAAGhB,KAAI,SAAC3N,GAAM,OAAK,cAACyS,GAAA,EAAQ,CAAiB9Z,MAAOqH,EAAO5H,GAAG,SAAE4H,EAAOsL,MAArCtL,EAAO5H,GAA8C,MACjG,IAGjB,cAACsa,GAAA,EAAc,CAACpJ,OAAO,EAAK,SAAiB,QAAjB,EAAEoB,EAAO/H,gBAAQ,aAAf,EAAiBpL,kBAI3D,eAACxD,EAAA,EAAI,CAACC,WAAS,EAACI,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UACxE,cAACrX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWG,QAASoD,EAAgB,SAAC,aAIzD,cAAChX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SAAC,iBAMpDqS,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,MAG5E,CCvLe,SAASiK,GAAmB,GAAmD,IAAjDtF,EAAM,EAANA,OACzC,EAAwCva,GAAiB,SAAAoU,GAAK,OAAIA,EAAMpJ,QAAQ,IAAxE8U,EAAoB,EAApBA,qBAAsBlK,EAAK,EAALA,MAC9B,EAA4CrD,KAApCvG,EAAc,EAAdA,eAAgBN,EAAe,EAAfA,gBAgBxB,OAAIkK,EAAc,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,IAGpE,qCACI,cAAC6E,GAAA,EAAc,CAAClZ,UAAWmZ,KAAOlZ,GAAI,CAAEsR,OAAQ,UAAW,SACvD,eAAC6H,GAAA,EAAK,CAACnZ,GAAI,CAAEoZ,SAAU,KAAO,aAAW,eAAc,UACnD,cAACf,GAAW,CAACC,OAAQ,CAAC,YAAa,QAAS,WAAY,cAAe,aAAc,SAAU,aAC/F,cAACe,GAAA,EAAS,UACLiF,EAAqBhF,SAASb,KAAI,SAACjP,GAAQ,OACxC,eAACgP,GAAA,EAAQ,CAELxY,GAAI,CAAE,mCAAoC,CAAEuZ,OAAQ,IAAM,UAE1D,cAACX,GAAA,EAAS,CAAC7Y,UAAU,KAAKyZ,MAAM,MAAK,SAAEhQ,EAASoL,WAChD,cAACgE,GAAA,EAAS,CAACC,MAAM,OAAM,SAAErP,EAAS3I,QAClC,cAAC+X,GAAA,EAAS,CAACC,MAAM,OAAM,SAAErP,EAASkK,WAClC,cAACkF,GAAA,EAAS,CAACC,MAAM,OAAM,SAAErP,EAAS6S,YAAY5C,MAAM,EAAG,IAAIC,OAAO,SAClE,cAACd,GAAA,EAAS,CAACC,MAAM,OAAM,SAAErP,EAAS4U,UAAU3E,MAAM,EAAG,IAAIC,OAAO,SAChE,cAACd,GAAA,EAAS,CAACC,MAAM,OAAM,SAAErP,EAAS+U,UAAY/U,EAAS+U,UAAUnI,KAAO,kCACxE,cAACwC,GAAA,EAAS,CAACC,MAAM,SAAQ,SACrB,sBAAKtG,MAAO,CAAE4F,QAAS,OAAQjZ,eAAgB,UAAW,UACtD,cAAC+a,GAAA,EAAO,CAACtb,MAAM,gBAAgBub,UAAU,MAAK,SAC1C,cAAC,KAAQ,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,WAAa3H,QAAS,kBApClG,SAACvP,GACnB,IAAMsb,EAAkBF,EAAqBhF,SAASO,MAAK,SAAA3C,GAAC,OAAIA,EAAEhU,KAAOA,CAAE,IACrEub,EAA8B,CAChCvb,GAAIsb,EAAgBtb,GACpB0R,SAAU4J,EAAgB5J,SAC1B/T,MAAO2d,EAAgB3d,MACvB6S,SAAU8K,EAAgB9K,SAC1B2I,YAAamC,EAAgBnC,YAC7B+B,UAAWI,EAAgBJ,UAC3B3Q,SAAU+Q,EAAgB/Q,UAE9BsL,EAAO0F,EACX,CAwB8HpE,CAAc7Q,EAAStG,GAAG,MAEpH,cAACoX,GAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,IACxC,cAACP,GAAA,EAAO,CAACtb,MAAM,kBAAkBub,UAAU,MAAK,SAC5C,cAAC,KAAU,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,OAAS3H,QAAS,kBAAMjI,EAAehB,EAAStG,GAAG,aAhBtHsG,EAAStG,GAoBP,WAK3B,cAAC2U,GAAe,CACZC,MAAO4C,KAAKC,KAAK2D,EAAqB1D,eAAiB0D,EAAqBzD,UAC5E9C,aAAc,SAACtU,GAAa,OAAKyG,EAAgBzG,EAAM,MAIvE,CCnEe,SAASib,GAAiB,GAAmD,IAAjD/L,EAAQ,EAARA,SAEvC,OACI,cAAC9T,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,MAAME,eAAgB,WAAYD,WAAY,SAAS,SACzF,cAACiT,GAAe,CAACC,SAAUQ,EAAS,SAAC,oBAGjD,CCDe,SAASgM,KACpB,IAAQL,EAAyB9f,GAAiB,SAAAoU,GAAK,OAAIA,EAAMpJ,QAAQ,IAAjE8U,qBACAH,EAAY3f,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3E,OAAO,IAAnDkQ,QACR,EAA8CpN,KAAtCnH,EAAY,EAAZA,aAAc8E,EAAmB,EAAnBA,oBACtB,EAAgCyF,mBAA2B,MAAK,mBAAzD3K,EAAQ,KAAEoV,EAAW,KAE5B5D,qBAAU,WACNpR,EAAa,EAAG0U,EAAqBrD,kBAAmBqD,EAAqBO,eAAgB,WAAY1Q,GAAU+M,WACnHxM,GAEJ,GAAG,CAAC4P,EAAqBrD,oBAIzB,OACI,qCACI,cAACvc,EAAU,CAACC,MAAM,oBAClB,cAAC+f,GAAgB,CAAC/L,SAAU,kBAAMiM,EAAY,CAAE1b,GAAI,EAAG0R,SAAU,GAAI/T,MAAO,GAAI6S,SAAU,GAAI2I,YAAa,GAAI+B,UAAW,GAAI3Q,SAAU0Q,EAAQ,GAAGjb,IAAK,IACxJ,cAACmb,GAAkB,CAACtF,OANP,SAACvP,GAA0B,OAAKoV,EAAYpV,EAAU,IAOlEA,GAAY,cAAC0U,GAAiB,CAAC1U,SAAUA,EAAU0K,UAAW,kBAAM0K,EAAY,KAAK,MAGlG,C,cC5Be,SAASE,GAAmB,GAAqE,IAAnEzN,EAAK,EAALA,MAAO0N,EAAO,EAAPA,QAAS5N,EAAQ,EAARA,SAEzD,OACI,cAACtS,EAAA,EAAI,CAACM,MAAI,WACN,cAAC6f,GAAA,EAAY,CACTC,UAAQ,EACRC,kBAAgB,EAChBH,QAASA,EAAQtG,KAAI,SAAC0G,GAAM,OAAKA,EAAO1b,KAAK,IAC7C+N,SAAU,SAACC,EAA6B2N,GAAM,OAAKjO,EAASM,EAAO2N,EAAO,EAC1EC,YAAa,SAACC,GAAM,OAChB,cAAClO,GAAA,EAAS,yBACNpR,GAAI,CAAEC,MAAO,MACTqf,GAAM,IACVjO,MAAOA,EACPoF,WAAU,2BAAO6I,EAAO7I,YAAU,IAAE1U,KAAM,aAC5C,KAKtB,CCrBe,SAASwd,GAAkB,GAA+E,IAA7EC,EAAK,EAALA,MAAOnO,EAAK,EAALA,MAAOoO,EAAe,EAAfA,gBAAiBhc,EAAK,EAALA,MAEvE,OACI,cAAC5E,EAAA,EAAI,CAACM,MAAI,WACN,eAACge,GAAA,EAAW,CAACnd,GAAI,CAAEC,MAAO,KAAM,UAC5B,cAACmd,GAAA,EAAU,CAACla,GAAG,2BAA0B,SAAEmO,IAC3C,cAACiM,GAAA,EAAM,CACH7Z,MAAOA,EACP4N,MAAOA,EACPG,SAAU,SAACC,GAAwB,OAAKgO,EAAgBhO,EAAMC,OAAOjO,MAAM,EAAC,SAE3E+b,EAAM/G,KAAI,SAACtZ,GAAI,OAAK,cAACoe,GAAA,EAAQ,CAAe9Z,MAAOtE,EAAK+D,GAAG,SAAE/D,EAAKiX,MAA/BjX,EAAK+D,GAA0C,UAKvG,CCXe,SAASwc,GAAoB,GAAsD,IAApD/M,EAAQ,EAARA,SAC1C,EAAqCnU,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3E,OAAO,IAApEhK,EAAO,EAAPA,QAASka,EAAO,EAAPA,QAAS7F,EAAM,EAANA,OAC1B,EAA6EvH,KAArE7B,EAAc,EAAdA,eAAgBK,EAAsB,EAAtBA,uBAAwBE,EAAwB,EAAxBA,yBAahD,OACI,eAAC5Q,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,MAAME,eAAgB,gBAAiBD,WAAY,SAAS,UAC9F,cAACsgB,GAAiB,CACdC,MAAOrB,EAAQ1F,KAAI,SAACkH,GAAQ,MAAO,CAAEzc,GAAIyc,EAAEzc,GAAIkT,KAAMuJ,EAAEvJ,KAAO,IAC9D/E,MAAM,SACNoO,gBAhBY,SAAChI,GACrBvI,EAAe,GACfK,EAAuBkI,GACvBhI,EAAyB,GAC7B,EAaYhM,MAAOQ,EAAQwJ,WAEnB,cAACqR,GAAkB,CAACzN,MAAM,kBAAkB0N,QAASzG,EAAQnH,SAb1C,SAACM,EAAO2N,GAC/BlQ,EAAe,GACfO,EAAyB2P,EAC7B,IAWQ,cAAClN,GAAe,CAACC,SAAUQ,EAAS,SAAC,oBAGjD,C,yBCrBMJ,I,OAAQ,CACVmB,SAAU,WACVC,IAAK,MACLC,KAAM,MACNgM,SAAU,SACVC,UAAW,MACX1H,QAAS,QACTtE,UAAW,wBACXC,QAAS,mBACTC,UAAW,GACXC,EAAG,IAGQ,SAAS8L,GAAiB,GAA6D,IAAD,IAA1D7R,EAAO,EAAPA,QAASiG,EAAS,EAATA,UACxCiK,EAAY3f,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3E,OAAO,IAAnDkQ,QACR,EAAyCpN,KAAjCb,EAAa,EAAbA,cAAeE,EAAa,EAAbA,cACvB,EAA0B+D,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KACtB,EAAsCF,mBAASlG,EAAQoO,aAAY,mBAA5D0D,EAAW,KAAEC,EAAc,KAE5BvL,EAAmBC,KAAW,CAChCxR,GAAIwR,OACCC,WACLhW,MAAO+V,OACFC,WACAE,IAAI,EAAG,uCACPC,IAAI,GAAI,0DAGbmL,SAAUvL,OACLC,WACL5O,SAAU2O,OACLC,WACLlH,SAAUiH,OACLC,SAAS,sBAGZQ,EAA0B,CAC5BjS,GAAI+K,EAAQ/K,GACZvE,MAAOsP,EAAQtP,MACf0d,YAAapO,EAAQoO,YACrB4D,SAAUhS,EAAQgS,SAClBla,SAAUkI,EAAQlI,SAClB0H,SAAUQ,EAAQR,UAGtB,EAA0E2H,aAAQ,CAC9EC,SAAUC,aAAYb,GACtBU,kBAFIpD,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUE,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAK1DC,EAAQ,iDAAG,WAAO3H,GAAiB,2EACrCA,EAAQoO,YAAc0D,EACP,IAAf9R,EAAQ/K,GAAWgN,EAAcjC,GAAWmC,EAAcnC,GAC1D4H,IAAkB,2CACrB,gBAJa,sCAMRA,EAAkB,WACpBxB,EAAS,MACTsB,IACAzB,GACJ,EAEA,OACI,cAAC4B,GAAA,EAAK,CACFC,MAAM,EACNC,QAAS9B,EAAU,SAEnB,eAACpU,EAAA,EAAG,CAACE,GAAIuS,GAAM,UACX,uBAAMqD,SAAUL,EAAaK,GAAU,UACnC,iDAAWF,EAAS,OAAK,IAAE3T,KAAK,YAChC,iDAAW2T,EAAS,aAAW,IAAE3T,KAAK,YACtC,eAAClD,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAASE,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UAC3F,cAACzC,GAAA,EAAU,CAACnB,QAAQ,KAAKvS,UAAW,IAAKC,GAAI,CAAEkW,QAAS,OAAQC,WAAY,IAAKtW,UAAW,UAAW,SAAC,iBAGxG,cAAChB,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,QACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,QAAQtP,KAAK,OACrCuP,OAAO,SAASC,WAAS,EACzB6C,MAAOmC,QAAQf,EAAO7W,OAAQ6X,WAAwB,QAAd,EAAEhB,EAAO7W,aAAK,aAAZ,EAAc0D,UAC1D,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,eAACge,GAAA,EAAW,WACR,cAAC,KAAU,CACP/G,KAAK,cACLrE,QAASA,EACTsE,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACZ,cAAC,KAAU,2BACHA,GAAK,IACT/D,MAAO,CAAEtS,MAAO,SAChBigB,MAAM,OACNzc,MAAOsc,EACPvO,SAAUwO,IACZ,IAGV,cAACxC,GAAA,EAAc,CAACpJ,MAAOmC,QAAQf,EAAO6G,aAAa,SAAoB,QAApB,EAAE7G,EAAO6G,mBAAW,aAAlB,EAAoBha,eAGjF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC2S,GAAA,EAAgB,CACbC,QACI,cAAC,KAAU,CACPqE,KAAK,WACLrE,QAASA,EACTsE,OAAQ,gBAAUY,EAAK,EAAZX,MAAK,OACZ,cAACtE,GAAA,EAAQ,2BACDiF,GAAK,IACThF,QAASgF,EAAMxT,MACf+N,SAAU,SAAC0F,GAAC,OAAKD,EAAMzF,SAAS0F,EAAExF,OAAOO,QAAQ,IACnD,IAIdZ,MAAM,iBAGd,cAACxS,EAAA,EAAI,CAACM,MAAI,WACN,eAACge,GAAA,EAAW,CAACnd,GAAI,CAAEC,MAAO,KAAM,UAC5B,cAACmd,GAAA,EAAU,CAACla,GAAG,cAAa,SAAC,WAC7B,cAAC,KAAU,CACPkT,KAAK,WACLiH,aAAcc,EAAQ,GAAGjb,GACzB6O,QAASA,EACTsE,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACZ,cAACgH,GAAA,EAAM,yBAACjM,MAAM,UAAaiF,GAAK,aAC3B6H,EAAQ1E,MAAM,GAAGhB,KAAI,SAAC3N,GAAM,OAAK,cAACyS,GAAA,EAAQ,CAAiB9Z,MAAOqH,EAAO5H,GAAG,SAAE4H,EAAOsL,MAArCtL,EAAO5H,GAA8C,MACjG,IAGjB,cAACsa,GAAA,EAAc,CAACpJ,OAAO,EAAK,SAAiB,QAAjB,EAAEoB,EAAO/H,gBAAQ,aAAf,EAAiBpL,kBAK3D,eAACxD,EAAA,EAAI,CAACC,WAAS,EAACI,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UACxE,cAACrX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWG,QAASoD,EAAgB,SAAC,aAIzD,cAAChX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SAAC,iBAMpDqS,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,QAIhF,C,cClKe,SAAS+L,GAAkB,GAAkD,IAAhDpH,EAAM,EAANA,OAChCqH,EAAwB5hB,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3E,OAAO,IAA/DmS,oBACR,EAAwDrP,KAAhD7B,EAAc,EAAdA,eAAgBa,EAA2B,EAA3BA,4BAsBxB,OACI,qCACI,cAACkJ,GAAA,EAAc,CAAClZ,UAAWmZ,KAAOlZ,GAAI,CAAEsR,OAAQ,UAAW,SACvD,eAAC6H,GAAA,EAAK,CAACnZ,GAAI,CAAEoZ,SAAU,KAAO,aAAW,eAAc,UACnD,cAACf,GAAW,CAACC,OAAQ,CAAC,QAAS,WAAY,aAAc,SAAU,aACnE,cAACe,GAAA,EAAS,UACL+G,EAAoB9G,SAASb,KAAI,SAACxK,GAAa,IAAD,IAC3C,OACI,eAACuK,GAAA,EAAQ,CAELxY,GAAI,CAAE,mCAAoC,CAAEuZ,OAAQ,IAAM,UAE1D,cAACX,GAAA,EAAS,CAAC7Y,UAAU,KAAKyZ,MAAM,MAAK,UAEX,QAAlB,EAAAvL,EAAQoS,kBAAU,aAAlB,EAAoBtN,QAAS,EACzB,cAACU,GAAA,EAAU,CAAC6M,cAAY,EAAChO,QAAQ,QAAQvS,UAAU,MAAMC,GAAI,CAAEma,OAAQ,WAAa1H,QAAS,kBAAMgI,MAAM,uFAAuF,EAAC,SAC7L,cAACR,GAAA,EAAO,CAACtb,MAAM,kCAAkCub,UAAU,MAAK,SAC5D,cAACqG,GAAA,EAAK,CAACC,aAAgC,QAApB,EAAEvS,EAAQoS,kBAAU,aAAlB,EAAoBI,QAAO,SAAC3G,GAAC,OAAuB,IAAlBA,EAAEzW,WAAqB,IAAE0P,OAAQ2N,MAAM,UAAS,SAClGzS,EAAQtP,MAAMoU,OAAS,GAAK9E,EAAQtP,MAAMgiB,UAAU,EAAG,IAAM,OAAS1S,EAAQtP,YAK3F,cAAC8U,GAAA,EAAU,CAAC6M,cAAY,EAAChO,QAAQ,QAAQvS,UAAU,MAAK,SACnDkO,EAAQtP,MAAMoU,OAAS,GAAK9E,EAAQtP,MAAMgiB,UAAU,EAAG,IAAM,OAAS1S,EAAQtP,UAI/F,cAACia,GAAA,EAAS,CAACC,MAAM,SAAQ,SAAE5K,EAAQgS,WACnC,cAACrH,GAAA,EAAS,CAACC,MAAM,SAAQ,SACrB,cAACc,GAAA,EAAM,CAAC1H,QAAShE,EAAQlI,SAAU0M,QAAS,kBArCvD,SAACvP,GACtB,IAAM0d,EAAiBR,EAAoB9G,SAASO,MAAK,SAAAgH,GAAC,OAAIA,EAAE3d,KAAOA,CAAE,IACnE8M,EAAyB,eAAQ4Q,GACvC5Q,EAAgBjK,UAAY6a,EAAe7a,SAC3CgK,EAA4B7M,EAAI8M,EACpC,CAgCsFyM,CAAiBxO,EAAQ/K,GAAG,MAElF,cAAC0V,GAAA,EAAS,CAACC,MAAM,OAAM,SAAE5K,EAAQsQ,UAAYtQ,EAAQsQ,UAAUnI,KAAO,kCACtE,cAACwC,GAAA,EAAS,CAACC,MAAM,SAAQ,SACrB,sBAAKtG,MAAO,CAAE4F,QAAS,OAAQjZ,eAAgB,UAAW,UACtD,cAAC+a,GAAA,EAAO,CAACtb,MAAM,uBAAuBub,UAAU,MAAK,SACjD,cAAC,KAAQ,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,WAAa3H,QAAS,kBAxDtG,SAACvP,GACnB,IAAM+K,EAAUmS,EAAoB9G,SAASO,MAAK,SAAAgH,GAAC,OAAIA,EAAE3d,KAAOA,CAAE,IAC5D8M,EAA4B,CAC9B9M,GAAI+K,EAAQ/K,GACZvE,MAAOsP,EAAQtP,MACf0d,YAAapO,EAAQoO,YACrB4D,SAAUhS,EAAQgS,SAClBla,SAAUkI,EAAQlI,SAClB0H,SAAUQ,EAAQR,UAEtBsL,EAAO/I,EACX,CA6CkIqK,CAAcpM,EAAQ/K,GAAG,MAEnH,cAACoX,GAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,IACxC,cAACP,GAAA,EAAO,CAACtb,MAAM,yBAAyBub,UAAU,MAAK,SACnD,cAAC,KAAU,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,OAAS3H,QAAS,kBAAMgI,MAAM,iCAAmCxM,EAAQ/K,GAAG,aA/B/I+K,EAAQ/K,GAqCzB,WAIZ,cAAC2U,GAAe,CACZC,MAAO4C,KAAKC,KAAKyF,EAAoBxF,eAAiBwF,EAAoBvF,UAC1E9C,aAAc,SAACtU,GAAa,OAAKyL,EAAezL,EAAM,MAItE,CC/Ee,SAASqd,KACpB,MAAgFtiB,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3E,OAAO,IAA/G8S,EAAY,EAAZA,aAAcC,EAAc,EAAdA,eAAgB7C,EAAO,EAAPA,QAASiC,EAAmB,EAAnBA,oBAAqBnc,EAAO,EAAPA,QACpE,EAAkE8M,KAA1DrC,EAAmB,EAAnBA,oBAAqBI,EAAkB,EAAlBA,mBAAoBV,EAAY,EAAZA,aACjD,EAA8B+F,mBAA0B,MAAK,mBAAtDlG,EAAO,KAAEgT,EAAU,KAE1BjG,qBAAU,WACNtM,IACAI,EAAmBsR,EAAoBvB,eAAgB5a,EAAQwJ,UAC/DW,EAAa,EAAGgS,EAAoBnF,kBAAmBmF,EAAoBvB,eACvEtS,GAAcuG,IAAK7O,EAAQwJ,SAAU,QAAS2S,EAAoBpd,MAE1E,GAAG,CAACod,EAAoBvB,eAAgB5a,EAAQwJ,SAAU2S,EAAoBnF,oBAI9E,OAAI8F,EAAqB,cAAC3N,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAEmJ,IAC3EC,EAAuB,cAAC5N,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAEoJ,IAG7E,qCACI,cAACtiB,EAAU,CAACC,MAAM,yBAClB,cAAC+gB,GAAmB,CAAC/M,SAAU,kBAAMsO,EAAW,CAAE/d,GAAI,EAAGvE,MAAO,GAAI0d,YAAa,sBAAuB4D,SAAU,EAAGla,UAAU,EAAM0H,SAAU0Q,EAAQ,GAAGjb,IAAK,IAC/J,cAACid,GAAiB,CAACpH,OATN,SAAC9K,GAAwB,OAAKgT,EAAWhT,EAAS,IAU9DA,GAAW,cAAC6R,GAAgB,CAAC7R,QAASA,EAASiG,UAAW,kBAAM+M,EAAW,KAAK,MAG7F,CClCe,SAASC,GAAe,GAA6E,IAA3EC,EAAU,EAAVA,WAAYC,EAAc,EAAdA,eAAgBhP,EAAQ,EAARA,SACjE,OACI,cAACtS,EAAA,EAAG,CAACmY,GAAI,EAAGC,GAAI,EAAGrY,UAAU,SAAQ,SACjC,cAACwS,GAAA,EAAM,CACHI,QAAS2O,EACT9O,QAAQ,WACR+O,SAAUF,EAAW,SACpB/O,KAIjB,C,OCVe,SAASkP,GAAY,GAA6C,IAA3Crb,EAAO,EAAPA,QAClC,OACI,qCACI,eAACpH,EAAA,EAAI,CAACM,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAE,UACrB,oBAAIR,UAAU,cAAa,SAAE6G,EAAQtH,QACrC,mBAAGuE,GAAG,sBAAqB,SAAE+C,EAAQoW,iBAEzC,cAACxd,EAAA,EAAI,CAACM,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAE,SACrB,cAACE,EAAA,EAAG,CAACC,UAAU,MAAMC,GAAI,CAAEC,MAAO,QAAUC,IAAI,uBAAuBC,IAAK8F,EAAQqW,eAKpG,CCbe,SAASiF,GAAa,GAA8C,IAA5CC,EAAQ,EAARA,SACnC,OACI,cAAC3iB,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGK,UAAU,yBAAwB,SACzDoiB,EAAS/I,KAAI,SAAAxS,GAAO,OAAI,cAACqb,GAAW,CAAkBrb,QAASA,GAArBA,EAAQ/C,GAAwB,KAGvF,C,cCPe,SAASue,KACpB,OACI,cAAC3hB,EAAA,EAAG,CAACE,GAAI,CAAEmY,QAAS,OAAQuJ,cAAe,SAAUziB,WAAY,SAAUY,UAAW,SAAU2S,UAAW,QAAS,SAChH,cAACmP,GAAA,EAAgB,KAG7B,CCIe,SAASC,KACpB,MAAgDpjB,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3M,OAAO,IAA/EmO,EAAK,EAALA,MAAOgI,EAAmB,EAAnBA,oBAAqByF,EAAO,EAAPA,QACpC,EAA0D9Q,KAAlDzK,EAAW,EAAXA,YAAaQ,EAAgB,EAAhBA,iBAAkBE,EAAc,EAAdA,eAEvCgU,qBAAU,WACN1U,EAAY8V,EAAoBvB,SAAU,EAAG/W,GAAqB+O,OAAQ1E,GAAU+M,UAExF,GAAG,IAOH,OACI,eAACzb,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACV,EAAU,CACPC,MAAM,eACNC,KAAK,yEAET,cAAC2iB,GAAY,CAACC,SAAUpF,EAAoB9C,WAC3CuI,EACG,cAACJ,GAAO,IACRrN,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkBO,MAAM,SAAEa,IAEjE,cAAC8M,GAAc,CACXE,eAjBY,WACpBta,EAAiBsV,EAAoBvB,SAAUuB,EAAoBnB,kBAAoB,EAAGnX,GAAqB+O,OAAQ1E,GAAU+M,WACjIlU,EAAeoV,EAAoBnB,kBAAoB,EAC3D,EAeYkG,WAAY/E,EAAoBnB,kBAAoBmB,EAAoBvB,UAAYuB,EAAoBxB,eAAe,SAEtHiH,EAAU,aAAe,gBAI1C,CC3CO,SAAeC,GAAe,GAAD,gCAEnC,wDAFM,WAA8BjhB,GAAmB,2FACtCP,IAAMC,KAAK,qCAAsCM,GAAM,uCAAEL,MAAI,4CAC9E,sB,cCOc,SAASuhB,KACpB,MAA0B5N,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KACtB,EAA8BF,oBAAkB,GAAM,mBAA/C0N,EAAO,KAAEG,EAAU,KAC1B,EAAwC7N,oBAAkB,GAAM,mBAAzD8N,EAAY,KAAEC,EAAe,KACpC,EAAoD/N,mBAAiB,IAAG,mBAAjEgO,EAAkB,KAAEC,EAAqB,KAE1C3N,EAAmBC,KAAW,CAChC2N,WAAY3N,OACPC,WACAE,IAAI,EAAG,uCACPC,IAAI,GAAI,yDACbwN,YAAa5N,OACRI,IAAI,GAAI,0DACRC,QAAQ9B,GAAe,sCAC5BsP,QAAS7N,OACJC,WACAE,IAAI,EAAG,0CACPC,IAAI,IAAK,6DACdzS,QAASqS,OACJC,WACAE,IAAI,EAAG,0CACPC,IAAI,KAAM,gEAOnB,EAAgEM,aAAQ,CAAEC,SAAUC,aAAYb,GAAmBU,cAJ/E,CAChCkN,WAAY,GAAIC,YAAa,GAAIC,QAAS,GAAIlgB,QAAS,MAGnD0P,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUG,EAAK,EAALA,MAEhD6M,EAAS,iDAAG,WAAOngB,GAAqB,iFAErB,OAFqB,SAEtC2f,GAAW,GAAM,SACwBF,GAAezf,GAAS,KAAD,EAA1DogB,EAA0B,OAChCL,EAAsBK,GACtBP,GAAgB,GAAM,gDAEtB7N,EAAS,8EAA8E,QAErE,OAFqE,UAEvF2N,GAAW,GAAO,4EAEzB,gBAXc,sCAsBf,OACI,qCACI,uBAAMpM,SAAUL,GAXP,SAAClT,GACdmgB,EAAUngB,EACd,IAS+C,UACnC,eAACxD,EAAA,EAAI,CAACC,WAAS,EAACI,eAAe,gBAAgBH,QAAS,EAAE,UACtD,cAACF,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAGhY,GAAI,GAAG,SACrB,cAAC,KAAU,CACPyW,KAAK,aACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,OAAOtP,KAAK,OAAOuP,OAAO,SAASC,WAAS,EACrE6C,MAAOmC,QAAQf,EAAO6M,YAAa7L,WAA6B,QAAnB,EAAEhB,EAAO6M,kBAAU,aAAjB,EAAmBhgB,UAAW,MAG7F,cAACxD,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAGhY,GAAI,GAAG,SACrB,cAAC,KAAU,CACPyW,KAAK,cACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,QAAQtP,KAAK,QAAQuP,OAAO,SAASC,WAAS,EACvEkF,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAe,SAIhCzC,MAAOmC,QAAQf,EAAO8M,aAAc9L,WAA8B,QAApB,EAAEhB,EAAO8M,mBAAW,aAAlB,EAAoBjgB,UAAW,SAKnG,cAACxD,EAAA,EAAI,UACD,cAAC,KAAU,CACPuX,KAAK,UACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,UAAUtP,KAAK,OAAOuP,OAAO,SAASoR,KAAK,SAASnR,WAAS,EACtF6C,MAAOmC,QAAQf,EAAO+M,SAAU/L,WAA0B,QAAhB,EAAEhB,EAAO+M,eAAO,aAAd,EAAgBlgB,UAAW,MAGvF,cAACxD,EAAA,EAAI,UACD,cAAC,KAAU,CACPuX,KAAK,UACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,UAAUtP,KAAK,OAAOuP,OAAO,SAASoR,KAAK,SAASnR,WAAS,EACrF6C,MAAOmC,QAAQf,EAAOnT,SAAUmU,WAA0B,QAAhB,EAAEhB,EAAOnT,eAAO,aAAd,EAAgBA,UAAW,MAGvF,eAACxD,EAAA,EAAI,CAACC,WAAS,EAACI,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,UAAW,UAC1E,cAACrX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAGhY,GAAI,GAAIK,GAAI,CAAEH,UAAW,UAAW,SAClD,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWG,QAAS,kBAAMkD,GAAO,EAAC,SAAC,aAIvD,cAAC9W,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAGhY,GAAI,GAAIK,GAAI,CAAEH,UAAW,UAAW,SAClD,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SACnC8f,EAAU,aAAe,cAItC,cAACc,GAAA,EAAQ,CAAC5M,KAAMkM,EAAc5f,QAAS8f,EAAoBS,iBAAkB,IAAM5M,QAnE3E,SAACvE,EAAsCoR,GACxC,cAAXA,GACJX,GAAgB,EACpB,OAkES9N,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,MAG5E,C,yBC9He,SAAS0O,GAAgB,GAA0D,IAAxDC,EAAe,EAAfA,gBACtC,OACI,eAAClkB,EAAA,EAAI,CAACM,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAGC,UAAU,SAASG,GAAI,CAAEwS,UAAW,QAAS,UACnE,cAAC,KAAW,IACZ,uBACA,cAACiB,GAAA,EAAU,CAACnB,QAAQ,KAAI,SACpB,iCAASyQ,EAAgBpkB,UAE7B,uBACCokB,EAAgBC,MAAMvK,KAAI,SAACwK,GAAI,OAAK,cAACxP,GAAA,EAAU,CAAYnB,QAAQ,QAAO,SAAE2Q,GAAvBA,EAAyC,MAG3G,CCRO,IAAMC,GAAmC,CAC5C,CAAEvkB,MAAO,UAAWqkB,MAAO,CAAC,oBAAqB,wBACjD,CAAErkB,MAAO,UAAWqkB,MAAO,CAAC,mBAAoB,qBAChD,CAAErkB,MAAO,WAAYqkB,MAAO,CAAC,sBAAuB,sBACpD,CAAErkB,MAAO,gBAAiBqkB,MAAO,CAAC,wBAAyB,wBCThD,SAASG,KACpB,OACI,cAACtkB,EAAA,EAAI,CAACC,WAAS,WACVokB,GAAiBzK,KAAI,SAACtZ,GAAI,OAAK,cAAC2jB,GAAe,CAAkBC,gBAAiB5jB,GAA7BA,EAAKR,MAAgC,KAGvG,CCLe,SAASykB,KACpB,OACI,eAAC3jB,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACV,EAAU,CACPC,MAAM,aACNC,KAAK,yBAET,eAACC,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGK,UAAU,yBAAwB,UAC1D,cAACP,EAAA,EAAI,CAACM,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAE,SACrB,cAACujB,GAAoB,MAEzB,eAACtkB,EAAA,EAAI,CAACM,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAE,UACrB,eAAC6T,GAAA,EAAU,CAACnB,QAAQ,KAAKzS,UAAW,SAAS,UAAC,0BACnB,iCAAQ,2CAEnC,cAACkiB,GAAW,YAKhC,CCnBe,SAASsB,GAAU,GAA4E,IAAD,IAAzEve,cAAM,MAAG,MAAK,MAAEzC,eAAO,MAAG,wBAAuB,EAEjF,OACI,eAACxD,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAAQ,UAC9B,cAACH,EAAA,EAAI,CAACM,MAAI,WACN,cAACT,EAAU,CAACC,MAAM,kCAEtB,eAACE,EAAA,EAAI,CAACM,MAAI,YACN,eAACsU,GAAA,EAAU,CAAC1T,UAAW,IAAKC,GAAI,CAAEkW,QAAS,QAAS,UAAC,iBAClCpR,KAEnB,cAAC2O,GAAA,EAAU,CAAC1T,UAAW,IAAKC,GAAI,CAAE0gB,MAAO,MAAOxK,QAAS,QAAS,SAC7D7T,SAMrB,C,OCnBe,SAASihB,KACpB,IAAMC,EAAWC,cAEjB,OACI,cAACtK,GAAA,EAAK,CAAClZ,GAAI,CAAEyjB,gBAAiB,0CAA2CC,eAAgB,OAAQC,aAAc,KAAM,SACjH,cAAClkB,EAAA,EAAS,CAACmkB,OAAK,EAAClkB,SAAS,KAAI,SAC1B,eAACb,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAAS6kB,aAAa,SAASnkB,SAAS,MAAK,UACnE,cAACb,EAAA,EAAI,CAACM,MAAI,EAAC8Y,GAAI,GAAIC,GAAI,EAAE,SACrB,oBAAI9Y,UAAU,wBAAuB,SAAC,uBAE1C,cAACP,EAAA,EAAI,CAACM,MAAI,WACN,mBAAG+D,GAAG,cAAa,SAAC,gGAIxB,cAACrE,EAAA,EAAI,CAACM,MAAI,EAAC8Y,GAAI,EAAGC,GAAI,EAAE,SACpB,cAAC7F,GAAA,EAAM,CAACjT,UAAU,cAAckT,QAAQ,YAAYoO,MAAM,UACtDjO,QAAS,WAAQ8Q,EAAShkB,EAAWukB,UAAWC,OAAOC,OAAO,EAAG,EAAG,EAAE,SACzE,2BAQzB,CCjBe,SAASC,KACpB,MAAgDzlB,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3M,OAAO,IAA/EmO,EAAK,EAALA,MAAOgI,EAAmB,EAAnBA,oBAAqByF,EAAO,EAAPA,QAC5Bvb,EAAgByK,KAAhBzK,YACFid,EAAWC,cAOjB,OALAxI,qBAAU,WACN1U,EAAY8V,EAAoBvB,SAAU,EAAG/W,GAAqB+O,OAAQ1E,GAAU+M,UAExF,GAAG,IAGC,qCACI,cAACxc,EAAU,CACPC,MAAM,WACNC,KAAK,iFAERijB,EACG,cAACJ,GAAO,IACRrN,EACI,cAAChB,GAAY,CAACE,WAAYN,GAAkBO,MAAM,SAAEa,IACpD,cAACmN,GAAY,CAACC,SAAUpF,EAAoB9C,SAASG,MAAM,EAAG,KAEtE,cAACyH,GAAc,CAACC,WAAY/M,GAASA,EAAMrB,OAAS,EAAGqO,eAAgB,WAAQmC,EAAShkB,EAAWukB,UAAWC,OAAOC,OAAO,EAAG,EAAG,EAAE,SAAE,cAKlJ,C,+BCrCe,SAASE,GAAa,GAA+C,IAA7C1a,EAAQ,EAARA,SACnC,OACI,cAAC3K,EAAA,EAAI,CAACM,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAGC,UAAU,SAAQ,SACxC,eAACskB,GAAA,EAAI,CAACC,UAAW,GAAG,UAChB,cAACtkB,EAAA,EAAG,CACAC,UAAU,MACVC,GAAI,CAAEC,MAAO,MAAOokB,WAAY,QAChCnkB,IAAI,kBACJC,IAAKqJ,EAAS4U,YAElB,eAACkG,GAAA,EAAW,WAIR,mBAAGphB,GAAG,YAAW,SAAEsG,EAASoL,WAC5B,mBAAG1R,GAAG,WAAU,SAAEsG,EAASkK,WAC3B,cAACD,GAAA,EAAU,CAACnB,QAAQ,QAAQoO,MAAM,iBAAgB,SAC7ClX,EAAS6S,qBAMlC,CCvBe,SAASkI,GAAc,GAAgD,IAA9CC,EAAS,EAATA,UACpC,OACI,cAAC3lB,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGK,UAAU,yBAAwB,SACzDolB,EAAU/L,KAAI,SAAAjP,GAAQ,OAAI,cAAC0a,GAAY,CAAC1a,SAAUA,GAAeA,EAAStG,GAAM,KAG7F,CCGe,SAASuhB,KACpB,MAAiDjmB,GAAiB,SAAAoU,GAAK,OAAIA,EAAMpJ,QAAQ,IAAjF4K,EAAK,EAALA,MAAOkK,EAAoB,EAApBA,qBAAsBuD,EAAO,EAAPA,QAC7BjY,EAAiBmH,KAAjBnH,aACF2Z,EAAWC,cAOjB,OALAxI,qBAAU,WACNpR,EAAa0U,EAAqBzD,SAAU,EAAG,GAAI,WAAY1M,GAAU+M,UAE7E,GAAG,IAGC,qCACI,cAACxc,EAAU,CACPC,MAAM,WACNC,KAAK,iQAERijB,EACG,cAACJ,GAAO,IACRrN,EACI,cAAChB,GAAY,CAACE,WAAYN,GAAkBO,MAAM,SAAEa,IACpD,cAACmQ,GAAa,CAACC,UAAWlG,EAAqBhF,WAEvD,cAAC4H,GAAc,CAACC,WAAY/M,GAASA,EAAMrB,OAAS,EAAGqO,eAAgB,WAAQmC,EAAShkB,EAAWmlB,MAAOX,OAAOC,OAAO,EAAG,EAAG,EAAE,SAAE,cAK9I,CCjCe,SAASW,KACpB,OACI,qCACI,cAACrB,GAAa,IAEd,eAAC7jB,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACI,EAAS,IAEV,cAACykB,GAAc,IAEf,cAACQ,GAAW,IAEZ,cAACrB,GAAW,SAK5B,C,wBCRe,SAASwB,KACpB,IAAQhjB,EAAUmP,KAAVnP,MACF2hB,EAAWC,cACjB,EAA8BrP,oBAAkB,GAAM,mBAA/C0N,EAAO,KAAEG,EAAU,KAC1B,EAA0B7N,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KACtB,EAAwCF,oBAAkB,GAAM,mBAAzD0Q,EAAY,KAAEC,EAAe,KAE9BrQ,EAAmBC,KAAW,CAChC7T,MAAO6T,OACFI,IAAI,GAAI,0DACRC,QAAQ9B,GAAe,gFAC5B8R,SAAUrQ,OACLI,IAAI,IAAK,8DACTC,QAAQ7B,GAAkB,sIAC/B8R,SAAUtQ,OACLC,aAKT,EAAgES,aAAQ,CACpEC,SAAUC,aAAYb,GAAmBU,cAHZ,CAAEtU,MAAO,GAAIkkB,SAAU,GAAIC,UAAU,KAE9DjT,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUG,EAAK,EAALA,MAIhDC,EAAQ,iDAAG,WAAOqP,GAAkE,iFAGnE,OAHmE,SAElFjD,GAAW,GACX3N,EAAS,MAAM,SACStT,EAAWkkB,GAAY,KAAD,EAAxCpjB,EAAS,OACfS,aAAa4iB,QAAQ,OAAQC,KAAKC,UAAUvjB,IAC5CD,EAAMC,GACN8T,IACA4N,EAAShkB,EAAW8lB,MAAK,kDAEzBhR,EAAS,KAAEhS,SAAW,yBAAyB,QAE7B,OAF6B,UAE/C2f,GAAW,GAAO,6EAEzB,gBAda,sCAgBd,OAAI5N,EAAc,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,IAGpE,sBAAMwB,SAAUL,EAAaK,GAAWxW,UAAU,gBAAe,SAC7D,eAACP,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAAS6kB,aAAa,SAAS5L,GAAI,EAAE,UAC3D,cAACpZ,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CACPiX,KAAK,QACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,QAAQtP,KAAK,QAAQuP,OAAO,SAASlS,UAAU,kBACvEqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAe,SAIhCzC,MAAOmC,QAAQf,EAAO3U,OAAQ2V,WAAwB,QAAd,EAAEhB,EAAO3U,aAAK,aAAZ,EAAcwB,UAC1D,MAId,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,WAAWrE,QAASA,EACjCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,WAAWtP,KAAM8iB,EAAe,OAAS,WAClEvT,OAAO,SAASlS,UAAU,kBAC1BqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CACPnE,QAAS,kBAAMqS,GAAiBD,EAAa,EAC7CS,YAAa,SAAC7T,GAA0C,OAAKA,EAAM8T,gBAAgB,EACnF1O,KAAK,MAAK,SAETgO,EAAe,cAACW,GAAA,EAAU,IAAM,cAACC,GAAA,EAAa,SAK/DrR,MAAOmC,QAAQf,EAAOuP,UAAWvO,WAA2B,QAAjB,EAAEhB,EAAOuP,gBAAQ,aAAf,EAAiB1iB,UAAW,MAGzF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC2S,GAAA,EAAgB,CACb9R,GAAI,CAAEwS,UAAW,QACjBT,QACI,cAAC,KAAU,CAACqE,KAAK,WAAWrE,QAASA,EACjCsE,OAAQ,gBAAUY,EAAK,EAAZX,MAAK,OACZ,cAACtE,GAAA,EAAQ,2BAAMiF,GAAK,IAAEhF,QAASgF,EAAMxT,MACjC+N,SAAU,SAACC,GAAK,OAAKwF,EAAMzF,SAASC,EAAMC,OAAOO,QAAQ,IAAI,IAG7EZ,MAAO,4BAAG,qBAGlB,cAACxS,EAAA,EAAI,CAACM,MAAI,WACN,eAACN,EAAA,EAAI,CAACC,WAAS,EAACkB,GAAI,CAAEwS,UAAW,SAAWzT,QAAS,EAAGC,UAAU,MAAME,eAAe,SAAQ,UAC3F,cAACL,EAAA,EAAI,CAACM,MAAI,WACN,cAACkT,GAAA,EAAM,CAACC,QAAQ,WAAWG,QAAS,kBAAM8Q,EAAShkB,EAAW8lB,KAAK,EAAC,SAAC,aAIzE,cAACxmB,EAAA,EAAI,CAACM,MAAI,WACN,cAACkT,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SACnC8f,EAAU,aAAe,sBAQ1D,CC7He,SAAS6D,KACpB,OACI,eAACjmB,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACV,EAAU,CACPC,MAAM,WACNC,KAAK,iGAET,eAACC,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAASC,WAAW,SAAQ,UAClD,cAAC2lB,GAAS,IACV,eAACnR,GAAA,EAAU,CAAC1T,UAAW,IAAKyT,GAAI,EAAE,UAAE,MAC7B,cAAC,IAAI,CAACmS,GAAIpmB,EAAWqmB,SAAS,SAAC,YAAc,6CAKpE,CClBe,SAASC,KACpB,OACI,eAACpmB,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACV,EAAU,CACPC,MAAM,2BACNC,KAAK,iGAET,cAACC,EAAA,EAAI,CAACC,WAAS,WACX,cAACD,EAAA,EAAI,CAACM,MAAI,WACN,cAACsU,GAAA,EAAU,CAAC1T,UAAW,IAAKC,GAAI,CAAEkW,QAAS,UAAW,SAAC,iFAO3E,CCJe,SAAS4P,KACpB,IAAMvC,EAAWC,cACjB,EAA8BrP,oBAAkB,GAAM,mBAA/C0N,EAAO,KAAEG,EAAU,KAC1B,EAA0B7N,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KACtB,EAAwCF,oBAAkB,GAAM,mBAAzD0Q,EAAY,KAAEC,EAAe,KACpC,EAAsD3Q,oBAAkB,GAAM,mBAAvE4R,EAAmB,KAAEC,EAAsB,KAE5CvR,EAAmBC,KAAW,CAChC7T,MAAO6T,OACFI,IAAI,GAAI,0DACRC,QAAQ9B,GAAe,gFAC5B8R,SAAUrQ,OACLI,IAAI,IAAK,8DACTC,QAAQ7B,GAAkB,sIAC/B+S,gBAAiBvR,OACZK,QAAQ7B,GAAkB,gJAKnC,EAAgEkC,aAAQ,CACpEC,SAAUC,aAAYb,GAAmBU,cAHT,CAAEtU,MAAO,GAAIkkB,SAAU,GAAIkB,gBAAiB,MAExElU,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUG,EAAK,EAALA,MAIhDC,EAAQ,iDAAG,WAAOtU,GAAyB,2EAG3B,OAH2B,SAEzC0gB,GAAW,GACX3N,EAAS,MAAK,SACRhT,EAAc,CAChBR,MAAOS,EAAYT,MACnBkkB,SAAUzjB,EAAYyjB,SACtBkB,gBAAiB3kB,EAAY2kB,kBAC9B,KAAD,EACFtQ,IACA4N,EAAShkB,EAAW2mB,mBAAmB,gDAEvC7R,EAAS,KAAEhS,SAAW,yBAAyB,QAE7B,OAF6B,UAE/C2f,GAAW,GAAO,4EAEzB,gBAhBa,sCAkBd,OACI,sBAAMpM,SAAUL,EAAaK,GAAWxW,UAAU,gBAAe,SAC7D,eAACP,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAAS6kB,aAAa,SAAS5L,GAAI,EAAE,UAC3D,cAACpZ,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,QAAQrE,QAASA,EAC9BsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,QAAQtP,KAAK,QACtCuP,OAAO,SAASlS,UAAU,kBAC1BqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAe,SAIhCzC,MAAOmC,QAAQf,EAAO3U,OAAQ2V,WAAwB,QAAd,EAAEhB,EAAO3U,aAAK,aAAZ,EAAcwB,UAAW,MAGnF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,WAAWrE,QAASA,EACjCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,WAAWtP,KAAM8iB,EAAe,OAAS,WAClEvT,OAAO,SAASlS,UAAU,kBAC1BqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CACPnE,QAAS,kBAAMqS,GAAiBD,EAAa,EAC7CS,YAAa,SAAC7T,GAA0C,OAAKA,EAAM8T,gBAAgB,EACnF1O,KAAK,MAAK,SAETgO,EAAe,cAACW,GAAA,EAAU,IAAM,cAACC,GAAA,EAAa,SAK/DrR,MAAOmC,QAAQf,EAAOuP,UAAWvO,WAA2B,QAAjB,EAAEhB,EAAOuP,gBAAQ,aAAf,EAAiB1iB,UAAW,MAGzF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,kBAAkBrE,QAASA,EACxCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,mBAAmBtP,KAAMgkB,EAAsB,OAAS,WAChFzU,OAAO,SAASlS,UAAU,kBAC1BqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CACPnE,QAAS,kBAAMuT,GAAwBD,EAAoB,EAC3DT,YAAa,SAAC7T,GAA0C,OAAKA,EAAM8T,gBAAgB,EACnF1O,KAAK,MAAK,SAETkP,EAAsB,cAACP,GAAA,EAAU,IAAM,cAACC,GAAA,EAAa,SAKtErR,MAAOmC,QAAQf,EAAOyQ,iBAAkBzP,WAAkC,QAAxB,EAAEhB,EAAOyQ,uBAAe,aAAtB,EAAwB5jB,UAAW,MAGvG,cAACxD,EAAA,EAAI,CAACM,MAAI,EAACqU,GAAI,EAAE,SACb,eAAC3U,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,MAAME,eAAe,SAAQ,UAC/D,cAACL,EAAA,EAAI,CAACM,MAAI,WACN,cAACkT,GAAA,EAAM,CAACC,QAAQ,WAAWG,QAAS,kBAAM8Q,EAAShkB,EAAW8lB,KAAK,EAAC,SAAC,aAIzE,cAACxmB,EAAA,EAAI,CAACM,MAAI,WACN,cAACkT,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SACnC8f,EAAU,aAAe,mBAKzCzN,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,QAIhF,CCpIe,SAAS+R,KACpB,OACI,eAAC1mB,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACV,EAAU,CACPC,MAAM,WACNC,KAAK,iGAET,cAACC,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAASC,WAAW,SAAQ,SAClD,cAAC6mB,GAAY,QAI7B,CCJe,SAASM,KACpB,MAAiD5nB,GAAiB,SAAAoU,GAAK,OAAIA,EAAMpJ,QAAQ,IAAjF4K,EAAK,EAALA,MAAOkK,EAAoB,EAApBA,qBAAsBuD,EAAO,EAAPA,QACrC,EAA6D9Q,KAArDnH,EAAY,EAAZA,aAAcI,EAAiB,EAAjBA,kBAAmBE,EAAe,EAAfA,gBAEzC8Q,qBAAU,WACNpR,EAAa0U,EAAqBzD,SAAU,EAAG,GAAI,WAAY1M,GAAU+M,UAE7E,GAAG,IAOH,OACI,eAACzb,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACV,EAAU,CACPC,MAAM,WACNC,KAAK,iQAET,cAAC2lB,GAAa,CAACC,UAAWlG,EAAqBhF,WAC9CuI,EACG,cAACJ,GAAO,IACRrN,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkBO,MAAM,SAAEa,IAEjE,cAAC8M,GAAc,CACXE,eAjBY,WACpBpX,EAAkB,EAAGsU,EAAqBrD,kBAAoB,EAAG,GAAI,WAAY9M,GAAU+M,WAC3FhR,EAAgBoU,EAAqBrD,kBAAoB,EAC7D,EAeYkG,WAAY7C,EAAqBrD,kBAAoBqD,EAAqBzD,UAAYyD,EAAqB1D,eAAe,SAEzHiH,EAAU,aAAe,gBAI1C,CCzCe,SAASwE,KACpB,MAA+CtV,KAAvC3D,EAAW,EAAXA,YAAaF,EAAqB,EAArBA,sBASrB,OACI,cAACrO,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,MAAME,eAAgB,gBAAiBD,WAAY,SAAS,SAC9F,cAACiS,GAAgB,CAACvS,MAAM,cAAcwS,SATvB,SAACvO,GACE,IAAlBA,EAAOmQ,QAAc7F,EAAsB,IAC3CtK,EAAOmQ,OAAS,IACpB3F,EAAY,GACZF,EAAsBtK,GAC1B,KAOJ,CCXe,SAAS0jB,KACpB,IAAQC,EAAqB/nB,GAAiB,SAAAoU,GAAK,OAAIA,EAAMtG,IAAI,IAAzDia,iBACR,EAAwDxV,KAAhD3D,EAAW,EAAXA,YAAaN,EAA8B,EAA9BA,+BASrB,OACI,qCACI,cAACmM,GAAA,EAAc,CAAClZ,UAAWmZ,KAAOlZ,GAAI,CAAEsR,OAAQ,UAAW,SACvD,eAAC6H,GAAA,EAAK,CAACnZ,GAAI,CAAEoZ,SAAU,KAAO,aAAW,eAAc,UACnD,cAACf,GAAW,CAACC,OAAQ,CAAC,YAAa,QAAS,mBAAoB,QAAS,aAAc,aACvF,cAACe,GAAA,EAAS,UACLkN,EAAiBjN,SAASb,KAAI,SAACnM,GAAI,OAChC,eAACkM,GAAA,EAAQ,CAAexY,GAAI,CAAE,mCAAoC,CAAEuZ,OAAQ,IAAM,UAC9E,cAACX,GAAA,EAAS,CAAC7Y,UAAU,KAAKyZ,MAAM,MAAK,SAAElN,EAAKka,WAC5C,cAAC5N,GAAA,EAAS,CAACC,MAAM,OAAM,SAAEvM,EAAKzL,QAC9B,cAAC+X,GAAA,EAAS,CAACC,MAAM,SAAQ,SACrB,cAACc,GAAA,EAAM,CAAC1H,QAAS3F,EAAKU,eAAgByF,QAAS,kBAlBhD,SAACvP,GAC5B,IAAMujB,EAAcF,EAAiBjN,SAASO,MAAK,SAAAC,GAAC,OAAIA,EAAE5W,KAAOA,CAAE,IAC7D6J,EAAmB,eAAQ0Z,GACjC1Z,EAAaC,gBAAkByZ,EAAYzZ,eAC3CF,EAA+B5J,EAAI6J,EACvC,CAaqF2Z,CAAuBpa,EAAKpJ,GAAG,MAExF,cAAC0V,GAAA,EAAS,CAACC,MAAM,OAAM,SAAEvM,EAAKqa,cAC9B,cAAC/N,GAAA,EAAS,CAACC,MAAM,OAAM,SAAEvM,EAAK8R,YAC9B,cAACxF,GAAA,EAAS,CAACC,MAAM,SAAQ,SACrB,qBAAKtG,MAAO,CAAE4F,QAAS,OAAQjZ,eAAgB,UAAW,SACtD,cAAC+a,GAAA,EAAO,CAACtb,MAAM,cAAcub,UAAU,MAAK,SACxC,cAAC,KAAU,CAACla,GAAI,CAAEma,OAAQ,UAAW7I,OAAQ,QAAS8I,KAAM,OAAS3H,QAAS,kBAAMgI,MAAM,iCAAmCnO,EAAKpJ,GAAG,YAXtIoJ,EAAKpJ,GAeT,WAK3B,cAAC2U,GAAe,CACZC,MAAO4C,KAAKC,KAAK4L,EAAiB3L,eAAiB2L,EAAiB1L,UACpE9C,aAAc,SAACtU,GAAa,OAAK2J,EAAY3J,EAAM,MAInE,CC7Ce,SAASmjB,KACpB,MAAsCpoB,GAAiB,SAAAoU,GAAK,OAAIA,EAAMtG,IAAI,IAAlEia,EAAgB,EAAhBA,iBAAkBtiB,EAAO,EAAPA,QAClBwI,EAAasE,KAAbtE,SAOR,OALAuO,qBAAU,WACNvO,EAAS8Z,EAAiB1L,SAAU0L,EAAiBtL,kBAAmBhX,EAE5E,GAAG,CAACA,EAASsiB,EAAiBtL,oBAG1B,qCACI,cAACvc,EAAU,CAACC,MAAM,qBAClB,cAAC0nB,GAAgB,IACjB,cAACC,GAAc,MAG3B,CChBe,SAASO,KACpB,MAAiG9V,KAAzFjC,EAAkB,EAAlBA,mBAAoBI,EAAc,EAAdA,eAAgBK,EAAsB,EAAtBA,uBAAwBE,EAAwB,EAAxBA,yBACpE,EAAqCjR,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3E,OAAO,IAApEhK,EAAO,EAAPA,QAASka,EAAO,EAAPA,QAAS7F,EAAM,EAANA,OAE1B0C,qBAAU,WACNlM,EAAmB,GAAI7K,EAAQwJ,SAEnC,GAAG,CAACxJ,EAAQwJ,WAaZ,OACI,eAAC5O,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,MAAME,eAAgB,gBAAiBD,WAAY,SAAS,UAC9F,cAACsgB,GAAiB,CACdC,MAAOrB,EAAQ1F,KAAI,SAACkH,GAAQ,MAAO,CAAEzc,GAAIyc,EAAEzc,GAAIkT,KAAMuJ,EAAEvJ,KAAO,IAC9D/E,MAAM,SACNoO,gBAhBY,SAAChI,GACrBvI,EAAe,GACfK,EAAuBkI,GACvBhI,EAAyB,GAC7B,EAaYhM,MAAOQ,EAAQwJ,WAEnB,cAACqR,GAAkB,CAACzN,MAAM,kBAAkB0N,QAASzG,EAAQnH,SAb1C,SAACM,EAAO2N,GAC/BlQ,EAAe,GACfO,EAAyB2P,EAC7B,MAaJ,CChCe,SAAS0H,GAAY,GAA6C,IAA3C7Y,EAAO,EAAPA,QAC5BsV,EAAWC,cACjB,EAAiDzS,KAAzCpB,EAAiB,EAAjBA,kBAAmBE,EAAiB,EAAjBA,kBAErBkX,EAAsB,WACxBlX,EAAkB5B,EAAQ/K,GAAI+K,EAAQgS,SAAW,GACjDtQ,EAAkB1B,GAClBsV,EAAShkB,EAAWynB,QAAU,IAAM/Y,EAAQ/K,GAChD,EAEA,OACI,cAACrE,EAAA,EAAI,CAACM,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAGC,UAAU,OAAM,SACtC,cAACskB,GAAA,EAAI,UACD,eAACG,GAAA,EAAW,WACR,cAAC7Q,GAAA,EAAU,CAACzT,GAAI,CAAEinB,SAAU,IAAMvG,MAAM,iBAAiBJ,cAAY,WAChErS,EAAQsQ,UAAUnI,OAEvB,cAAC3C,GAAA,EAAU,CAAC6M,cAAY,EAAChO,QAAQ,KAAKvS,UAAU,MAAMC,GAAI,CAAEma,OAAQ,WAAa1H,QAASsU,EAAoB,SAC1G,cAACxG,GAAA,EAAK,CAACC,aAAcvS,EAAQgS,SAAUS,MAAM,UAAS,SACjDzS,EAAQtP,MAAMgiB,UAAU,EAAG,IAAM,WAG1C,cAAClN,GAAA,EAAU,CAACzT,GAAI,CAAEinB,SAAU,IAAMvG,MAAM,iBAAiBJ,cAAY,WAChE,aAAerS,EAAQgS,WAE5B,cAACxM,GAAA,EAAU,CAACnB,QAAQ,QAAO,SACtBrE,EAAQoO,YAAYsE,UAAU,EAAG,IAAM,SAE5C,cAAC7gB,EAAA,EAAG,CAACE,GAAI,CAAEH,UAAW,SAAU,SAC5B,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWoQ,KAAK,QAAQjQ,QAASsU,EAAoB,SAAC,oBAM9F,CCrCe,SAASG,KACpB,IAAQ9G,EAAwB5hB,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3E,OAAO,IAA/DmS,oBAER,OACI,cAACvhB,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGiB,GAAI,CAAEsR,OAAQ,SAAU4E,QAAS,IAAKjW,MAAO,QAAS,SAC7EmgB,EAAoB9G,SAASb,KAAI,SAAAxK,GAAO,OAAK,cAAC6Y,GAAW,CAAkB7Y,QAASA,GAArBA,EAAQ/K,GAAwB,KAG5G,CCAe,SAASikB,KACpB,MAAyG3oB,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3E,OAAO,IAAxI8S,EAAY,EAAZA,aAAcC,EAAc,EAAdA,eAAgBoG,EAAc,EAAdA,eAAgBC,EAAgB,EAAhBA,iBAAkBjH,EAAmB,EAAnBA,oBAAqBnc,EAAO,EAAPA,QAC7F,EAAqG8M,KAA7FrC,EAAmB,EAAnBA,oBAAqBI,EAAkB,EAAlBA,mBAAoBV,EAAY,EAAZA,aAAcc,EAAc,EAAdA,eAAgBF,EAAiB,EAAjBA,kBAE/EgM,qBAAU,WACNtM,IACAI,EAAmBsR,EAAoBvB,eAAgB5a,EAAQwJ,UAC/DW,EAAagS,EAAoBvF,SAAUuF,EAAoBnF,kBAAmBmF,EAAoBvB,eAClG5a,EAAQK,OAAQL,EAAQwJ,SAAU,QAAS2S,EAAoBpd,MAEvE,GAAG,CAACod,EAAoBvB,eAAgB5a,EAAQwJ,WAQhD,OACI,eAAChO,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACV,EAAU,CAACC,MAAM,kBACjByoB,EACG,cAAC3F,GAAO,IACRV,EACI,cAAC3N,GAAY,CAACE,WAAYN,GAAkBO,MAAM,SAAEwN,IACpD,cAAC8F,GAAgB,IAExBQ,EACG,cAAC5F,GAAO,IACRT,EACI,cAAC5N,GAAY,CAACE,WAAYN,GAAkBO,MAAM,SAAEyN,IACpD,cAACkG,GAAa,IAEtB,cAAChG,GAAc,CACXE,eAtBY,WACpBpS,EAAkBoR,EAAoBvF,SAAUuF,EAAoBnF,kBAAoB,EAAGmF,EAAoBvB,eAC3G5a,EAAQK,OAAQL,EAAQwJ,SAAU,QAAS2S,EAAoBpd,OACnEkM,EAAekR,EAAoBnF,kBAAoB,EAC3D,EAmBYkG,WAAYf,EAAoBnF,kBAAoBmF,EAAoBvF,UAAYuF,EAAoBxF,eAAe,SAEtHyM,EAAmB,aAAe,gBAInD,C,8CCtCe,SAASC,GAAiB,GAAoF,IAAlF3jB,EAAS,EAATA,UAAWuQ,EAAS,EAATA,UAAWqT,EAAQ,EAARA,SAAUC,EAAS,EAATA,UACvE,EAA0BrT,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KACtB,EAA8BF,oBAAkB,GAAM,mBAA/C0N,EAAO,KAAEG,EAAU,KAEpB3G,EACF,SAACC,EAAgBvF,GAAa,OAC1B,SAACtE,KAEOA,GACe,YAAfA,EAAM1P,MACkC,QAAtC0P,EAA8B8J,KACW,UAAtC9J,EAA8B8J,OAIlCxF,GAAM7B,EAAU,MACzB,CAAE,EAEJO,EAAmBC,KAAW,CAChCE,SAAUF,OACLC,SAAS,6DACTG,IAAI,GAAI,yDACbjU,MAAO6T,OACFI,IAAI,GAAI,0DACRC,QAAQ9B,GAAe,gFAC5B+B,MAAON,OACFK,QAAQ5B,GAAe,yLAC5B8B,MAAOP,OACFC,SAAS,+DACTG,IAAI,KAAM,2DACfzR,YAAaqR,OACRC,WACLL,SAAUI,OACLC,WACL7R,UAAW4R,OACNC,aAGHQ,EAA4I,CAC9IP,SAAUjR,EAAUiR,SACpB/T,MAAO8C,EAAU9C,MACjBmU,MAAOrR,EAAUqR,MACjBC,MAAOtR,EAAUsR,MACjB5R,YAAaM,EAAUN,YACvBiR,SAAU3Q,EAAU2Q,SACpBxR,UAAWa,EAAUb,WAGzB,EAAgEsS,aAAQ,CAAEC,SAAUC,aAAYb,GAAmBU,kBAA3GpD,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUG,EAAK,EAALA,MAEhDpQ,EAAe,iDAAG,WAAO5B,GAAqB,2EAE3B,OAF2B,SAE5Cqe,GAAW,GAAM,SACXte,GAAqBC,GAAW,KAAD,EACrC6jB,IAAY,gDAEZnT,EAAS,KAAEhS,SAAW,yDAAyD,QAE7D,OAF6D,UAE/E2f,GAAW,GAAO,4EAEzB,gBAVoB,sCAiBfnM,EAAkB,WACpBxB,EAAS,MACTsB,IACAzB,EAAU,KACd,EAEA,OACI,eAACuH,GAAA,EAAe,CAAC1F,KAAMwR,EAAUjM,OAAO,OACpCtF,QAASqF,EAAa,GAAQ,GAAQK,OAAQL,EAAa,GAAQ,GAAM,UAEzE,uBAAMzF,SAAUL,GAfP,SAAC5R,GACd4B,EAAgB5B,GAChBkS,GACJ,IAYgDtD,MAAO,CAAE7S,SAAU,SAAU,UACjE,eAACb,EAAA,EAAI,CAACC,WAAS,EAACI,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UACxE,cAACzC,GAAA,EAAU,CAACnB,QAAQ,KAAKvS,UAAW,IAAKC,GAAI,CAAEkW,QAAS,OAAQC,WAAY,KAAM,SAAC,aAGnF,cAACtX,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,WAAWrE,QAASA,EACjCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,OAAOtP,KAAK,OAAOuP,OAAO,SAASlS,UAAU,kBACtEqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAiB,SAIlCzC,MAAOmC,QAAQf,EAAOZ,UAAW4B,WAA2B,QAAjB,EAAEhB,EAAOZ,gBAAQ,aAAf,EAAiBvS,UAAW,MAEzF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,QAAQrE,QAASA,EAC9BsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,QAAQtP,KAAK,QAAQuP,OAAO,SAASlS,UAAU,kBACxEqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAe,SAIhCzC,MAAOmC,QAAQf,EAAO3U,OAAQ2V,WAAwB,QAAd,EAAEhB,EAAO3U,aAAK,aAAZ,EAAcwB,UAAW,MAEnF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,QAAQrE,QAASA,EAC9BsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,QAAQtP,KAAK,OAAOuP,OAAO,SAASlS,UAAU,kBACtEqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAS,SAI1BzC,MAAOmC,QAAQf,EAAOR,OAAQwB,WAAwB,QAAd,EAAEhB,EAAOR,aAAK,aAAZ,EAAc3S,UAAW,MAEnF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,QAAQrE,QAASA,EAC9BsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,QAAQC,OAAO,SAASlS,UAAU,kBAAkB0X,WAAS,EAACC,KAAM,EAC5F3C,MAAOmC,QAAQf,EAAOP,OAAQuB,WAAwB,QAAd,EAAEhB,EAAOP,aAAK,aAAZ,EAAc5S,UAAW,SAGvF,eAACxD,EAAA,EAAI,CAACC,WAAS,EAACI,eAAe,SAASH,QAAS,EAAGiB,GAAI,CAAEkW,QAAS,QAAS,UACxE,cAACrX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWG,QAASoD,EAAgB,SAAC,aAEzD,cAAChX,EAAA,EAAI,CAACM,MAAI,EAACwY,GAAI,EAAG3X,GAAI,CAAEH,UAAW,UAAW,SAC1C,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SACnC8f,EAAU,aAAe,iBAKzCzN,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,MAG5E,CCpJe,SAASqT,KACpB,IAAQ3kB,EAAc4kB,cAAd5kB,UACR,EAA6DtE,GAAiB,SAAAoU,GAAK,OAAIA,EAAM3E,OAAO,IAA5F+S,EAAc,EAAdA,eAAgB2G,EAAc,EAAdA,eAAgBN,EAAgB,EAAhBA,iBAChCO,EAASppB,GAAiB,SAAAoU,GAAK,OAAIA,EAAMgV,IAAI,IAA7CA,KACApZ,EAAmBuC,KAAnBvC,eACR,EAAkC2F,mBAA4B,MAAK,mBAA5DxQ,EAAS,KAAEoX,EAAY,KAC9B,EAA4C5G,oBAAkB,GAAM,mBAA7D0T,EAAc,KAAEC,EAAiB,KAExC9M,qBAAU,WACNxM,EAAeuZ,OAAOjlB,GAE1B,GAAG,IAEH,IAAMklB,EAAU,SAACrkB,GACboX,EAAapX,EACjB,EAOA,OAAIqd,EAAuB,cAAC5N,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAEoJ,IAG7E,eAACvhB,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UAChDioB,GAAoB,cAAC5F,GAAO,IAC7B,cAAChO,GAAA,EAAU,CAACnB,QAAQ,KAAKvS,UAAW,IAAKC,GAAI,CAAEkW,QAAS,OAAQC,WAAY,IAAKtW,UAAW,UAAW,SAClG8nB,EAAehpB,QAEpB,cAACmB,EAAA,EAAG,CAACE,GAAI,CAAEH,UAAW,OAAQ2S,UAAW,OAAQyV,aAAc,QAAS,SACpE,cAACxU,GAAA,EAAU,CAACzT,GAAI,CAAEinB,SAAU,IAAMvG,MAAM,iBAAiBJ,cAAY,WAChE,WAAaqH,EAAepJ,UAAUnI,SAG/C,cAAC3C,GAAA,EAAU,CAACnB,QAAQ,QAAQvS,UAAW,MAAM,SACxCmoB,KAAgBP,EAAetL,eAEpC,cAACvc,EAAA,EAAG,CAACE,GAAI,CAAEH,UAAW,OAAQ2S,UAAW,QAAS,SAC9C,cAACiB,GAAA,EAAU,CAACzT,GAAI,CAAEinB,SAAU,IAAMvG,MAAM,iBAAiBJ,cAAY,WAChE,aAAeqH,EAAe1H,aAGvC,cAACngB,EAAA,EAAG,CAACE,GAAI,CAAEH,UAAW,SAAU,SAC5B,cAACwS,GAAA,EAAM,CAACC,QAAQ,WAAWoQ,KAAK,QAAQjQ,QAAS,kBAAMuV,EAAQ,CAC3D9kB,GAAI,EACJ0R,SAAUgT,EAAKtb,KAAKka,SACpB3lB,MAAO+mB,EAAKtb,KAAKzL,MACjBmU,MAAO4S,EAAKtb,KAAKqa,aAAe,GAChC1R,MAAO,GACP5R,aAAa,EACbiR,SAAU,IAAI6G,KACdrY,UAAWilB,OAAOjlB,IACpB,EAAC,SAAC,YAEPa,GAAa,cAAC2jB,GAAgB,CAAC3jB,UAAWA,EAAWuQ,UAAW8T,EAAST,UAAU,EAAMC,UAAW,kBAAMM,GAAkB,EAAK,IAClI,cAACnF,GAAA,EAAQ,CACL5M,KAAM8R,EACNjF,iBAAkB,IAClB5M,QA1CQ,SAACvE,EAAqCoR,GACvC,cAAXA,GACJiF,GAAkB,EACtB,EAwCYzlB,QAAQ,4BAIxB,C,iEC3De,SAAS8lB,KACpB,IAAM5E,EAAWC,cACToE,EAASppB,GAAiB,SAAAoU,GAAK,OAAIA,EAAMgV,IAAI,IAA7CA,KACAhmB,EAAUmP,KAAVnP,MACR,EAA8BuS,oBAAkB,GAAM,mBAA/C0N,EAAO,KAAEG,EAAU,KAC1B,EAA0B7N,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KACtB,EAA4CF,oBAAkB,GAAM,mBAA7D0T,EAAc,KAAEC,EAAiB,KACxC,EAAwC3T,oBAAkB,GAAM,mBAAzD0Q,EAAY,KAAEC,EAAe,KAO9BrQ,EAAmBC,KAAW,CAChC0T,cAAe1T,OACVI,IAAI,GAAI,0DACRC,QAAQ9B,GAAe,gFAC5BoV,SAAU3T,OACLI,IAAI,GAAI,0DACRC,QAAQ9B,GAAe,gFAC5B8R,SAAUrQ,OACLK,QAAQ7B,GAAkB,wJAG7BiC,EAAiC,CAAEiT,cAAeR,EAAKtb,KAAKzL,MAAOwnB,SAAU,GAAItD,SAAU,IAEjG,EAAgE3P,aAAQ,CACpEC,SAAUC,aAAYb,GAAmBU,kBADrCpD,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUG,EAAK,EAALA,MAIhDC,EAAQ,iDAAG,WAAOvV,GAA+B,2EAGjC,OAHiC,SAE/C2hB,GAAW,GACX3N,EAAS,MAAK,SACRjU,EAAiBC,GAAgB,KAAD,EACtCynB,GAAkB,GAClBnS,IACA2S,YAAW,WACPhmB,aAAaC,WAAW,QACxBX,EAAM,MACN2hB,EAAShkB,EAAWyC,MACxB,GAAG,KAAM,kDAETqS,EAAS,KAAEhS,SAAW,yBAAyB,QAE7B,OAF6B,UAE/C2f,GAAW,GAAO,6EAEzB,gBAjBa,sCAmBd,OACI,uBAAMpM,SAAUL,EAAaK,GAAWxW,UAAU,gBAAe,UAC7D,eAACP,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAAS6kB,aAAa,SAAS5L,GAAI,EAAE,UAC3D,cAACpZ,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,gBAAgBrE,QAASA,EACtCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,iBAAiBtP,KAAK,QAC/CuP,OAAO,SAASlS,UAAU,kBAAkBiiB,UAAQ,EACpD5K,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAe,SAIhCzC,MAAOmC,QAAQf,EAAO4S,eAAgB5R,WAAgC,QAAtB,EAAEhB,EAAO4S,qBAAa,aAApB,EAAsB/lB,UAAW,MAGnG,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,WAAWrE,QAASA,EACjCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,YAAYtP,KAAK,QAC1CuP,OAAO,SAASlS,UAAU,kBAC1BqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAe,SAIhCzC,MAAOmC,QAAQf,EAAO6S,UAAW7R,WAA2B,QAAjB,EAAEhB,EAAO6S,gBAAQ,aAAf,EAAiBhmB,UAAW,MAGzF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,WAAWrE,QAASA,EACjCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,WAAWtP,KAAM8iB,EAAe,OAAS,WAClEvT,OAAO,SAASlS,UAAU,kBAC1BqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CACPnE,QAAS,kBAAMqS,GAAiBD,EAAa,EAC7CS,YAAa,SAAC7T,GAA0C,OAAKA,EAAM8T,gBAAgB,EACnF1O,KAAK,MAAK,SAETiO,EAAkB,cAACU,GAAA,EAAU,IAAM,cAACC,GAAA,EAAa,SAKlErR,MAAOmC,QAAQf,EAAOuP,UAAWvO,WAA2B,QAAjB,EAAEhB,EAAOuP,gBAAQ,aAAf,EAAiB1iB,UAAW,MAGzF,cAACxD,EAAA,EAAI,CAACM,MAAI,EAACqU,GAAI,EAAE,SACb,eAAC3U,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,MAAME,eAAe,SAAQ,UAC/D,cAACL,EAAA,EAAI,CAACM,MAAI,WACN,cAACkT,GAAA,EAAM,CAACC,QAAQ,WAAWG,QAAS,kBAAMkD,GAAO,EAAC,SAAC,aAIvD,cAAC9W,EAAA,EAAI,CAACM,MAAI,WACN,cAACkT,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SACnC8f,EAAU,aAAe,gBAKzCzN,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,OAEpE,cAACuO,GAAA,EAAQ,CACL5M,KAAM8R,EACNjF,iBAAkB,IAClB5M,QApHQ,SAACvE,EAAqCoR,GACvC,cAAXA,GACJiF,GAAkB,EACtB,EAkHYzlB,QAAQ,2CAIxB,CC/Ie,SAASkmB,KACpB,OACI,eAAC9oB,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACV,EAAU,CACPC,MAAM,eACNC,KAAK,iGAET,cAACC,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAASC,WAAW,SAAQ,SAClD,cAACkpB,GAAe,QAIhC,CCCe,SAASK,KACpB,IAAMjF,EAAWC,cACToE,EAASppB,GAAiB,SAAAoU,GAAK,OAAIA,EAAMgV,IAAI,IAA7CA,KACA1lB,EAAW6O,KAAX7O,OACR,EAA8BiS,oBAAkB,GAAM,mBAA/C0N,EAAO,KAAEG,EAAU,KAC1B,EAA0B7N,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KACtB,EAA4CF,oBAAkB,GAAM,mBAA7D0T,EAAc,KAAEC,EAAiB,KACxC,EAA8C3T,oBAAkB,GAAM,mBAA/DsU,EAAe,KAAEC,EAAkB,KAC1C,EAA8CvU,oBAAkB,GAAM,mBAA/DwU,EAAe,KAAEC,EAAkB,KAC1C,EAAsDzU,oBAAkB,GAAM,mBAAvE4R,EAAmB,KAAEC,EAAsB,KAO5CvR,EAAmBC,KAAW,CAChC7T,MAAO6T,OACFI,IAAI,GAAI,0DACRC,QAAQ9B,GAAe,gFAC5B4V,YAAanU,OACRI,IAAI,IAAK,8DACTC,QAAQ7B,GAAkB,sIAC/B4V,YAAapU,OACRK,QAAQ7B,GAAkB,sJAC/B6V,mBAAoBrU,OACfK,QAAQ7B,GAAkB,kDAG7BiC,EAAoC,CAAEtU,MAAO+mB,EAAKtb,KAAKzL,MAAOgoB,YAAa,GAAIC,YAAa,GAAIC,mBAAoB,IAE1H,EAAgE3T,aAAQ,CACpEC,SAAUC,aAAYb,GAAmBU,kBADrCpD,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUG,EAAK,EAALA,MAIhDC,EAAQ,iDAAG,WAAOlV,GAAqC,2EAGvC,OAHuC,SAErDshB,GAAW,GACX3N,EAAS,MAAK,SACR5T,EAAoBC,GAAmB,KAAD,EAC5ConB,GAAkB,GAClBnS,IACA2S,YAAW,WACPpmB,EAAO0lB,EAAKtb,KAAKzL,MAAO+mB,EAAKoB,OAAOxnB,aACpC+hB,EAAShkB,EAAWyC,MACxB,GAAG,KAAM,kDAETqS,EAAS,KAAEhS,SAAW,yBAAyB,QAE7B,OAF6B,UAE/C2f,GAAW,GAAO,6EAEzB,gBAhBa,sCAkBd,OACI,uBAAMpM,SAAUL,EAAaK,GAAWxW,UAAU,gBAAe,UAC7D,eAACP,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAAS6kB,aAAa,SAAS5L,GAAI,EAAE,UAC3D,cAACpZ,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,QAAQrE,QAASA,EAC9BsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,QAAQtP,KAAK,QACtCuP,OAAO,SAASlS,UAAU,kBAAkBiiB,UAAQ,EACpD5K,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAe,SAIhCzC,MAAOmC,QAAQf,EAAO3U,OAAQ2V,WAAwB,QAAd,EAAEhB,EAAO3U,aAAK,aAAZ,EAAcwB,UAAW,MAGnF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,cAAcrE,QAASA,EACpCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,eAAetP,KAAM0mB,EAAkB,OAAS,WACzEnX,OAAO,SAASlS,UAAU,kBAC1BqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CACPnE,QAAS,kBAAMiW,GAAoBD,EAAgB,EACnDnD,YAAa,SAAC7T,GAA0C,OAAKA,EAAM8T,gBAAgB,EACnF1O,KAAK,MAAK,SAET4R,EAAkB,cAACjD,GAAA,EAAU,IAAM,cAACC,GAAA,EAAa,SAKlErR,MAAOmC,QAAQf,EAAOqT,aAAcrS,WAA8B,QAApB,EAAEhB,EAAOqT,mBAAW,aAAlB,EAAoBxmB,UAAW,MAG/F,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,cAAcrE,QAASA,EACpCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,eAAetP,KAAM4mB,EAAkB,OAAS,WACzErX,OAAO,SAASlS,UAAU,kBAC1BqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CACPnE,QAAS,kBAAMmW,GAAoBD,EAAgB,EACnDrD,YAAa,SAAC7T,GAA0C,OAAKA,EAAM8T,gBAAgB,EACnF1O,KAAK,MAAK,SAET8R,EAAkB,cAACnD,GAAA,EAAU,IAAM,cAACC,GAAA,EAAa,SAKlErR,MAAOmC,QAAQf,EAAOsT,aAActS,WAA8B,QAApB,EAAEhB,EAAOsT,mBAAW,aAAlB,EAAoBzmB,UAAW,MAG/F,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,qBAAqBrE,QAASA,EAC3CsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,uBAAuBtP,KAAMgkB,EAAsB,OAAS,WACpFzU,OAAO,SAASlS,UAAU,kBAC1BqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CACPnE,QAAS,kBAAMuT,GAAwBD,EAAoB,EAC3DT,YAAa,SAAC7T,GAA0C,OAAKA,EAAM8T,gBAAgB,EACnF1O,KAAK,MAAK,SAETkP,EAAsB,cAACP,GAAA,EAAU,IAAM,cAACC,GAAA,EAAa,SAKtErR,MAAOmC,QAAQf,EAAOuT,oBAAqBvS,WAAqC,QAA3B,EAAEhB,EAAOuT,0BAAkB,aAAzB,EAA2B1mB,UAAW,MAG7G,cAACxD,EAAA,EAAI,CAACM,MAAI,EAACqU,GAAI,EAAE,SACb,eAAC3U,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,MAAME,eAAe,SAAQ,UAC/D,cAACL,EAAA,EAAI,CAACM,MAAI,WACN,cAACkT,GAAA,EAAM,CAACC,QAAQ,WAAWG,QAAS,kBAAMkD,GAAO,EAAC,SAAC,aAIvD,cAAC9W,EAAA,EAAI,CAACM,MAAI,WACN,cAACkT,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SACnC8f,EAAU,aAAe,gBAKzCzN,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,OAEpE,cAACuO,GAAA,EAAQ,CACL5M,KAAM8R,EACNjF,iBAAkB,IAClB5M,QA/IQ,SAACvE,EAAqCoR,GACvC,cAAXA,GACJiF,GAAkB,EACtB,EA6IYzlB,QAAQ,8CAIxB,CC5Ke,SAAS4mB,KACpB,OACI,eAACxpB,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACV,EAAU,CACPC,MAAM,kBACNC,KAAK,iGAET,cAACC,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAASC,WAAW,SAAQ,SAClD,cAACupB,GAAkB,QAInC,C,yBCCe,SAASU,KACpB,IAAQtB,EAASppB,GAAiB,SAAAoU,GAAK,OAAIA,EAAMgV,IAAI,IAA7CA,KACAxT,EAAU5V,GAAiB,SAAAoU,GAAK,OAAIA,EAAMtG,IAAI,IAA9C8H,MACA9G,EAAiByD,KAAjBzD,aACR,EAA4C6G,oBAAkB,GAAM,mBAA7D0T,EAAc,KAAEC,EAAiB,KACxC,EAA8B3T,oBAAkB,GAAM,mBAA/C0N,EAAO,KAAEG,EAAU,KAOpBvN,EAAmBC,KAAW,CAChC8R,SAAU9R,OACLC,WACAG,IAAI,GAAI,8DACbjU,MAAO6T,OACFI,IAAI,GAAI,0DACRC,QAAQ9B,GAAe,gFAC5B0T,YAAajS,OACRK,QAAQ5B,GAAe,yLAC5BiL,UAAW1J,OACNI,IAAI,IAAM,mEAGbK,EAAuB,CACzBjS,GAAI0kB,EAAKtb,KAAKpJ,GACdsjB,SAAUoB,EAAKtb,KAAKka,SACpB3lB,MAAO+mB,EAAKtb,KAAKzL,MACjBmM,eAAgB4a,EAAKtb,KAAKU,eAC1B2Z,YAAaiB,EAAKtb,KAAKqa,aAAe,GACtCvI,UAAWwJ,EAAKtb,KAAK8R,WAAa,IAGtC,EAAmEhJ,aAAQ,CACvEC,SAAUC,aAAYb,GAAmBU,kBADrCpD,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUE,EAAQ,EAARA,SAIhDyT,EAAc,iDAAG,WAAO7c,GAAW,2EAGd,OAHc,SAEjC0V,GAAW,GACX1U,EAAa,MAAM,SACbjB,GAAgBC,GAAM,KAAD,EAC3Bwb,GAAkB,GAAM,gDAExBxa,EAAa,KAAEjL,SAAS,QAEN,OAFM,UAExB2f,GAAW,GAAO,4EAEzB,gBAXmB,sCAadpM,EAAQ,iDAAG,WAAOtJ,GAAW,oGAAK6c,EAAe7c,IAAK,2DAA9C,sCAEd,OACI,uBAAMsJ,SAAUL,EAAaK,GAAWxW,UAAU,gBAAe,UAC7D,iDAAWsW,EAAS,OAAK,IAAE3T,KAAK,YAChC,eAAClD,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAAS6kB,aAAa,SAAS5L,GAAI,EAAE,UAC3D,cAACpZ,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,WAAWrE,QAASA,EACjCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,YAAYtP,KAAK,OAAOuP,OAAO,SAASlS,UAAU,kBAC3EqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAiB,SAIlCzC,MAAOmC,QAAQf,EAAOgR,UAAWhQ,WAA2B,QAAjB,EAAEhB,EAAOgR,gBAAQ,aAAf,EAAiBnkB,UAAW,MAGzF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,QAAQrE,QAASA,EAC9BsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,QAAQtP,KAAK,QAAQuP,OAAO,SAASlS,UAAU,kBAAkBiiB,UAAQ,EAClG5K,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAe,SAIhCzC,MAAOmC,QAAQf,EAAO3U,OAAQ2V,WAAwB,QAAd,EAAEhB,EAAO3U,aAAK,aAAZ,EAAcwB,UAAW,MAGnF,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC2S,GAAA,EAAgB,CACbC,QACI,cAAC,KAAU,CAACqE,KAAK,iBAAiBrE,QAASA,EACvCsE,OAAQ,gBAAUY,EAAK,EAAZX,MAAK,OACZ,cAACtE,GAAA,EAAQ,2BACDiF,GAAK,IACThF,QAASgF,EAAMxT,MACf4d,UAAQ,EACR7P,SAAU,SAAC0F,GAAC,OAAKD,EAAMzF,SAAS0F,EAAExF,OAAOO,QAAQ,IACnD,IAIdZ,MAAM,uBAGd,cAACxS,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,cAAcrE,QAASA,EACpCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAKkF,GAAK,IAAEjF,MAAM,QAAQtP,KAAK,OAAOuP,OAAO,SAASlS,UAAU,kBACtEqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAS,SAI1BzC,MAAOmC,QAAQf,EAAOmR,aAAcnQ,WAA8B,QAApB,EAAEhB,EAAOmR,mBAAW,aAAlB,EAAoBtkB,UAAW,MAE/F,cAACxD,EAAA,EAAI,CAACM,MAAI,WACN,cAAC,KAAU,CAACiX,KAAK,YAAYrE,QAASA,EAClCsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEjF,MAAM,aAAatP,KAAK,OAAOuP,OAAO,SAASlS,UAAU,kBAC5EqX,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAQ,SAIzBzC,MAAOmC,QAAQf,EAAO4I,WAAY5H,WAA4B,QAAlB,EAAEhB,EAAO4I,iBAAS,aAAhB,EAAkB/b,UAAW,MAG3F,cAACxD,EAAA,EAAI,CAACM,MAAI,EAACqU,GAAI,EAAE,SACb,cAAC3U,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,UAAU,MAAME,eAAe,SAAQ,SAC/D,cAACL,EAAA,EAAI,CAACM,MAAI,WACN,cAACkT,GAAA,EAAM,CAACC,QAAQ,WAAWvQ,KAAK,SAAQ,SACnC8f,EAAU,YAAc,eAKxCzN,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,OAEpE,cAACuO,GAAA,EAAQ,CACL5M,KAAM8R,EACNjF,iBAAkB,IAClB5M,QA5IQ,SAACvE,EAAqCoR,GACvC,cAAXA,GACJiF,GAAkB,EACtB,EA0IYzlB,QAAQ,4BAIxB,CCrKe,SAAS+mB,KACpB,OACI,eAAC3pB,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACV,EAAU,CACPC,MAAM,UACNC,KAAK,oCAET,cAACC,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAASC,WAAW,SAAQ,SAClD,cAACiqB,GAAW,QAI5B,CCEA,IAAMG,GAAqB,CACvB,CAAE7lB,KAAMjE,EAAW+pB,QAAS3qB,MAAO,UAAWoB,UAAW,cAACqpB,GAAW,KACrE,CAAE5lB,KAAMjE,EAAWgqB,aAAc5qB,MAAO,eAAgBoB,UAAW,cAACwoB,GAAe,KACnF,CAAE/kB,KAAMjE,EAAWiqB,gBAAiB7qB,MAAO,kBAAmBoB,UAAW,cAACkpB,GAAkB,MAG1FQ,GAA2B,CAC7B,CAAEjmB,KAAMjE,EAAW8lB,KAAM1mB,MAAO,OAAQoB,UAAW,cAAC4kB,GAAQ,KAC5D,CAAEnhB,KAAMjE,EAAWmqB,MAAO/qB,MAAO,WAAYoB,UAAW,cAACP,EAAS,KAClE,CAAEgE,KAAMjE,EAAWukB,SAAUnlB,MAAO,WAAYoB,UAAW,cAAC6hB,GAAY,KACxE,CAAEpe,KAAMjE,EAAWmlB,KAAM/lB,MAAO,OAAQoB,UAAW,cAACqmB,GAAQ,KAC5D,CAAE5iB,KAAMjE,EAAWynB,QAASroB,MAAO,YAAaoB,UAAW,cAAConB,GAAa,KACzE,CAAE3jB,KAAMjE,EAAWoqB,QAAShrB,MAAO,UAAWoB,UAAW,cAACqjB,GAAW,MAG1D,SAASwG,KACpB,MAAsCC,WAAmC,MAAK,mBAAvEC,EAAW,KAAEC,EAAc,KAClC,EAAwCF,WAAmC,MAAK,mBAAzEG,EAAY,KAAEC,EAAe,KAE5BrC,EAASppB,GAAiB,SAAAoU,GAAK,OAAIA,EAAMgV,IAAI,IAA7CA,KACA1lB,EAAW6O,KAAX7O,OACFqhB,EAAWC,cAMX0G,EAAqB,WACvBH,EAAe,KACnB,EAMMI,EAAsB,WACxBF,EAAgB,KACpB,EAOA,OACI,cAACG,GAAA,EAAM,CAAC1W,SAAS,SAAS1T,GAAI,CAAEqqB,gBAAiB,WAAY,SACzD,cAAC5qB,EAAA,EAAS,CAACC,SAAS,KAAI,SACpB,eAAC4qB,GAAA,EAAO,CAACC,gBAAc,YAEnB,cAAC9W,GAAA,EAAU,CAACnB,QAAQ,KAAKvS,UAAU,IAAIyqB,KAAMjrB,EAAW8lB,KAAMrlB,GAAI,CAC9DyqB,GAAI,EACJtS,QAAS,CAAExY,GAAI,OAAQC,GAAI,QAC3BqnB,SAAU,OACVyD,WAAY,IACZC,WAAY,sBACZxU,WAAY,IACZuK,MAAO,UACPkK,eAAgB,QAClB,SACD,YAKD,eAAC9qB,EAAA,EAAG,CAACE,GAAI,CAAE6qB,SAAU,EAAG1S,QAAS,CAAExY,GAAI,OAAQC,GAAI,SAAW,UAC1D,cAACgX,GAAA,EAAU,CACP8L,KAAK,QACL,aAAW,0BACX,gBAAc,cACd,gBAAc,OACdjQ,QA/CE,SAAChB,GACvBsY,EAAetY,EAAMqZ,cACzB,EA8CwBpK,MAAM,UAAS,SAEf,cAAC,KAAQ,MAGb,cAACqK,GAAA,EAAI,CACD7nB,GAAG,cACH8nB,SAAUlB,EACVmB,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBC,aAAW,EACXC,gBAAiB,CACbH,SAAU,MACVC,WAAY,QAEhBpV,KAAMQ,QAAQuT,GACd9T,QAASkU,EACTlqB,GAAI,CACAmY,QAAS,CAAExY,GAAI,QAASC,GAAI,SAC9B,SAED6pB,GAAehR,KAAI,SAAC9V,GAAI,OACrB,cAAC4a,GAAA,EAAQ,CAAiBxd,UAAWurB,IAAM3F,GAAIhjB,EAAKa,KAAMiP,QAASyX,EAAmB,SAClF,cAACzW,GAAA,EAAU,CAAC5T,UAAU,SAAQ,SAAE8C,EAAKhE,SAD1BgE,EAAKa,KAET,SAKvB,cAACiQ,GAAA,EAAU,CAACnB,QAAQ,KAAKvS,UAAU,IAAIyqB,KAAMjrB,EAAW8lB,KAAMrlB,GAAI,CAC9DyqB,GAAI,EACJtS,QAAS,CAAExY,GAAI,OAAQC,GAAI,QAC3BirB,SAAU,EACV5D,SAAU,OACVyD,WAAY,IACZC,WAAY,sBACZxU,WAAY,IACZuK,MAAO,UACPkK,eAAgB,QAClB,SACD,YAKD,cAAC9qB,EAAA,EAAG,CAACE,GAAI,CAAE6qB,SAAU,EAAG1S,QAAS,CAAExY,GAAI,OAAQC,GAAI,SAAW,SACzD6pB,GAAehR,KAAI,SAAC9V,GAAI,OACrB,cAAC0P,GAAA,EAAM,CAEHI,QAASyX,EACTlqB,GAAI,CAAEwT,GAAI,EAAG2E,QAAS,SAAU,SAEhC,cAAC,IAAI,CAACwN,GAAIhjB,EAAKa,KAAMpE,UAAU,iBAAgB,SAAEuD,EAAKhE,SAJjDgE,EAAKa,KAKL,MAKhBokB,EACG,eAAC9nB,EAAA,EAAG,CAACE,GAAI,CAAE6qB,SAAU,GAAI,UACrB,cAACpX,GAAA,EAAU,CAAC1T,UAAU,OAAM,SACvB6nB,EAAKtb,KAAKka,SAAW,MAE1B,cAACvM,GAAA,EAAO,CAACtb,MAAM,gBAAe,SAC1B,cAACiY,GAAA,EAAU,CAACnE,QA1Gb,SAAChB,GACxBwY,EAAgBxY,EAAMqZ,cAC1B,EAwGqE9qB,GAAI,CAAEgU,EAAG,GAAI,SAElD,cAACuX,GAAA,EAAM,CAACrrB,IAAI,aAAaC,IAAKynB,EAAKtb,KAAK8R,WAAa,oCAG7D,eAAC2M,GAAA,EAAI,CACD/qB,GAAI,CAAEiY,GAAI,QACV/U,GAAG,cACH8nB,SAAUhB,EACViB,aAAc,CACVC,SAAU,MACVC,WAAY,SAEhBC,aAAW,EACXC,gBAAiB,CACbH,SAAU,MACVC,WAAY,SAEhBpV,KAAMQ,QAAQyT,GACdhU,QAASmU,EAAoB,UAE5Bd,GAAS5Q,KAAI,SAAC+S,GAAO,OAClB,cAACjO,GAAA,EAAQ,CAAoBxd,UAAWurB,IAAM3F,GAAI6F,EAAQhoB,KAAMiP,QAAS0X,EAAoB,SACzF,cAAC1W,GAAA,EAAU,CAAC5T,UAAU,SAAQ,SAAE2rB,EAAQ7sB,SAD7B6sB,EAAQhoB,KAEZ,IAEf,uBACA,cAAC+Z,GAAA,EAAQ,CAACxd,UAAWurB,IAAM3F,GAAIpmB,EAAW8lB,KAAM5S,QA7HvD,WACjBvQ,EAAO0lB,EAAKtb,KAAKzL,MAAO+mB,EAAKoB,OAAOxnB,aACpC+hB,EAAShkB,EAAW8lB,KACxB,EA0HkG,SAClE,cAAC5R,GAAA,EAAU,CAAC5T,UAAU,SAAQ,SAAC,mBAK3C,cAACwS,GAAA,EAAM,CACHI,QAASyX,EACTxJ,MAAM,UACNpO,QAAQ,YACRtS,GAAI,CAAEwT,GAAI,EAAGkN,MAAO,QAASvI,QAAS,QAASsT,cAAe,QAAS,SAEvE,cAAC,IAAI,CAAC9F,GAAG,SAASvmB,UAAU,iBAAgB,SAAC,oBAOzE,CC9LA,IAAMssB,GAA2B,CAC7B,CAAEloB,KAAMjE,EAAWosB,gBAAiBhtB,MAAO,YAAaoB,UAAW,cAACkc,GAAgB,KACpF,CAAEzY,KAAMjE,EAAWqsB,cAAejtB,MAAO,UAAWoB,UAAW,cAACie,GAAe,KAC/E,CAAExa,KAAMjE,EAAWssB,eAAgBltB,MAAO,WAAYoB,UAAW,cAAC6c,GAAgB,KAClF,CAAEpZ,KAAMjE,EAAWusB,WAAYntB,MAAO,OAAQoB,UAAW,cAAC4e,GAAa,KACvE,CAAEnb,KAAMjE,EAAWwsB,gBAAiBptB,MAAO,YAAaoB,UAAW,cAAC+gB,GAAgB,KACpF,CAAEtd,KAAMjE,EAAWysB,iBAAkBrtB,MAAO,aAAcoB,UAAW,cAAC+a,GAAkB,KACxF,CAAEtX,KAAMjE,EAAW0sB,MAAOttB,MAAO,QAASoB,UAAW,cAAC6mB,GAAc,MAGzD,SAASsF,KACpB,OACI,cAACrtB,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGwT,MAAO,CAAEjB,OAAQ,cAAe,SACvDoa,GAAejT,KAAI,SAAC9V,GAAI,OACrB,cAAC0P,GAAA,EAAM,CAAiBrS,GAAI,CAAEyrB,cAAe,OAAQvV,QAAS,IAAKiW,WAAY,OAAQ/S,SAAU,KAAM,SACnG,cAAC,IAAI,CAACuM,GAAIhjB,EAAKa,KAAK,SAAEb,EAAKhE,SADlBgE,EAAKa,KAET,KAIzB,C,4CC5BO,SAAe4oB,GAAe,GAAD,gCAEnC,wDAFM,WAA8BC,GAA+B,2FAClD/rB,IAAMC,KAAsB,4BAA6B8rB,GAAe,uCAAE7rB,MAAI,4CAC/F,sBCOc,SAAS8rB,KACpB,MAA8BnY,oBAAkB,GAAM,mBAA/C0N,EAAO,KAAEG,EAAU,KAC1B,EAA0B7N,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KACtB,EAAwCF,oBAAkB,GAAM,mBAAzD8N,EAAY,KAAEC,EAAe,KAE9BzN,EAAmBC,KAAW,CAChC7T,MAAO6T,OACFI,IAAI,GAAI,0DACRC,QAAQ9B,GAAe,wCAOhC,EAAgEmC,aAAQ,CACpEC,SAAUC,aAAYb,GACtBU,cANqC,CACrCtU,MAAO,MAGHkR,EAAO,EAAPA,QAASwD,EAAY,EAAZA,aAA2BC,EAAM,EAAnBC,UAAaD,OAAUG,EAAK,EAALA,MAKhD4W,EAAiB,iDAAG,WAAOC,GAA2B,2EAEnC,OAFmC,SAEpDxK,GAAW,GAAM,SACXoK,GAAeI,GAAY,KAAD,EAChCtK,GAAgB,GAAM,gDAEtB7N,EAAS,KAAEhS,SAAW,iDAAiD,QAG/D,OAH+D,UAEvE2f,GAAW,GACXrM,IAAQ,4EAEf,gBAXsB,sCAajBC,EAAQ,iDAAG,WAAO6W,GAA+B,2EACnDF,EAAkB,CAAE1rB,MAAO4rB,EAAa5rB,MAAO6rB,cAAc,EAAMC,mBAAoB,IAAK,2CAC/F,gBAFa,sCASd,OACI,uBAAM/W,SAAUL,EAAaK,GAAU,UACnC,8BACI,cAAC,KAAU,CACPQ,KAAK,QACLrE,QAASA,EACTsE,OAAQ,kBAAGC,EAAK,EAALA,MAAK,OACZ,cAAClF,GAAA,EAAS,2BAAMkF,GAAK,IAAEtW,GAAI,CAAE0gB,MAAO,WAAarP,MAAM,QAAQE,WAAS,EAACxP,KAAK,QAAQuP,OAAO,SACzFmF,WAAY,CACRC,aACI,cAACC,GAAA,EAAc,CAACjD,SAAS,MAAK,SAC1B,cAACkD,GAAA,EAAU,CAACC,KAAK,MAAK,SAClB,cAAC,KAAe,SAIhCzC,MAAOmC,QAAQf,EAAO3U,OAAQ2V,WAAwB,QAAd,EAAEhB,EAAO3U,aAAK,aAAZ,EAAcwB,UAAW,MAGnF,gCACI,cAACgQ,GAAA,EAAM,CAACC,QAAQ,WAAW+O,SAAUQ,EAAS9f,KAAK,SAAS/B,GAAI,CAAEqqB,gBAAiB,QAAS3J,MAAO,UAAWlO,UAAW,QAAS,SAC7HqP,EAAU,eAAiB,cAEhC,cAACc,GAAA,EAAQ,CAAC5M,KAAMkM,EAAc5f,QAAQ,cAAcugB,iBAAkB,IAAM5M,QA5BpE,SAACvE,EAAsCoR,GACxC,cAAXA,GACJX,GAAgB,EACpB,OA2BS9N,GAAS,cAAChB,GAAY,CAACE,WAAYN,GAAkB4E,QAAQ,SAAExD,MAG5E,C,yBClEMqV,GAA2B,CAC7B,CAAEjmB,KAAMjE,EAAW8lB,KAAM1mB,MAAO,OAAQoB,UAAW,cAAC4kB,GAAQ,KAC5D,CAAEnhB,KAAMjE,EAAWmqB,MAAO/qB,MAAO,WAAYoB,UAAW,cAACP,EAAS,KAClE,CAAEgE,KAAMjE,EAAWukB,SAAUnlB,MAAO,WAAYoB,UAAW,cAAC6hB,GAAY,KACxE,CAAEpe,KAAMjE,EAAWmlB,KAAM/lB,MAAO,OAAQoB,UAAW,cAACqmB,GAAQ,KAC5D,CAAE5iB,KAAMjE,EAAWynB,QAASroB,MAAO,YAAaoB,UAAW,cAAConB,GAAa,KACzE,CAAE3jB,KAAMjE,EAAWoqB,QAAShrB,MAAO,UAAWoB,UAAW,cAACqjB,GAAW,MAG1D,SAASwJ,KACpB,IAAMrJ,EAAWC,cAEjB,OACI,eAAC3kB,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGK,UAAU,SAAQ,UAC1C,eAACP,EAAA,EAAI,CAACM,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAGC,UAAU,SAAQ,UACxC,cAAC4T,GAAA,EAAU,CAACzT,GAAI,CAAEsR,OAAQ,aAAc4E,QAAS,cAAe+Q,SAAU,GAAI9Q,WAAY,IAAKuU,WAAY,GAAI,SAAC,YAGhH,cAACjX,GAAA,EAAU,CAACnB,QAAQ,QAAQvS,UAAW,IAAI,SAAC,qBAG5C,cAAC0T,GAAA,EAAU,CAACnB,QAAQ,QAAQvS,UAAW,IAAI,SAAC,mBAG5C,uBACA,eAAC0T,GAAA,EAAU,CAACnB,QAAQ,QAAQvS,UAAW,IAAI,UACvC,iCAAQ,WAAe,uBAE3B,eAAC0T,GAAA,EAAU,CAACnB,QAAQ,QAAQvS,UAAW,IAAI,UACvC,iCAAQ,WAAe,0BAG/B,cAAClB,EAAA,EAAI,CAACM,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAE,SACrB,eAACf,EAAA,EAAI,CAACC,WAAS,EAACE,UAAU,SAAS6kB,aAAa,SAAQ,UACpD,cAACpQ,GAAA,EAAU,CAACzT,GAAI,CAAEsR,OAAQ,aAAc4E,QAAS,cAAe+Q,SAAU,GAAI9Q,WAAY,KAAM,SAAC,iBAGjG,cAAC0W,GAAA,EAAI,UACApD,GAAehR,KAAI,SAAC9V,GAAI,OACrB,eAACmqB,GAAA,EAAc,CAAiB9sB,GAAI,CAAEkW,QAAS,KAAOzD,QAAS,WAAQ8Q,EAAS5gB,EAAKa,MAAOugB,OAAOC,OAAO,EAAG,EAAG,EAAE,UAC9G,cAAC+I,GAAA,EAAY,CAAC/sB,GAAI,CAAEoZ,SAAU,OAAQ1Z,SAAU,QAAS,SACrD,cAAC,KAAmB,CAACM,GAAI,CAAEinB,SAAU,QAAU+F,UAAU,cAC9C,WAEf,cAACC,GAAA,EAAY,CAACC,QAASvqB,EAAKhE,UALXgE,EAAKa,KAMT,WAKjC,eAAC3E,EAAA,EAAI,CAACM,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAGC,UAAU,SAASG,GAAI,CAAEkW,QAAS,QAAS,UACjE,cAACzC,GAAA,EAAU,CAACzT,GAAI,CAAEsR,OAAQ,aAAc4E,QAAS,cAAe+Q,SAAU,GAAI9Q,WAAY,KAAM,SAAC,mBAGjG,cAAC1C,GAAA,EAAU,CAACnB,QAAQ,QAAQvS,UAAW,IAAI,SAAC,0EAG5C,cAACusB,GAAgB,SAIjC,C,OCtEe,SAASa,GAAY,GAAgD,IAA9C/a,EAAQ,EAARA,SAAUzT,EAAK,EAALA,MAE5C,OADAyuB,SAASzuB,MAAQA,GAAS,QAEtB,qCACI,cAACirB,GAAU,IACX,cAACsC,GAAW,IACZ,cAACzsB,EAAA,EAAS,CAACL,UAAU,mBAAkB,SAClCgT,IAEL,cAACwa,GAAM,MAGnB,CCde,SAASS,GAAa,GAAgD,IAA9Cjb,EAAQ,EAARA,SAAUzT,EAAK,EAALA,MAE7C,OADAyuB,SAASzuB,MAAQA,GAAS,MAEtB,qCACI,cAACirB,GAAU,IACVxX,EACD,cAACwa,GAAM,MAInB,CCXe,SAASU,GAAe,GAAsD,IACrFja,EADiCjB,EAAQ,EAARA,SAAUkB,EAAU,EAAVA,WAE/C,GAAQA,IACCN,GAAkBO,MACnBF,EAAW,6BAGXA,EAAW,0BAGnB,OACI,cAACxU,EAAA,EAAI,CAACC,WAAS,EACXE,UAAU,MACVE,eAAe,SACfsU,GAAIF,IAAeN,GAAkBO,MAAQ,EAAI,EAAE,SAEnD,cAACE,GAAA,EAAU,CACPnB,QAASgB,IAAeN,GAAkBO,MAAQ,KAAO,QACzDxT,UAAW,OACXX,UAAWiU,EAAS,SAEnBjB,KAIjB,CCpBe,SAASmb,KACpB,IAAMC,EAAkB,IAAIC,gBAAgB1J,OAAO2J,SAAS9qB,QACtD0c,EAASqO,OAAOC,YAAYJ,EAAgBK,WAClD,EAA8B1Z,oBAAkB,GAAM,mBAA/C0N,EAAO,KAAEG,EAAU,KAC1B,EAA0B7N,mBAAwB,MAAK,mBAAhDC,EAAK,KAAEC,EAAQ,KAEhByZ,EAA4B,iDAAG,wFAI+B,OAJ/B,SAE7B9L,GAAW,GACX3N,EAAS,MACT3N,QAAQC,IAAI,eAAgBonB,mBAAmBzO,EAAO1e,OAAM,SACtDD,EAAkB2e,EAAO1e,KAAM0e,EAAOze,OAAM,uDAElDwT,EAAS,KAAEhS,SAAW,yBAAyB,QAE7B,OAF6B,UAE/C2f,GAAW,GAAO,4EAEzB,kBAXiC,mCAkBlC,OALAhH,qBAAU,WACN8S,GAEJ,GAAG,IAGC,eAACruB,EAAA,EAAS,CAACC,SAAS,KAAKN,UAAU,mBAAkB,UACjD,cAACV,EAAU,CACPC,MAAM,qBACNC,KAAK,iGAERijB,EAAU,cAACJ,GAAO,IAEfrN,EAAQ,cAAChB,GAAY,CAACE,WAAYN,GAAkBO,MAAM,SAAEa,IAExD,cAACkZ,GAAc,CAACha,WAAYN,GAAkBO,MAAM,SAAC,wEAMzE,CC9Ce,SAASya,KAEpB,OACI,qCACI,qBAAK5uB,UAAU,sBAAqB,SAAC,2BACrC,4BAAG,oCAGH,uBACA,uBACA,qBAAKA,UAAU,mBAAkB,SAAC,0BAClC,uBACA,cAACqU,GAAA,EAAU,CAACnB,QAAQ,KAAKvS,UAAW,KAAMX,UAAU,mBAAkB,SAAC,gBAGvE,cAACqU,GAAA,EAAU,CAACnB,QAAQ,KAAKvS,UAAW,KAAMX,UAAU,mBAAkB,SAAC,0BAGvE,uBACA,qBAAKA,UAAU,mBAAkB,SAAC,6BAClC,uBACA,cAACqU,GAAA,EAAU,CAAC1T,UAAW,IAAKX,UAAU,sBAAsBY,GAAI,CAAEH,UAAW,UAAW,SAAC,2BAGzF,uBACA,qBAAKT,UAAU,mBAAkB,SAAC,0BAG9C,CCDe,SAAS6uB,KACpB,IAAQrG,EAASppB,GAAiB,SAAAoU,GAAK,OAAIA,EAAMgV,IAAI,IAA7CA,KAEFsG,EAAgC,CAClC,CAAE1qB,KAAMjE,EAAWmqB,MAAO/qB,MAAO,WAAYoB,UAAW,cAACP,EAAS,KAClE,CAAEgE,KAAMjE,EAAWoqB,QAAShrB,MAAO,UAAWoB,UAAW,cAACqjB,GAAW,KACrE,CAAE5f,KAAMjE,EAAW8lB,KAAM1mB,MAAO,OAAQoB,UAAW,cAAC4kB,GAAQ,KAC5D,CAAEnhB,KAAMjE,EAAWukB,SAAUnlB,MAAO,WAAYoB,UAAW,cAAC6hB,GAAY,KACxE,CAAEpe,KAAMjE,EAAWmlB,KAAM/lB,MAAO,OAAQoB,UAAW,cAACqmB,GAAQ,KAC5D,CAAE5iB,KAAMjE,EAAW4uB,QAASxvB,MAAO,WAAYoB,UAAW,cAACiuB,GAAM,KACjE,CAAExqB,KAAMjE,EAAWynB,QAASroB,MAAO,YAAaoB,UAAW,cAAConB,GAAa,KACzE,CAAE3jB,KAAMjE,EAAWyC,MAAOrD,MAAO,UAAWoB,UAAW,cAAC2lB,GAAS,KACjE,CAAEliB,KAAMjE,EAAWqmB,SAAUjnB,MAAO,UAAWoB,UAAW,cAAComB,GAAY,KACvE,CAAE3iB,KAAMjE,EAAW2mB,kBAAmBvnB,MAAO,wBAAyBoB,UAAW,cAAC8lB,GAAoB,KACtG,CAAEriB,KAAMjE,EAAW6uB,cAAezvB,MAAO,0BAA2BoB,UAAW,cAACwtB,GAAgB,KAChG,CAAE/pB,KAAM,IAAK7E,MAAO,sBAAuBoB,UAAW,cAACsjB,GAAS,CAACve,OAAO,MAAMzC,QAAQ,4CAGpFgsB,EAAiC,CACnC,CAAE7qB,KAAMjE,EAAWgqB,aAAc5qB,MAAO,eAAgBoB,UAAW,cAACwoB,GAAe,KACnF,CAAE/kB,KAAMjE,EAAWiqB,gBAAiB7qB,MAAO,kBAAmBoB,UAAW,cAACkpB,GAAkB,KAC5F,CAAEzlB,KAAMjE,EAAW+pB,QAAS3qB,MAAO,UAAWoB,UAAW,cAACqpB,GAAW,KACrE,CAAE5lB,KAAMjE,EAAW+uB,iBAAkB3vB,MAAO,mBAAoBoB,UAAW,cAAC0nB,GAAe,MAGzF8G,EAA4B,CAC9B,CAAE/qB,KAAMjE,EAAWysB,iBAAkBrtB,MAAO,aAAcoB,UAAW,cAAC+a,GAAkB,KACxF,CAAEtX,KAAMjE,EAAWosB,gBAAiBhtB,MAAO,WAAYoB,UAAW,cAACkc,GAAgB,KACnF,CAAEzY,KAAMjE,EAAWqsB,cAAejtB,MAAO,UAAWoB,UAAW,cAACie,GAAe,KAC/E,CAAExa,KAAMjE,EAAWssB,eAAgBltB,MAAO,WAAYoB,UAAW,cAAC6c,GAAgB,KAClF,CAAEpZ,KAAMjE,EAAWusB,WAAYntB,MAAO,OAAQoB,UAAW,cAAC4e,GAAa,KACvE,CAAEnb,KAAMjE,EAAWwsB,gBAAiBptB,MAAO,YAAaoB,UAAW,cAAC+gB,GAAgB,KACpF,CAAEtd,KAAMjE,EAAW0sB,MAAOttB,MAAO,aAAcoB,UAAW,cAAC,GAAS,MAGxE,OACa,OAAT6nB,EACI,cAAC,IAAM,UAECsG,EAAoBzV,KAAI,SAAC+V,GACrB,OACI,cAAC,IAAK,CAAkBhrB,KAAMgrB,EAAMhrB,KAAMirB,QACtC,cAACpB,GAAY,CAAC1uB,MAAO6vB,EAAM7vB,MAAM,SAAE6vB,EAAMzuB,aADjCyuB,EAAMhrB,KAI1B,MAIRokB,EAAK8G,MAAMC,SAAStvB,EAAMuvB,OACtB,cAAC,IAAM,UAECV,EAAoBxU,OAAO2U,GAAsB3U,OAAO6U,GAAiB9V,KAAI,SAAC+V,GAC1E,OACI,cAAC,IAAK,CAAkBhrB,KAAMgrB,EAAMhrB,KAAMirB,QACtC,cAACtB,GAAW,UAAEqB,EAAMzuB,aADZyuB,EAAMhrB,KAI1B,MAIR,cAAC,IAAM,UAEC0qB,EAAoBxU,OAAO2U,GAAsB5V,KAAI,SAAC+V,GAClD,OACI,cAAC,IAAK,CAAkBhrB,KAAMgrB,EAAMhrB,KAAMirB,QACtC,cAACpB,GAAY,UAAEmB,EAAMzuB,aADbyuB,EAAMhrB,KAI1B,KAIxB,CCpGe,SAASqrB,KACpB,OACI,cAAC,IAAU,UACP,cAACZ,GAAS,KAGtB,CCRA,IAYea,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,E,UCVMQ,GAA0B,CAC5B3H,KAAMzC,KAAKqK,MAAMltB,aAAamtB,QAAQ,SACtC5N,SAAS,EACTzN,MAAO,M,SCFLmb,GAA+B,CACjCvW,sBAAuB,CACnBM,SAAU,GACV2B,kBAAmB,EACnBjY,MAAOmL,GAAU+M,UACjBwU,UAAW,EACX7U,SAAU,EACVgE,eAAgB,GAChBjE,eAAgB,GAEpB3W,QAAS,CACLK,OAAQ5C,EAAgBoR,IACxBhQ,UAAW,KACXuB,iBAAkB,IAEtBwd,SAAS,EACTzN,MAAO,MA6BX,SAAS3O,GAAgBmN,EAAuBvN,GAC5C,OAAOuN,EAAMoG,sBAAsBM,SAASb,KAAI,SAAC9U,GAC7C,OAAIA,EAAUT,KAAOmC,EAAkBnC,GAAWmC,EAC3C1B,CACX,GACJ,CClDA,IAAM4rB,GAA6B,CAC/B3T,oBAAqB,CACjBtC,SAAU,GACV2B,kBAAmB,EACnBjY,MAAOmL,GAAUwhB,WACjBD,UAAW,EACX7U,SAAU,GACVgE,eAAgB,GAChBjE,eAAgB,GAEpBiH,SAAS,EACTzN,MAAO,MAuBX,SAASlL,GAAc0J,EAAqBmJ,GACxC,OAAOnJ,EAAMgJ,oBAAoBtC,SAASb,KAAI,SAACvQ,GAC3C,OAAIA,EAAQhF,KAAO6Y,EAAgB7Y,GAAW6Y,EACvC7T,CACX,GACJ,CAEA,SAAS0nB,GAAchd,EAAqBid,GACxC,OAAOjd,EAAMgJ,oBAAoBtC,SAASmH,QAAO,SAAAvY,GAAO,OAAIA,EAAQhF,KAAO2sB,EAAO5tB,OAAO,GAC7F,CC3CA,IAAMstB,GAA8B,CAChCjR,qBAAsB,CAClBhF,SAAU,GACV2B,kBAAmB,EACnBjY,MAAOmL,GAAU+M,UACjBwU,UAAW,EACX7U,SAAU,EACVgE,eAAgB,GAChBjE,eAAgB,GAEpBuD,QAAS,GACT0D,SAAS,EACTzN,MAAO,MAuCX,SAAS9J,GAAesI,EAAsB6L,GAC1C,OAAO7L,EAAM0L,qBAAqBhF,SAASb,KAAI,SAACjP,GAC5C,OAAIA,EAAStG,KAAOub,EAAiBvb,GAAWub,EACzCjV,CACX,GACJ,CAEA,SAASsmB,GAAeld,EAAsBid,GAC1C,OAAOjd,EAAM0L,qBAAqBhF,SAASmH,QAAO,SAAAjX,GAAQ,OAAIA,EAAStG,KAAO2sB,EAAO5tB,OAAO,GAChG,CC5DA,IAAMstB,GAA4B,CAC9B7R,mBAAoB,CAChBpE,SAAU,GACV2B,kBAAmB,EACnBjY,MAAOmL,GAAUwhB,WACjBD,UAAW,EACX7U,SAAU,GACVgE,eAAgB,GAChBjE,eAAgB,GAEpBiH,SAAS,EACTzN,MAAO,MAuBX,SAAStI,GAAa8G,EAAoBkL,GACtC,OAAOlL,EAAM8K,mBAAmBpE,SAASb,KAAI,SAAC3N,GAC1C,OAAIA,EAAO5H,KAAO4a,EAAe5a,GAAW4a,EACrChT,CACX,GACJ,CAEA,SAASilB,GAAand,EAAoBid,GACtC,OAAOjd,EAAM8K,mBAAmBpE,SAASmH,QAAO,SAAA3V,GAAM,OAAIA,EAAO5H,KAAO2sB,EAAO5tB,OAAO,GAC1F,CC3CA,IAAMstB,GAAoC,CACtCnT,oBAAqB,CACjB9C,SAAU,GACV2B,kBAAmB,EACnBjY,MAAOmL,GAAUwhB,WACjBD,UAAW,EACX7U,SAAU,EACVgE,eAAgB,GAChBjE,eAAgB,GAEpB3W,QAAS,CACLK,OAAQR,GAAqBgP,KAEjC+O,SAAS,EACTzN,MAAO,MA6BX,SAASzM,GAAciL,EAA4BrL,GAC/C,OAAOqL,EAAMwJ,oBAAoB9C,SAASb,KAAI,SAACxS,GAC3C,OAAIA,EAAQ/C,KAAOqE,EAAgBrE,GAAWqE,EACvCtB,CACX,GACJ,CAEA,SAAS+pB,GAAcpd,EAA4Bid,GAC/C,OAAOjd,EAAMwJ,oBAAoB9C,SAASmH,QAAO,SAAAxa,GAAO,OAAIA,EAAQ/C,KAAO2sB,EAAO5tB,OAAO,GAC7F,CCpDA,IAAMstB,GAA0B,CAC5BhJ,iBAAkB,CACdjN,SAAU,GACV2B,kBAAmB,EACnBjY,MAAOmL,GAAU+M,UACjBwU,UAAW,EACX7U,SAAU,EACVgE,eAAgB,GAChBjE,eAAgB,GAEpB3W,QAAS,CACL4I,iBAAkB,IAEtBgV,SAAS,EACTzN,MAAO,MAsBX,SAAS6b,GAAWrd,EAAkB7F,GAClC,OAAO6F,EAAM2T,iBAAiBjN,SAASb,KAAI,SAACnM,GACxC,OAAIA,EAAKpJ,KAAO6J,EAAa7J,GAAW6J,EACjCT,CACX,GACJ,CCzCA,IAAMijB,GAA6B,CAC/BnP,oBAAqB,CACjB9G,SAAU,GACV2B,kBAAmB,EACnBjY,MAAOmL,GAAU+M,UACjBwU,UAAW,EACX7U,SAAU,EACVgE,eAAgB,GAChBjE,eAAgB,GAEpB+M,eAAgB,KAChBxJ,QAAS,GACT7F,OAAQ,GACRrU,QAAS,CACLK,OAAQiI,GAAcsG,OACtBpF,SAAU,GACVyiB,cAAe,IAEnB9I,gBAAgB,EAChBrG,aAAc,KACdsG,kBAAkB,EAClBrG,eAAgB,MA4EpB,SAAS5Q,GAAcwC,EAAqB5C,GACxC,OAAO4C,EAAMwN,oBAAoB9G,SAASb,KAAI,SAACxK,GAC3C,OAAIA,EAAQ/K,KAAO8M,EAAgB9M,GAAW8M,EACvC/B,CACX,GACJ,CC/FO,ICVKkiB,GDUCC,GAAcC,YAAgB,CACvCzI,KRHuB,WAA0D,IAAzDhV,EAAgB,uDAAG2c,GAAcM,EAAkB,uCAC3E,OAAQA,EAAO9tB,MACX,KAAKzC,EAAgB0C,MACjB,OAAO,2BAAK4Q,GAAK,IAAEgV,KAAMiI,EAAO5tB,UACpC,KAAK3C,EAAgBkD,OACjB,OAAO,2BAAKoQ,GAAK,IAAEgV,KAAM,OAC7B,KAAKtoB,EAAgB8C,eACjB,OAAO,2BAAKwQ,GAAK,IAAEwB,MAAOyb,EAAO5tB,UACrC,KAAK3C,EAAgB6C,iBACjB,OAAO,2BAAKyQ,GAAK,IAAEiP,QAASgO,EAAO5tB,UACvC,QAAS,OAAO2Q,EAExB,EQRIjP,UPU4B,WAAoF,IAAnFiP,EAAqB,uDAAG2c,GAAcM,EAAuB,uCAC1F,OAAQA,EAAO9tB,MACX,KAAKJ,EAAqByC,eACtB,OAAO,2BAAKwO,GAAK,IAAEoG,sBAAuB6W,EAAO5tB,UACrD,KAAKN,EAAqBwC,oBACtB,OAAO,2BAAKyO,GAAK,IAAEwB,MAAOyb,EAAO5tB,UACrC,KAAKN,EAAqBuC,sBACtB,OAAO,2BAAK0O,GAAK,IAAEiP,QAASgO,EAAO5tB,UACvC,KAAKN,EAAqBiD,mBACtB,OAAO,2BAAKgO,GAAK,IAAEoG,sBAAsB,2BAAMpG,EAAMoG,uBAAqB,IAAEiC,kBAAmB4U,EAAO5tB,YAC1G,KAAKN,EAAqBoD,4BACtB,OAAO,2BAAK6N,GAAK,IAAE3O,QAAQ,2BAAM2O,EAAM3O,SAAO,IAAEK,OAAQurB,EAAO5tB,YACnE,KAAKN,EAAqBsD,6BACtB,OAAO,2BAAK2N,GAAK,IAAE3O,QAAQ,2BAAM2O,EAAM3O,SAAO,IAAEnB,UAAW+sB,EAAO5tB,YACtE,KAAKN,EAAqBwD,8BACtB,OAAO,2BAAKyN,GAAK,IAAE3O,QAAQ,2BAAM2O,EAAM3O,SAAO,IAAEI,iBAAkBwrB,EAAO5tB,YAC7E,KAAKN,EAAqB2D,oCACtB,OAAO,2BAAKsN,GAAK,IAAEoG,sBAAsB,2BAAMpG,EAAMoG,uBAAqB,IAAEM,SAAU7T,GAAgBmN,EAAOid,EAAO5tB,aACxH,KAAKN,EAAqB6D,iBACtB,OAAO,2BAAKoN,GAAK,IAAEoG,sBAAsB,2BAAMpG,EAAMoG,uBAAqB,IAAEM,SAAS,CAAEuW,EAAO5tB,SAAO,oBAAK2Q,EAAMoG,sBAAsBM,eAC1I,KAAK3X,EAAqB+D,iBACtB,OAAO,2BAAKkN,GAAK,IAAEoG,sBAAsB,2BAAMpG,EAAMoG,uBAAqB,IAAEM,SAAU7T,GAAgBmN,EAAOid,EAAO5tB,aACxH,QAAS,OAAO2Q,EAExB,EOjCI1K,QNI0B,WAA8E,IAA7E0K,EAAmB,uDAAG2c,GAAcM,EAAqB,uCACpF,OAAQA,EAAO9tB,MACX,KAAKsE,GAAmBoC,cACpB,OAAO,2BAAKmK,GAAK,IAAEgJ,oBAAqBiU,EAAO5tB,UACnD,KAAKoE,GAAmBmC,kBACpB,OAAO,2BAAKoK,GAAK,IAAEwB,MAAOyb,EAAO5tB,UACrC,KAAKoE,GAAmBkC,oBACpB,OAAO,2BAAKqK,GAAK,IAAEiP,QAASgO,EAAO5tB,UACvC,KAAKoE,GAAmB0C,iBACpB,OAAO,2BAAK6J,GAAK,IAAEgJ,oBAAoB,2BAAMhJ,EAAMgJ,qBAAmB,IAAEX,kBAAmB4U,EAAO5tB,YACtG,KAAKoE,GAAmB4C,eACpB,OAAO,2BAAK2J,GAAK,IAAEgJ,oBAAoB,2BAAMhJ,EAAMgJ,qBAAmB,IAAEtC,SAAS,CAAEuW,EAAO5tB,SAAO,oBAAK2Q,EAAMgJ,oBAAoBtC,eACpI,KAAKjT,GAAmB8C,eACpB,OAAO,2BAAKyJ,GAAK,IAAEgJ,oBAAoB,2BAAMhJ,EAAMgJ,qBAAmB,IAAEtC,SAAUpQ,GAAc0J,EAAOid,EAAO5tB,aAClH,KAAKoE,GAAmBgD,eACpB,OAAO,2BAAKuJ,GAAK,IAAEgJ,oBAAoB,2BAAMhJ,EAAMgJ,qBAAmB,IAAEtC,SAAUsW,GAAchd,EAAOid,OAC3G,QAAS,OAAOjd,EAExB,EMrBIpJ,SLI2B,WAAiF,IAAhFoJ,EAAoB,uDAAG2c,GAAcM,EAAsB,uCACvF,OAAQA,EAAO9tB,MACX,KAAKsG,GAAoB0B,cACrB,OAAO,2BAAK6I,GAAK,IAAE0L,qBAAsBuR,EAAO5tB,UACpD,KAAKoG,GAAoB4B,oBACrB,OAAO,2BACA2I,GAAK,IACR0L,qBAAqB,2BACduR,EAAO5tB,SAAO,IACjBqX,SAAU1G,EAAM0L,qBAAqBhF,SAASI,OAAOmW,EAAO5tB,QAAQqX,cAGhF,KAAKjR,GAAoByB,mBACrB,OAAO,2BAAK8I,GAAK,IAAEwB,MAAOyb,EAAO5tB,UACrC,KAAKoG,GAAoBwB,qBACrB,OAAO,2BAAK+I,GAAK,IAAEiP,QAASgO,EAAO5tB,UACvC,KAAKoG,GAAoB8B,kBACrB,OAAO,2BACAyI,GAAK,IACR0L,qBAAqB,2BAAM1L,EAAM0L,sBAAoB,IAAErD,kBAAmB4U,EAAO5tB,YAEzF,KAAKoG,GAAoBgC,gBACrB,OAAO,2BACAuI,GAAK,IAAE0L,qBAAqB,2BACxB1L,EAAM0L,sBAAoB,IAAEhF,SAAS,CAAEuW,EAAO5tB,SAAO,oBAAK2Q,EAAM0L,qBAAqBhF,eAGpG,KAAKjR,GAAoBkC,gBACrB,OAAO,2BAAKqI,GAAK,IAAE0L,qBAAqB,2BAAM1L,EAAM0L,sBAAoB,IAAEhF,SAAUhP,GAAesI,EAAOid,EAAO5tB,aACrH,KAAKoG,GAAoBoC,gBACrB,OAAO,2BAAKmI,GAAK,IAAE0L,qBAAqB,2BAAM1L,EAAM0L,sBAAoB,IAAEhF,SAAUwW,GAAeld,EAAOid,OAE9G,QAAS,OAAOjd,EAExB,EKrCI9H,OJEyB,WAA2E,IAA1E8H,EAAkB,uDAAG2c,GAAcM,EAAoB,uCACjF,OAAQA,EAAO9tB,MACX,KAAK4H,GAAkB0B,YACnB,OAAO,2BAAKuH,GAAK,IAAE8K,mBAAoBmS,EAAO5tB,UAClD,KAAK0H,GAAkByB,iBACnB,OAAO,2BAAKwH,GAAK,IAAEwB,MAAOyb,EAAO5tB,UACrC,KAAK0H,GAAkBwB,mBACnB,OAAO,2BAAKyH,GAAK,IAAEiP,QAASgO,EAAO5tB,UACvC,KAAK0H,GAAkBgC,gBACnB,OAAO,2BAAKiH,GAAK,IAAE8K,mBAAmB,2BAAM9K,EAAM8K,oBAAkB,IAAEzC,kBAAmB4U,EAAO5tB,YACpG,KAAK0H,GAAkBkC,cACnB,OAAO,2BAAK+G,GAAK,IAAE8K,mBAAmB,2BAAM9K,EAAM8K,oBAAkB,IAAEpE,SAAS,CAAEuW,EAAO5tB,SAAO,oBAAK2Q,EAAM8K,mBAAmBpE,eACjI,KAAK3P,GAAkBoC,cACnB,OAAO,2BAAK6G,GAAK,IAAE8K,mBAAmB,2BAAM9K,EAAM8K,oBAAkB,IAAEpE,SAAUxN,GAAa8G,EAAOid,EAAO5tB,aAC/G,KAAK0H,GAAkBsC,cACnB,OAAO,2BAAK2G,GAAK,IAAE8K,mBAAmB,2BAAM9K,EAAM8K,oBAAkB,IAAEpE,SAAUyW,GAAand,EAAOid,OACxG,QAAS,OAAOjd,EAExB,EInBI3M,QHI0B,WAAmG,IAAlG2M,EAA0B,uDAAG2c,GAAcM,EAA4B,uCAClG,OAAQA,EAAO9tB,MACX,KAAKgC,GAA0B0C,qBAC3B,OAAO,2BAAKmM,GAAK,IAAEwJ,oBAAqByT,EAAO5tB,UACnD,KAAK8B,GAA0BgD,2BAC3B,OAAO,2BAAK6L,GAAK,IAAEwJ,oBAAoB,2BAAMyT,EAAO5tB,SAAO,IAAEqX,SAAU1G,EAAMwJ,oBAAoB9C,SAASI,OAAOmW,EAAO5tB,QAAQqX,cACpI,KAAKvV,GAA0ByC,0BAC3B,OAAO,2BAAKoM,GAAK,IAAEwB,MAAOyb,EAAO5tB,UACrC,KAAK8B,GAA0BwC,4BAC3B,OAAO,2BAAKqM,GAAK,IAAEiP,QAASgO,EAAO5tB,UACvC,KAAK8B,GAA0BkD,yBAC3B,OAAO,2BAAK2L,GAAK,IAAEwJ,oBAAoB,2BAAMxJ,EAAMwJ,qBAAmB,IAAEnB,kBAAmB4U,EAAO5tB,YACtG,KAAK8B,GAA0BoD,kCAC3B,OAAO,2BAAKyL,GAAK,IAAE3O,QAAQ,2BAAM2O,EAAM3O,SAAO,IAAEK,OAAQurB,EAAO5tB,YACnE,KAAK8B,GAA0ByD,uCAC3B,OAAO,2BAAKoL,GAAK,IAAEwJ,oBAAoB,2BAAMxJ,EAAMwJ,qBAAmB,IAAE9C,SAAU3R,GAAciL,EAAOid,EAAO5tB,aAClH,KAAK8B,GAA0B2D,uBAC3B,OAAO,2BAAKkL,GAAK,IAAEwJ,oBAAoB,2BAAMxJ,EAAMwJ,qBAAmB,IAAE9C,SAAS,CAAEuW,EAAO5tB,SAAO,oBAAK2Q,EAAMwJ,oBAAoB9C,eACpI,KAAKvV,GAA0B6D,uBAC3B,OAAO,2BAAKgL,GAAK,IAAEwJ,oBAAoB,2BAAMxJ,EAAMwJ,qBAAmB,IAAE9C,SAAU3R,GAAciL,EAAOid,EAAO5tB,aAClH,KAAK8B,GAA0B+D,uBAC3B,OAAO,2BAAK8K,GAAK,IAAEwJ,oBAAoB,2BAAMxJ,EAAMwJ,qBAAmB,IAAE9C,SAAU0W,GAAcpd,EAAOid,OAC3G,QAAS,OAAOjd,EAExB,EG3BItG,KFGuB,WAAqE,IAApEsG,EAAgB,uDAAG2c,GAAcM,EAAkB,uCAC3E,OAAQA,EAAO9tB,MACX,KAAKkJ,GAAgB2B,UACjB,OAAO,2BAAKgG,GAAK,IAAE2T,iBAAkBsJ,EAAO5tB,UAChD,KAAKgJ,GAAgBgC,kCACjB,OAAO,2BAAK2F,GAAK,IAAE2T,iBAAiB,2BAAM3T,EAAM2T,kBAAgB,IAAEjN,SAAU2W,GAAWrd,EAAOid,EAAO5tB,aACzG,KAAKgJ,GAAgBkC,yBACjB,OAAO,2BAAKyF,GAAK,IAAE3O,QAAQ,2BAAM2O,EAAM3O,SAAO,IAAE4I,iBAAkBgjB,EAAO5tB,YAC7E,KAAKgJ,GAAgBoC,cACjB,OAAO,2BAAKuF,GAAK,IAAE2T,iBAAiB,2BAAM3T,EAAM2T,kBAAgB,IAAEtL,kBAAmB4U,EAAO5tB,YAChG,KAAKgJ,GAAgB0B,eACjB,OAAO,2BAAKiG,GAAK,IAAEwB,MAAOyb,EAAO5tB,UACrC,KAAKgJ,GAAgByB,iBACjB,OAAO,2BAAKkG,GAAK,IAAEiP,QAASgO,EAAO5tB,UAEvC,QAAS,OAAO2Q,EAExB,EEnBI3E,QDS0B,WAA8E,IAA7E2E,EAAmB,uDAAG2c,GAAcM,EAAqB,uCACpF,OAAQA,EAAO9tB,MACX,KAAKyK,GAAmB+B,cACpB,OAAO,2BAAKqE,GAAK,IAAEwN,oBAAqByP,EAAO5tB,UACnD,KAAKuK,GAAmByC,oBACpB,OAAO,2BACA2D,GAAK,IACRwN,oBAAoB,2BACbyP,EAAO5tB,SAAO,IACjBqX,SAAU1G,EAAMwN,oBAAoB9G,SAASI,OAAOmW,EAAO5tB,QAAQqX,cAG/E,KAAK9M,GAAmB8B,kBACpB,OAAO,2BAAKsE,GAAK,IAAEoO,eAAgB6O,EAAO5tB,UAC9C,KAAKuK,GAAmB6B,oBACpB,OAAO,2BAAKuE,GAAK,IAAEyU,iBAAkBwI,EAAO5tB,UAChD,KAAKuK,GAAmBoC,kBACpB,OAAO,2BAAKgE,GAAK,IAAEmO,aAAc8O,EAAO5tB,UAC5C,KAAKuK,GAAmBmC,oBACpB,OAAO,2BAAKiE,GAAK,IAAEwU,eAAgByI,EAAO5tB,UAC9C,KAAKuK,GAAmB2C,iBACpB,OAAO,2BACAyD,GAAK,IACRwN,oBAAoB,2BAAMxN,EAAMwN,qBAAmB,IAAEnF,kBAAmB4U,EAAO5tB,YAEvF,KAAKuK,GAAmB6C,0BACpB,OAAO,2BACAuD,GAAK,IACR3O,QAAQ,2BAAM2O,EAAM3O,SAAO,IAAEK,OAAQurB,EAAO5tB,YAEpD,KAAKuK,GAAmBgD,0BACpB,OAAO,2BACAoD,GAAK,IACR3O,QAAQ,2BAAM2O,EAAM3O,SAAO,IAAEwJ,SAAUoiB,EAAO5tB,YAEtD,KAAKuK,GAAmBkD,4BACpB,OAAO,2BACAkD,GAAK,IACRwN,oBAAoB,2BAAMxN,EAAMwN,qBAAmB,IAAEvB,eAAgBgR,EAAO5tB,YAEpF,KAAKuK,GAAmBqC,oBACpB,IAAIyhB,EAAiBT,EAAO5tB,QAE5B,OADAquB,EAAeC,QAAQ,CAAErtB,GAAI,EAAGkT,KAAM,QAC/B,2BAAKxD,GAAK,IAAEuL,QAASmS,IAChC,KAAK9jB,GAAmBuC,qBACpB,OAAO,2BAAK6D,GAAK,IAAE0F,OAAQuX,EAAO5tB,UACtC,KAAKuK,GAAmBoD,oBACpB,OAAO,2BAAKgD,GAAK,IAAE+U,eAAgBkI,EAAO5tB,UAC9C,KAAKuK,GAAmBsD,mBACpB,OAAO,eAAK8C,GAChB,KAAKpG,GAAmByD,+BACpB,OAAO,2BACA2C,GAAK,IAAEwN,oBAAoB,2BACvBxN,EAAMwN,qBAAmB,IAAE9G,SAAUlJ,GAAcwC,EAAOid,EAAO5tB,aAGhF,KAAKuK,GAAmB2D,eACpB,OAAO,2BACAyC,GAAK,IAAEwN,oBAAoB,2BACvBxN,EAAMwN,qBAAmB,IAAE9G,SAAS,CAClCuW,EAAO5tB,SAAO,oBAAK2Q,EAAMwN,oBAAoB9G,eAG9D,KAAK9M,GAAmB6D,eACpB,OAAO,2BACAuC,GAAK,IAAEwN,oBAAoB,2BACvBxN,EAAMwN,qBAAmB,IAAE9G,SAAUlJ,GAAcwC,EAAOid,EAAO5tB,aAGhF,QAAS,OAAO2Q,EAExB,I,mBE5FC,SANWud,KAAW,qBAAXA,IAAW,iCAAXA,IAAW,2BAAXA,EAAW,mBAAXA,EAAW,+BAMtB,CANWA,QAAW,KCIhB,IAAMK,GAAe,6CAmEvB,OAnEuB,uCACxB,WACIlwB,IAAMmwB,SAASC,QAAUC,8BAGzBrwB,IAAMswB,aAAaC,QAAQC,IAAG,iDAC1B,WAAMC,GAAM,mFAQP,OAPKC,EAAuB1uB,aAAamtB,QAAQ,WAExCwB,EAAO9L,KAAKqK,MAAMwB,GACxBD,EAAO5vB,QAAU,CACb,cAAgB,UAAD,OAAY8vB,EAAKjI,OAAOxnB,aACvC,OAAU,qBAEjB,kBACMuvB,GAAM,2CAChB,mDAXyB,IAY1B,SAAA3c,GACI8c,QAAQC,OAAO/c,EACnB,IAGJ9T,IAAMswB,aAAaQ,SAASN,KAAI,SAAUM,GACtC,OAAOA,CACX,GAAC,iDACG,WAAgBhd,GAAiB,wFACxBA,EAAMtP,OAAO,CAAD,gBACQ,GAAjBusB,EAAe,GAAG,EAAD,OAEbjd,EAAMgd,SAAStsB,SAAWqrB,GAAYmB,UAAS,gBACM,MAArDD,EAAe,sCACT,IAAIE,MAAQ,KAAD,KAEjBnd,EAAMgd,SAAStsB,SAAWqrB,GAAYqB,aAAY,iBAGmB,OAFrEH,EAAe,2CAETL,EAAuB7L,KAAKqK,MAAMltB,aAAamtB,QAAQ,SAAS,EAAD,QAC7CluB,EAAkByvB,EAAqBhI,OAAOxnB,YAAawvB,EAAqBhI,OAAOvnB,cAAa,QAIlC,OAJpFI,EAAS,OACfS,aAAa4iB,QAAQ,OAAQC,KAAKC,UAAUvjB,IAG5CvB,IAAMmwB,SAAStvB,QAAQswB,OAAsB,cAAI,UAAY5vB,EAAUmnB,OAAOxnB,YAAY,kBACnFlB,IAAM8T,EAAM2c,SAAO,gEAGxB,IAAIQ,MAAMF,GAAc,KAAD,GAEX,OAFW,UAE7BA,EAAe,GAAG,0BAGlBjd,EAAMtP,OAAM,cACXqrB,GAAY,eAAc,UAQ1BA,GAAYmB,UAAS,UAErBnB,GAAY,aAAY,wBATrB/b,EAAMgd,SAAS,CAAD,oBACVhd,EAAMgd,SAAS5wB,KAAK,CAAD,sBACb,IAAI+wB,MAAMnd,EAAMgd,SAAS5wB,KAAY,OAAG,KAAD,SAE3C,IAAI+wB,MAAM,iDAAiD,KAAD,SAE9D,IAAIA,MAAM,qBAAqB,KAAD,2CAI9B,IAAIA,MAAMnd,EAAMgd,SAAS5wB,KAAY,OAAK,mBAAmB,KAAD,SAE5D,IAAI+wB,MAAM,0BAA0B,KAAD,2DAEpD,mDA1CJ,GA2CL,KAAC,EAnEuB,GCItBG,GHcKC,aAAe,CAClBC,QAASxB,KGbjBI,GAAgBqB,OAEHC,IAASC,WAClB3E,SAAS4E,eAAe,SAGvB3b,OACD,cAAC,IAAQ,CAACqb,MAAOA,GAAM,SACnB,cAAC7C,GAAG,OAIZC,I","file":"static/js/main.a7c05a01.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","import { Grid } from \"@mui/material\";\r\nimport { PageHeaderProps } from './types';\r\nimport './styles.css';\r\n\r\nexport default function PageHeader({ title, text }: PageHeaderProps): JSX.Element {\r\n    return (\r\n        <Grid container spacing={2} direction='column' alignItems={'center'} justifyContent={'center'}>\r\n            <Grid item className=\"grid-item\">\r\n                <h4 className=\"page-header\">{title}</h4>\r\n            </Grid>\r\n            {text &&\r\n                <Grid item className=\"grid-item\">\r\n                    <p className=\"page-subheader\">{text}</p>\r\n                </Grid>}\r\n        </Grid>\r\n    )\r\n};","import { IUser } from \"./user\";\r\n\r\nexport interface IAuth {\r\n    user: IUser;\r\n    roles: string[];\r\n    tokens: {\r\n        accessToken: string;\r\n        refreshToken: string;\r\n    }\r\n}\r\n\r\nexport interface ILoginDto {\r\n    email: string;\r\n    password: string;\r\n    remember: boolean;\r\n}\r\n\r\nexport interface IRegisterDto {\r\n    email: string;\r\n    password: string;\r\n    confirmPassword: string;\r\n}\r\n\r\nexport interface IChangePasswordDto {\r\n    email: string;\r\n    oldPassword: string;\r\n    newPassword: string;\r\n    confirmNewPassword: string;\r\n}\r\n\r\nexport interface IChangeEmailDto {\r\n    existingEmail: string;\r\n    newEmail: string;\r\n    password: string;\r\n}\r\n\r\nexport enum Roles {\r\n    ADMIN = \"Admin\",\r\n    REGISTERED = \"Registered\"\r\n}\r\n\r\nexport interface AuthState {\r\n    auth: null | IAuth;\r\n    loading: boolean;\r\n    error: null | string;\r\n}\r\n\r\nexport enum AuthActionTypes {\r\n    LOGIN = \"LOGIN\",\r\n    LOGOUT = \"LOGOUT\",\r\n    SET_AUTH_ERROR = \"SET_AUTH_ERROR\",\r\n    SET_AUTH_LOADING = \"SET_AUTH_LOADING\"\r\n}\r\n\r\ninterface Login {\r\n    type: AuthActionTypes.LOGIN;\r\n    payload: IAuth;\r\n}\r\n\r\ninterface Logout {\r\n    type: AuthActionTypes.LOGOUT;\r\n    payload: null;\r\n}\r\n\r\ninterface SetErrorAction {\r\n    type: AuthActionTypes.SET_AUTH_ERROR;\r\n    payload: null | string;\r\n}\r\n\r\ninterface SetLoadingAction {\r\n    type: AuthActionTypes.SET_AUTH_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\nexport type AuthAction = Login | Logout | SetErrorAction | SetLoadingAction","export interface IRoute {\r\n    path: string;\r\n    component: JSX.Element;\r\n    title: string;\r\n}\r\n\r\nexport enum RouteNames {\r\n    ABOUT = '/about',\r\n    CONTACT = '/contact',\r\n    CHANGE_EMAIL = '/change-email',\r\n    CHANGE_PASSWORD ='/change-password',\r\n    HOME = \"/\",\r\n    SERVICES = '/services',\r\n    TEAM = '/team',\r\n    TEST_UI = '/test',\r\n    VACANCY = '/vacancy',\r\n    VACANCY_DETAILES = '/vacancy/:vacancyId',\r\n    ERROR = '/error',\r\n    LOGIN = '/login',\r\n    PROFILE = \"/profile\",\r\n    REGISTER = '/register',\r\n    REGISTER_COMPLETE = '/register-complete',\r\n    EMAIL_CONFIRM = '/email-confirm',\r\n    USERS = '/users',\r\n    ADMIN_CANDIDATES = '/admin/candidates',\r\n    ADMIN_COUNTRIES = '/admin/countries',\r\n    ADMIN_OFFICES = '/admin/offices',\r\n    ADMIN_SERVICES = '/admin/services',\r\n    ADMIN_TEAM = '/admin/team',\r\n    ADMIN_VACANCIES = '/admin/vacancies'\r\n}\r\n","import { Box, Container, Grid } from \"@mui/material\";\r\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\r\nimport './styles.css';\r\n\r\nexport default function AboutPage(): JSX.Element {\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container' >\r\n            <PageHeader\r\n                title=\"ABOUT US\"\r\n                text=\"Magnam dolores commodi suscipit. Necessitatibus eius consequatur ex aliquid fuga eum quidem. Sit sint consectetur velit. Quisquam quos quisquam cupiditate. Et nemo qui impedit suscipit alias ea. Quia fugiat sit in iste officiis commodi quidem hic quas.\"\r\n            />\r\n            <Grid container spacing={2} alignItems=\"center\" className=\"page-chapter-container\">\r\n                <Grid item xs={12} md={6} textAlign='center'>\r\n                    <Box component=\"img\" sx={{ width: '100%' }} alt=\"About us img.\" src=\"https://volodymyr57.somee.com/Uploads/about.jpg\" />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <h3>Voluptatem dignissimos <strong>provident quasi corporis voluptates</strong></h3>\r\n                    <p>\r\n                        <i>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</i>\r\n                    </p>\r\n                    <p>\r\n                        Ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident.\r\n                    </p>\r\n                    <Box component=\"img\" sx={{ width: '100%' }} alt=\"About us 2nd img.\" src=\"https://volodymyr57.somee.com/uploads/about2.jpg\" />\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n","import axios from 'axios';\r\nimport { IAuth, IChangeEmailDto, IChangePasswordDto, ILoginDto, IRegisterDto } from '../types/auth';\r\n\r\n/**\r\n * Changes the email of current user\r\n * @param changeEmailDto<IChangeEmailDto> Object of type IChangeEmailDto\r\n * @returns<string> Success confirmation message\r\n */\r\nexport async function changeEmailAxios(changeEmailDto: IChangeEmailDto): Promise<string> {\r\n    return (await axios.post<string>(\"/account/changeemail\", changeEmailDto)).data;\r\n}\r\n\r\n/**\r\n * Changes the password of current user\r\n * @param changePasswordDto<IChangePasswordDto> Object of type IChangePasswordDto\r\n * @returns<string> Success confirmation message\r\n */\r\nexport async function changePasswordAxios(changePasswordDto: IChangePasswordDto): Promise<string> {\r\n    return (await axios.post<string>(\"/account/changepassword\", changePasswordDto)).data;\r\n}\r\n\r\nexport async function confirmEmailAxios(code: string, email: string) {\r\n    await axios.get(`/account/confirmemail?code=${code}&email=${email}`);\r\n}\r\n\r\nexport async function loginAxios(loginDto: ILoginDto): Promise<IAuth> {\r\n    return (await axios.post<IAuth>(\"/account/login\", loginDto)).data;\r\n}\r\n\r\nexport async function logoutAxios(email: string, token: string) {\r\n    await axios.get(`/account/logout/${email}`, { headers: { Authorization: `Bearer ${token}` } });\r\n}\r\n\r\nexport async function registerAxios(registerDto: IRegisterDto): Promise<IRegisterDto> {\r\n    return (await axios.post<IRegisterDto>(\"/account/register\", registerDto)).data;\r\n}\r\n\r\nexport async function refreshTokenAxios(accessToken: string, refreshToken: string): Promise<IAuth> {\r\n    return (await axios.post<IAuth>(\"/account/refreshtoken\", { accessToken, refreshToken })).data;\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { logoutAxios } from \"../../api/auth\";\r\nimport { AuthAction, AuthActionTypes, IAuth } from \"../../types/auth\";\r\n\r\nexport const login = (authModel: IAuth) => {\r\n    return async (dispatch: Dispatch<AuthAction>) => {\r\n        dispatch({ type: AuthActionTypes.LOGIN, payload: authModel });\r\n    }\r\n}\r\n\r\nexport const logout = (email: string, token: string) => {\r\n    return async (dispatch: Dispatch<AuthAction>) => {\r\n        try {\r\n            dispatch({ type: AuthActionTypes.SET_AUTH_LOADING, payload: true });\r\n            dispatch({ type: AuthActionTypes.SET_AUTH_ERROR, payload: null });\r\n            await logoutAxios(email, token);\r\n        } catch (error) {\r\n            dispatch({ type: AuthActionTypes.SET_AUTH_ERROR, payload: error.message || 'Unknown error.' });\r\n        } finally {\r\n            // remove auth from localStorage and store anyway\r\n            localStorage.removeItem(\"auth\");\r\n            dispatch({ type: AuthActionTypes.LOGOUT, payload: null });\r\n            dispatch({ type: AuthActionTypes.SET_AUTH_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { ISearchResult } from \"./common/searchResult\";\r\nimport { IVacancy } from \"./vacancy\";\r\n\r\nexport interface ICandidate {\r\n    id: number;\r\n    fullName: string;\r\n    email: string;\r\n    phone: string;\r\n    notes: string;\r\n    isDismissed: boolean;\r\n    joinedAt: Date;\r\n    vacancyId: number;\r\n    vacancyDto?: IVacancy;\r\n}\r\n\r\nexport enum CandidateStatus {\r\n    Active,\r\n    Dismissed,\r\n    All\r\n}\r\n\r\nexport interface CandidateFilters {\r\n    active: CandidateStatus;\r\n    vacancyId: number;\r\n    searchInFullName: string;\r\n}\r\n\r\nexport interface CandidateState {\r\n    candidateSearchResult: ISearchResult<ICandidate>;\r\n    filters: CandidateFilters;\r\n    loading: boolean;\r\n    error: null | string;\r\n}\r\n\r\nexport enum CandidateActionTypes {\r\n    GET_CANDIDATES = \"GET_CANDIDATES\",\r\n    GET_CANDIDATE_BY_ID = \"GET_CANDIDATE_BY_ID\",\r\n    SET_CANDIDATE_ERROR = \"SET_CANDIDATE_ERROR\",\r\n    SET_CANDIDATE_LOADING = \"SET_CANDIDATE_LOADING\",\r\n    SET_CANDIDATE_PAGE = \"SET_CANDIDATE_PAGE\",\r\n    SET_CANDIDATE_ACTIVE_FILTER = \"SET_CANDIDATE_ACTIVE_FILTER\",\r\n    SET_CANDIDATE_VACANCY_FILTER = \"SET_CANDIDATE_VACANCY_FILTER\",\r\n    SET_CANDIDATE_SEARCH_CRITERIA = \"SET_CANDIDATE_SEARCH_CRITERIA\",\r\n    UPDATE_CANDIDATE_ISDISMISSED_STATUS = \"UPDATE_CANDIDATE_ISDISMISSED_STATUS\",\r\n    CREATE_CANDIDATE = \"CREATE_CANDIDATE\",\r\n    UPDATE_CANDIDATE = \"UPDATE_CANDIDATE\"\r\n}\r\n\r\ninterface GetCandidatesAction {\r\n    type: CandidateActionTypes.GET_CANDIDATES;\r\n    payload: ISearchResult<ICandidate>;\r\n}\r\n\r\ninterface GetCandidateByIdAction {\r\n    type: CandidateActionTypes.GET_CANDIDATE_BY_ID;\r\n    payload: ICandidate;\r\n}\r\n\r\ninterface SetCandidateErrorAction {\r\n    type: CandidateActionTypes.SET_CANDIDATE_ERROR;\r\n    payload: null | string;\r\n}\r\n\r\ninterface SetCandidateLoadingAction {\r\n    type: CandidateActionTypes.SET_CANDIDATE_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\ninterface SetCandidatePagesAction {\r\n    type: CandidateActionTypes.SET_CANDIDATE_PAGE;\r\n    payload: number;\r\n}\r\n\r\ninterface SetCandidateActiveFilterAction {\r\n    type: CandidateActionTypes.SET_CANDIDATE_ACTIVE_FILTER;\r\n    payload: CandidateStatus;\r\n}\r\n\r\ninterface SetCandidateVacancyFilterAction {\r\n    type: CandidateActionTypes.SET_CANDIDATE_VACANCY_FILTER;\r\n    payload: number;\r\n}\r\n\r\ninterface SetCandidatesSearchCriteriaAction {\r\n    type: CandidateActionTypes.SET_CANDIDATE_SEARCH_CRITERIA;\r\n    payload: string;\r\n}\r\n\r\ninterface UpdateCandidateIsDismissedAction {\r\n    type: CandidateActionTypes.UPDATE_CANDIDATE_ISDISMISSED_STATUS;\r\n    payload: ICandidate;\r\n}\r\n\r\ninterface CreateCandidateAction {\r\n    type: CandidateActionTypes.CREATE_CANDIDATE;\r\n    payload: ICandidate;\r\n}\r\n\r\ninterface UpdateCandidateAction {\r\n    type: CandidateActionTypes.UPDATE_CANDIDATE;\r\n    payload: ICandidate;\r\n}\r\n\r\nexport type CandidateAction = GetCandidatesAction |\r\n    GetCandidateByIdAction |\r\n    SetCandidateErrorAction |\r\n    SetCandidateLoadingAction |\r\n    SetCandidatePagesAction |\r\n    SetCandidateActiveFilterAction |\r\n    SetCandidateVacancyFilterAction |\r\n    SetCandidatesSearchCriteriaAction |\r\n    UpdateCandidateIsDismissedAction |\r\n    CreateCandidateAction |\r\n    UpdateCandidateAction","import axios from 'axios';\r\nimport { CandidateStatus, ICandidate } from '../types/candidate';\r\nimport { OrderType } from '../types/common/orderType';\r\nimport { ISearchResult } from '../types/common/searchResult';\r\n\r\n/**\r\n * Get list of candidates\r\n * @param limit<number> Page size\r\n * @param page<number> Current page\r\n * @param search<string> Search text for candadate full name\r\n * @param candidateStatus<CandidateStatus> Filter for isDismissed property: 0 - Active, 1 - Dismissed, 2 - All\r\n * @param vacancyId<number> Filter for candidates by vacancyId. null/'' means all candidates with all vacancies\r\n * @param sortField<string> Field for sorting\r\n * @param order<OrderType> Sort direction (Ascending / Descending / None)\r\n */\r\nexport async function getCandidatesAxios(\r\n    limit: number,\r\n    page: number,\r\n    search: string,\r\n    candidateStatus: CandidateStatus,\r\n    vacancyId: number,\r\n    sortField: string,\r\n    order: OrderType): Promise<ISearchResult<ICandidate>> {\r\n    return (\r\n        await axios.get(`/candidate/get?limit=${limit}&page=${page}&search=${search}&candidateStatus=${candidateStatus}&vacancyId=${vacancyId == null ? '' : vacancyId}&sortField=${sortField}&order=${order}`)).data;\r\n}\r\n\r\n/**\r\n * Get candidate specified by identifier\r\n * @param id<string> Candidate identifier\r\n */\r\nexport async function getCandidateByIdAxios(id: number): Promise<ICandidate> {\r\n    return (await axios.get(`/candidate/getbyid/${id.toString()}`)).data;\r\n}\r\n\r\n// /**\r\n//  * Get sorted list of all vacancies titles\r\n//  * @param searchValue<string> Search paremeter\r\n//  * @param officeId<string> Identifier of the office which vacancy belongs. If it's '' in request query - means all offices.\r\n//  */\r\n// export async function searchVacanciesTitlesAxios(searchValue: string, officeId: string): Promise<VacancyTitleDto[]> {\r\n//     return (await axios.get(`/vacancy/searchvacanciestitles?searchValue=${searchValue}&officeId=${officeId}`)).data;\r\n// }\r\n\r\n/**\r\n * @param id<string> Candidate identifier\r\n * @param isDismissed<boolean> Candidate status\r\n */\r\nexport async function updateCandidateIsDismissedStatusAxios(id: number, isDismissed: boolean): Promise<void> {\r\n    await axios.patch(`/candidate/partialcandidateupdate/${id}`, [{ op: \"replace\", path: \"/isdismissed\", value: isDismissed }]);\r\n}\r\n\r\n/**\r\n * Creates a new candidate\r\n * @param candidate<ICandidate> object of type ICandidate\r\n * @returns<ICandidate> Created candidate\r\n */\r\nexport async function createCandidateAxios(candidate: ICandidate): Promise<ICandidate> {\r\n    return (await axios.post(\"/candidate/create\", candidate)).data;\r\n}\r\n\r\n/**\r\n * Updates the existing candidate\r\n * @param candidate<ICandidate> Object of type ICandidate\r\n * @returns<ICandidate> Updated candidate object\r\n */\r\nexport async function updateCandidateAxios(candidate: ICandidate): Promise<ICandidate> {\r\n    return (await axios.put(\"/candidate/update\", candidate)).data;\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { createCandidateAxios, getCandidatesAxios, getCandidateByIdAxios, updateCandidateIsDismissedStatusAxios, updateCandidateAxios } from \"../../api/candidate\";\r\nimport { OrderType } from \"../../types/common/orderType\";\r\nimport { ICandidate, CandidateAction, CandidateActionTypes, CandidateStatus, CandidateFilters } from \"../../types/candidate\";\r\n\r\nexport const getCandidates = (limit: number, page: number, filters: CandidateFilters, sortField: string, order: OrderType) => {\r\n    return async (dispatch: Dispatch<CandidateAction>) => {\r\n        try {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_LOADING, payload: true });\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_ERROR, payload: null });\r\n            dispatch({\r\n                type: CandidateActionTypes.GET_CANDIDATES, payload:\r\n                    await getCandidatesAxios(limit, page, filters.searchInFullName, filters.active, filters.vacancyId, sortField, order)\r\n            });\r\n        } catch (error) {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_ERROR, payload: error.message || \"Error of loading candidates.\" })\r\n        } finally {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCandidateById = (id: number) => {\r\n    return async (dispatch: Dispatch<CandidateAction>) => {\r\n        try {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_LOADING, payload: true });\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_ERROR, payload: null });\r\n            dispatch({ type: CandidateActionTypes.GET_CANDIDATE_BY_ID, payload: await getCandidateByIdAxios(id) });\r\n        } catch (error) {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_ERROR, payload: error.message || \"Error of loading choosed candidate.\" })\r\n        } finally {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const setCandidateLoading = (isLoading: boolean) => {\r\n    return async (dispatch: Dispatch<CandidateAction>) => {\r\n        dispatch({ type: CandidateActionTypes.SET_CANDIDATE_LOADING, payload: isLoading });\r\n    }\r\n}\r\n\r\nexport const setCandidatePage = (page: number) => {\r\n    return async (dispatch: Dispatch<CandidateAction>) => {\r\n        dispatch({ type: CandidateActionTypes.SET_CANDIDATE_PAGE, payload: page });\r\n    }\r\n}\r\n\r\nexport const setCandidateActiveFilter = (status: CandidateStatus) => {\r\n    return async (dispatch: Dispatch<CandidateAction>) => {\r\n        dispatch({ type: CandidateActionTypes.SET_CANDIDATE_ACTIVE_FILTER, payload: status });\r\n    }\r\n}\r\n\r\nexport const setCandidateVacancyFilter = (vacancyId: number) => {\r\n    return async (dispatch: Dispatch<CandidateAction>) => {\r\n        dispatch({ type: CandidateActionTypes.SET_CANDIDATE_VACANCY_FILTER, payload: vacancyId });\r\n    }\r\n}\r\n\r\nexport const setCandidateSearchCriteria = (search: string) => {\r\n    return async (dispatch: Dispatch<CandidateAction>) => {\r\n        dispatch({ type: CandidateActionTypes.SET_CANDIDATE_SEARCH_CRITERIA, payload: search });\r\n    }\r\n}\r\n\r\nexport const updateCandidateIsDismissedStatus = (id: number, candidateToUpdate: ICandidate) => {\r\n    return async (dispatch: Dispatch<CandidateAction>) => {\r\n        try {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_LOADING, payload: true });\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_ERROR, payload: null });\r\n            await updateCandidateIsDismissedStatusAxios(id, candidateToUpdate.isDismissed);\r\n            dispatch({ type: CandidateActionTypes.UPDATE_CANDIDATE_ISDISMISSED_STATUS, payload: candidateToUpdate });\r\n        } catch (error) {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_ERROR, payload: error.message || \"Error of updating candidate isDismissed status.\" })\r\n        } finally {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const createCandidate = (candidate: ICandidate) => {\r\n    return async (dispatch: Dispatch<CandidateAction>) => {\r\n        try {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_LOADING, payload: true });\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_ERROR, payload: null });\r\n            dispatch({ type: CandidateActionTypes.CREATE_CANDIDATE, payload: await createCandidateAxios(candidate) });\r\n        } catch (error) {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_ERROR, payload: error.message || \"Error while creating the candidate.\" })\r\n        } finally {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateCandidate = (candidate: ICandidate) => {\r\n    return async (dispatch: Dispatch<CandidateAction>) => {\r\n        try {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_LOADING, payload: true });\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_ERROR, payload: null });\r\n            dispatch({ type: CandidateActionTypes.UPDATE_CANDIDATE, payload: await updateCandidateAxios(candidate) });\r\n        } catch (error) {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_ERROR, payload: error.message || \"Error while updating the candidate.\" })\r\n        } finally {\r\n            dispatch({ type: CandidateActionTypes.SET_CANDIDATE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n","import { ISearchResult } from \"./common/searchResult\";\r\n\r\nexport interface ICompanyService {\r\n    id: number,\r\n    title: string;\r\n    description: string;\r\n    imageUrl: string;\r\n    isActive: boolean;\r\n}\r\n\r\nexport enum CompanyServiceStatus {\r\n    Active,\r\n    Disabled,\r\n    All\r\n}\r\n\r\nexport interface CompanyServiceState {\r\n    serviceSearchResult: ISearchResult<ICompanyService>;\r\n    filters: {\r\n        active: CompanyServiceStatus\r\n    }\r\n    loading: boolean;\r\n    error: null | string;\r\n}\r\n\r\nexport enum CompanyServiceActionTypes {\r\n    GET_COMPANY_SERVICES = \"GET_COMPANY_SERVICES\",\r\n    GET_COMPANY_SERVICE_BY_ID = \"GET_COMPANY_SERVICE_BY_ID\",\r\n    LOAD_MORE_COMPANY_SERVICES = \"LOAD_MORE_COMPANY_SERVICES\",\r\n    SET_COMPANY_SERVICE_ERROR = \"SET_COMPANY_SERVICE_ERROR\",\r\n    SET_COMPANY_SERVICE_LOADING = \"SET_COMPANY_SERVICE_LOADING\",\r\n    SET_COMPANY_SERVICE_PAGE = \"SET_COMPANY_SERVICE_PAGE\",\r\n    SET_COMPANY_SERVICE_ACTIVE_FILTER = \"SET_COMPANY_SERVICE_ACTIVE_FILTER\",\r\n    UPDATE_COMPANY_SERVICE_ISACTIVE_STATUS = \"UPDATE_COMPANY_SERVICE_ISACTIVE_STATUS\",\r\n    CREATE_COMPANY_SERVICE = \"CREATE_COMPANY_SERVICE\",\r\n    UPDATE_COMPANY_SERVICE = \"UPDATE_COMPANY_SERVICE\",\r\n    REMOVE_COMPANY_SERVICE = \"REMOVE_COMPANY_SERVICE\"\r\n}\r\n\r\ninterface GetServicesAction {\r\n    type: CompanyServiceActionTypes.GET_COMPANY_SERVICES;\r\n    payload: ISearchResult<ICompanyService>;\r\n}\r\n\r\ninterface GetServiceByIdAction {\r\n    type: CompanyServiceActionTypes.GET_COMPANY_SERVICE_BY_ID;\r\n    payload: ICompanyService;\r\n}\r\n\r\ninterface LoadMoreServicesAction {\r\n    type: CompanyServiceActionTypes.LOAD_MORE_COMPANY_SERVICES;\r\n    payload: ISearchResult<ICompanyService>;\r\n}\r\n\r\ninterface SetServiceErrorAction {\r\n    type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR;\r\n    payload: null | string;\r\n}\r\n\r\ninterface SetServiceLoadingAction {\r\n    type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\ninterface SetServicePageAction {\r\n    type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_PAGE;\r\n    payload: number;\r\n}\r\n\r\ninterface SetServiceActiveFilterAction {\r\n    type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ACTIVE_FILTER;\r\n    payload: CompanyServiceStatus;\r\n}\r\n\r\ninterface UpdateServiceIsActiveStatusAction {\r\n    type: CompanyServiceActionTypes.UPDATE_COMPANY_SERVICE_ISACTIVE_STATUS;\r\n    payload: ICompanyService;\r\n}\r\n\r\ninterface CreateCompanyServiceAction {\r\n    type: CompanyServiceActionTypes.CREATE_COMPANY_SERVICE;\r\n    payload: ICompanyService;\r\n}\r\n\r\ninterface UpdateCompanyServiceAction {\r\n    type: CompanyServiceActionTypes.UPDATE_COMPANY_SERVICE;\r\n    payload: ICompanyService;\r\n}\r\n\r\ninterface RemoveCompanyServiceAction {\r\n    type: CompanyServiceActionTypes.REMOVE_COMPANY_SERVICE;\r\n    payload: number;\r\n}\r\n\r\nexport type CompanyServiceAction = GetServicesAction |\r\n    GetServiceByIdAction |\r\n    LoadMoreServicesAction |\r\n    SetServiceErrorAction |\r\n    SetServiceLoadingAction |\r\n    SetServicePageAction |\r\n    SetServiceActiveFilterAction |\r\n    UpdateServiceIsActiveStatusAction |\r\n    CreateCompanyServiceAction |\r\n    UpdateCompanyServiceAction |\r\n    RemoveCompanyServiceAction","import axios from 'axios';\r\nimport { CompanyServiceStatus, ICompanyService } from '../types/companyService';\r\nimport { ISearchResult } from '../types/common/searchResult';\r\nimport { OrderType } from '../types/common/orderType';\r\n\r\n/**\r\n * Get list of services\r\n * @param limit<number> Page size\r\n * @param page<number> Current page\r\n * @param companyServiceStatus<CompanyServiceStatus> Possible values: 0 - Active, 1 - Disabled, 2 - All\r\n * @param order<OrderType> Sort direction (0 - Ascending / 1 - Descending / 2 - None)\r\n */\r\nexport async function getServicesAxios(limit: number, page: number, companyServiceStatus: CompanyServiceStatus, order: OrderType): Promise<ISearchResult<ICompanyService>> {\r\n    return (await axios.get(`/companyservice/get?limit=${limit}&page=${page}&companyServiceStatus=${companyServiceStatus}&order=${order}`)).data;\r\n}\r\n\r\n/**\r\n * Get's the object of service specified by identifier\r\n * @param id<string> Identifier\r\n * @returns<ICompanyService> Object of service\r\n */\r\nexport async function getServiceByIdAxios(id: number): Promise<ICompanyService> {\r\n    return (await axios.get(`/companyservice/getbyid/${id.toString()}`)).data;\r\n}\r\n\r\n/**\r\n * @param id<string> Service identifier\r\n * @param isActive<boolean> Service status\r\n */\r\nexport async function updateServiceIsActiveStatusAxios(id: number, isActive: boolean): Promise<void> {\r\n    await axios.patch(`/companyservice/partialserviceupdate/${id}`, [{ op: \"replace\", path: \"/isactive\", value: isActive }]);\r\n}\r\n\r\n/**\r\n * Creates a new company's service\r\n * @param service<ICompanyService> Object of type ICompanyService\r\n * @returns<ICompanyService> Created service object\r\n */\r\nexport async function createServiceAxios(service: ICompanyService): Promise<ICompanyService> {\r\n    return (await axios.post(\"/companyservice/create\", service)).data;\r\n}\r\n\r\n/**\r\n * Updates company's service\r\n * @param service<ICompanyService> Object of type ICompanyService\r\n * @returns<ICompanyService> Updated service object\r\n */\r\nexport async function updateServiceAxios(service: ICompanyService): Promise<ICompanyService> {\r\n    return (await axios.put(\"/companyservice/update\", service)).data;\r\n}\r\n\r\n/**\r\n * Delete's the object of service specified by identifier\r\n * @param id<string> Identifier\r\n */\r\nexport async function removeServiceAxios(id: number): Promise<void> {\r\n    return await axios.delete(`/companyservice/delete/${id.toString()}`);\r\n}","import { Dispatch } from \"redux\";\r\nimport { getServicesAxios, getServiceByIdAxios, removeServiceAxios, createServiceAxios, updateServiceAxios, updateServiceIsActiveStatusAxios } from \"../../api/service\";\r\nimport { OrderType } from \"../../types/common/orderType\";\r\nimport { ICompanyService, CompanyServiceAction, CompanyServiceActionTypes, CompanyServiceStatus } from \"../../types/companyService\";\r\n\r\nexport const getServices = (limit: number, page: number, companyServiceStatus: CompanyServiceStatus, order: OrderType) => {\r\n    return async (dispatch: Dispatch<CompanyServiceAction>) => {\r\n        try {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: true });\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: null });\r\n            dispatch({\r\n                type: CompanyServiceActionTypes.GET_COMPANY_SERVICES, payload:\r\n                    await getServicesAxios(limit, page, companyServiceStatus, order)\r\n            });\r\n        } catch (error) {\r\n            console.log('error ', error)\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: error.message || \"Error of loading services.\" })\r\n        } finally {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const getServiceById = (id: number) => {\r\n    return async (dispatch: Dispatch<CompanyServiceAction>) => {\r\n        try {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: true });\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: null });\r\n            dispatch({ type: CompanyServiceActionTypes.GET_COMPANY_SERVICE_BY_ID, payload: await getServiceByIdAxios(id) });\r\n        } catch (error) {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: error.message || \"Error of loading choosed service.\" })\r\n        } finally {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const loadMoreServices = (limit: number, page: number, companyServiceStatus: CompanyServiceStatus, order: OrderType) => {\r\n    return async (dispatch: Dispatch<CompanyServiceAction>) => {\r\n        try {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: true });\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: null });\r\n            dispatch({\r\n                type: CompanyServiceActionTypes.LOAD_MORE_COMPANY_SERVICES, payload:\r\n                    await getServicesAxios(limit, page, companyServiceStatus, order)\r\n            });\r\n        } catch (error) {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: \"Error of loading services.\" })\r\n        } finally {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const setServicePage = (page: number) => {\r\n    return async (dispatch: Dispatch<CompanyServiceAction>) => {\r\n        dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_PAGE, payload: page });\r\n    }\r\n}\r\n\r\nexport const setServiceActiveFilter = (status: CompanyServiceStatus) => {\r\n    return async (dispatch: Dispatch<CompanyServiceAction>) => {\r\n        dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ACTIVE_FILTER, payload: status });\r\n    }\r\n}\r\n\r\nexport const setServiceError = (message: string) => {\r\n    return async (dispatch: Dispatch<CompanyServiceAction>) => {\r\n        dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: message });\r\n    }\r\n}\r\n\r\nexport const setServiceLoading = (isLoading: boolean) => {\r\n    return async (dispatch: Dispatch<CompanyServiceAction>) => {\r\n        dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: isLoading });\r\n    }\r\n}\r\n\r\nexport const updateServiceIsActiveStatus = (id: number, serviceToUpdate: ICompanyService) => {\r\n    return async (dispatch: Dispatch<CompanyServiceAction>) => {\r\n        try {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: true });\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: null });\r\n            await updateServiceIsActiveStatusAxios(id, serviceToUpdate.isActive);\r\n            dispatch({ type: CompanyServiceActionTypes.UPDATE_COMPANY_SERVICE_ISACTIVE_STATUS, payload: serviceToUpdate });\r\n        } catch (error) {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: error.message || \"Error of updating service isActive status.\" })\r\n        } finally {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const createService = (service: ICompanyService) => {\r\n    return async (dispatch: Dispatch<CompanyServiceAction>) => {\r\n        try {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: true });\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: null });\r\n            dispatch({ type: CompanyServiceActionTypes.CREATE_COMPANY_SERVICE, payload: await createServiceAxios(service) });\r\n        } catch (error) {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: error.message || \"Error while creating the service.\" })\r\n        } finally {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateService = (service: ICompanyService) => {\r\n    return async (dispatch: Dispatch<CompanyServiceAction>) => {\r\n        try {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: true });\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: null });\r\n            dispatch({ type: CompanyServiceActionTypes.UPDATE_COMPANY_SERVICE, payload: await updateServiceAxios(service) });\r\n        } catch (error) {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: error.message || \"Error while updating the service.\" })\r\n        } finally {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeService = (id: number) => {\r\n    return async (dispatch: Dispatch<CompanyServiceAction>) => {\r\n        try {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: true });\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: null });\r\n            await removeServiceAxios(id);\r\n            dispatch({ type: CompanyServiceActionTypes.REMOVE_COMPANY_SERVICE, payload: id });\r\n        } catch (error) {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR, payload: error.message || \"Error while removing the service.\" })\r\n        } finally {\r\n            dispatch({ type: CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\n","import { ISearchResult } from \"./common/searchResult\";\r\n\r\nexport interface ICountry {\r\n    id: number;\r\n    name: string;\r\n    code: string;\r\n    officeDtos?: { name: string, address: string }[];\r\n}\r\n\r\nexport interface CountryState {\r\n    countrySearchResult: ISearchResult<ICountry>;\r\n    loading: boolean;\r\n    error: null | string;\r\n}\r\n\r\nexport enum CountryActionTypes {\r\n    GET_COUNTRIES = \"GET_COUNTRIES\",\r\n    GET_COUNTRY_BY_ID = \"GET_COUNTRY_BY_ID\",\r\n    SET_COUNTRY_ERROR = \"SET_COUNTRY_ERROR\",\r\n    SET_COUNTRY_LOADING = \"SET_COUNTRY_LOADING\",\r\n    SET_COUNTRY_PAGE = \"SET_COUNTRY_PAGE\",\r\n    CREATE_COUNTRY = \"CREATE_COUNTRY\",\r\n    UPDATE_COUNTRY = \"UPDATE_COUNTRY\",\r\n    REMOVE_COUNTRY = \"REMOVE_COUNTRY\"\r\n}\r\n\r\ninterface GetCoutriesAction {\r\n    type: CountryActionTypes.GET_COUNTRIES;\r\n    payload: ISearchResult<ICountry>;\r\n}\r\n\r\ninterface GetCountryByIdAction {\r\n    type: CountryActionTypes.GET_COUNTRY_BY_ID;\r\n    payload: ICountry;\r\n}\r\n\r\ninterface SetCountryErrorAction {\r\n    type: CountryActionTypes.SET_COUNTRY_ERROR;\r\n    payload: null | string;\r\n}\r\n\r\ninterface SetCountryLoadingAction {\r\n    type: CountryActionTypes.SET_COUNTRY_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\ninterface SetCountryPageAction {\r\n    type: CountryActionTypes.SET_COUNTRY_PAGE;\r\n    payload: number;\r\n}\r\n\r\ninterface CreateCountryAction {\r\n    type: CountryActionTypes.CREATE_COUNTRY;\r\n    payload: ICountry;\r\n}\r\n\r\ninterface UpdateCountryAction {\r\n    type: CountryActionTypes.UPDATE_COUNTRY;\r\n    payload: ICountry;\r\n}\r\n\r\ninterface RemoveCountryAction {\r\n    type: CountryActionTypes.REMOVE_COUNTRY;\r\n    payload: number;\r\n}\r\n\r\nexport type CountryAction = GetCoutriesAction |\r\n    GetCountryByIdAction |\r\n    SetCountryErrorAction |\r\n    SetCountryLoadingAction |\r\n    SetCountryPageAction |\r\n    CreateCountryAction |\r\n    UpdateCountryAction |\r\n    RemoveCountryAction","import axios from 'axios';\r\nimport { ISearchResult } from '../types/common/searchResult';\r\nimport { OrderType } from '../types/common/orderType';\r\nimport { ICountry } from '../types/country';\r\n\r\n/**\r\n * Gets list of countries\r\n * @param limit<number> Page size\r\n * @param page<number> Current page\r\n * @param sortField<string> Field for sorting, for now only by Name\r\n * @param order<OrderType> Sort direction (0 - Ascending / 1 - Descending / 2 - None)\r\n */\r\nexport async function getCountriesAxios(limit: number, page: number, sortField: string, order: OrderType): Promise<ISearchResult<ICountry>> {\r\n    return (await axios.get(`/country/get?limit=${limit}&page=${page}&sortField=${sortField}&order=${order}`)).data;\r\n}\r\n\r\n/**\r\n * Gets the object of country specified by identifier\r\n * @param id<string> Identifier\r\n * @returns<ICountry> Object of service\r\n */\r\nexport async function getCountryByIdAxios(id: number): Promise<ICountry> {\r\n    return (await axios.get(`/country/getbyid/${id.toString()}`)).data;\r\n}\r\n\r\n/**\r\n * Creates a new Country\r\n * @param service<ICountry> Object of type ICountry\r\n * @returns<ICountry> Created Country object\r\n */\r\nexport async function createCountryAxios(country: ICountry): Promise<ICountry> {\r\n    return (await axios.post(\"/country/create\", country)).data;\r\n}\r\n\r\n/**\r\n * Updates the country\r\n * @param service<ICountry> Object of type ICountry\r\n * @returns<ICountry> Updated service object\r\n */\r\nexport async function updateCountryAxios(country: ICountry): Promise<ICountry> {\r\n    return (await axios.put(\"/country/update\", country)).data;\r\n}\r\n\r\n/**\r\n * Delete's the object of Country specified by identifier\r\n * @param id<string> Identifier\r\n */\r\nexport async function removeCountryAxios(id: number): Promise<void> {\r\n    return await axios.delete(`/country/delete/${id}`);\r\n}","import { Dispatch } from \"redux\";\r\nimport { getCountriesAxios, getCountryByIdAxios, createCountryAxios, updateCountryAxios, removeCountryAxios } from \"../../api/country\";\r\nimport { OrderType } from \"../../types/common/orderType\";\r\nimport { ICountry, CountryAction, CountryActionTypes } from \"../../types/country\";\r\n\r\nexport const getCountries = (limit: number, page: number, sortField: string, order: OrderType) => {\r\n    return async (dispatch: Dispatch<CountryAction>) => {\r\n        try {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_LOADING, payload: true });\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_ERROR, payload: null });\r\n            dispatch({\r\n                type: CountryActionTypes.GET_COUNTRIES, payload:\r\n                    await getCountriesAxios(limit, page, sortField, order)\r\n            });\r\n        } catch (error) {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_ERROR, payload: error.message || \"Error of loading countries.\" })\r\n        } finally {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCountryById = (id: number) => {\r\n    return async (dispatch: Dispatch<CountryAction>) => {\r\n        try {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_LOADING, payload: true });\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_ERROR, payload: null });\r\n            dispatch({ type: CountryActionTypes.GET_COUNTRY_BY_ID, payload: await getCountryByIdAxios(id) });\r\n        } catch (error) {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_ERROR, payload: error.message || \"Error of loading choosed country.\" })\r\n        } finally {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const setCountryError = (message: string) => {\r\n    return async (dispatch: Dispatch<CountryAction>) => {\r\n        dispatch({ type: CountryActionTypes.SET_COUNTRY_ERROR, payload: message });\r\n    }\r\n}\r\n\r\nexport const setCountryLoading = (isLoading: boolean) => {\r\n    return async (dispatch: Dispatch<CountryAction>) => {\r\n        dispatch({ type: CountryActionTypes.SET_COUNTRY_LOADING, payload: isLoading });\r\n    }\r\n}\r\n\r\nexport const setCountryPage = (page: number) => {\r\n    return async (dispatch: Dispatch<CountryAction>) => {\r\n        dispatch({ type: CountryActionTypes.SET_COUNTRY_PAGE, payload: page });\r\n    }\r\n}\r\n\r\nexport const createCountry = (country: ICountry) => {\r\n    return async (dispatch: Dispatch<CountryAction>) => {\r\n        try {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_LOADING, payload: true });\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_ERROR, payload: null });\r\n            dispatch({ type: CountryActionTypes.CREATE_COUNTRY, payload: await createCountryAxios(country) });\r\n        } catch (error) {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_ERROR, payload: error.message || \"Error while creating the country.\" })\r\n        } finally {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateCountry = (country: ICountry) => {\r\n    return async (dispatch: Dispatch<CountryAction>) => {\r\n        try {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_LOADING, payload: true });\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_ERROR, payload: null });\r\n            dispatch({ type: CountryActionTypes.UPDATE_COUNTRY, payload: await updateCountryAxios(country) });\r\n        } catch (error) {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_ERROR, payload: error.message || \"Error while updating the country.\" })\r\n        } finally {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeCountry = (id: number) => {\r\n    return async (dispatch: Dispatch<CountryAction>) => {\r\n        try {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_LOADING, payload: true });\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_ERROR, payload: null });\r\n            await removeCountryAxios(id);\r\n            dispatch({ type: CountryActionTypes.REMOVE_COUNTRY, payload: id });\r\n        } catch (error) {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_ERROR, payload: error.message || \"Error while removing the country.\" })\r\n        } finally {\r\n            dispatch({ type: CountryActionTypes.SET_COUNTRY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\n","import { OfficeNameIdDto } from \"./common/officeNameIdDto\";\r\nimport { ISearchResult } from \"./common/searchResult\";\r\n\r\nexport interface IEmployee {\r\n    id: number;\r\n    fullName: string;\r\n    email: string;\r\n    position: string;\r\n    description: string;\r\n    avatarUrl: string;\r\n    officeId: number;\r\n    officeDto?: {\r\n        name: string;\r\n    }\r\n}\r\n\r\nexport interface EmployeeState {\r\n    employeeSearchResult: ISearchResult<IEmployee>;\r\n    offices: OfficeNameIdDto[];\r\n    loading: boolean;\r\n    error: null | string;\r\n}\r\n\r\nexport enum EmployeeActionTypes {\r\n    GET_EMPLOYEES = \"GET_EMPLOYEES\",\r\n    LOAD_MORE_EMPLOYEES = \"LOAD_MORE_EMPLOYEES\",\r\n    SET_EMPLOYEE_ERROR = \"SET_EMPLOYEE_ERROR\",\r\n    SET_EMPLOYEE_LOADING = \"SET_EMPLOYEE_LOADING\",\r\n    SET_EMPLOYEE_PAGE = \"SET_EMPLOYEE_PAGE\",\r\n    CREATE_EMPLOYEE = \"CREATE_EMPLOYEE\",\r\n    UPDATE_EMPLOYEE = \"UPDATE_EMPLOYEE\",\r\n    REMOVE_EMPLOYEE = \"REMOVE_EMPLOYEE\"\r\n}\r\n\r\ninterface GetEmployeesAction {\r\n    type: EmployeeActionTypes.GET_EMPLOYEES;\r\n    payload: ISearchResult<IEmployee>;\r\n}\r\n\r\ninterface LoadMoreEmployeesAction {\r\n    type: EmployeeActionTypes.LOAD_MORE_EMPLOYEES;\r\n    payload: ISearchResult<IEmployee>;\r\n}\r\n\r\ninterface SetErrorEmployeeAction {\r\n    type: EmployeeActionTypes.SET_EMPLOYEE_ERROR;\r\n    payload: null | string;\r\n}\r\n\r\ninterface SetLoadingEmployeeAction {\r\n    type: EmployeeActionTypes.SET_EMPLOYEE_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\ninterface SetPageEmployeeAction {\r\n    type: EmployeeActionTypes.SET_EMPLOYEE_PAGE;\r\n    payload: number;\r\n}\r\n\r\ninterface CreateCompanyService {\r\n    type: EmployeeActionTypes.CREATE_EMPLOYEE;\r\n    payload: IEmployee;\r\n}\r\n\r\ninterface UpdateCompanyService {\r\n    type: EmployeeActionTypes.UPDATE_EMPLOYEE;\r\n    payload: IEmployee;\r\n}\r\n\r\ninterface RemoveEmployee {\r\n    type: EmployeeActionTypes.REMOVE_EMPLOYEE;\r\n    payload: number;\r\n}\r\n\r\nexport type EmployeeAction = \r\nGetEmployeesAction | \r\nLoadMoreEmployeesAction | \r\nSetErrorEmployeeAction | \r\nSetLoadingEmployeeAction | \r\nSetPageEmployeeAction |\r\nCreateCompanyService |\r\nUpdateCompanyService |\r\nRemoveEmployee\r\n","import axios from 'axios';\r\nimport { IEmployee } from '../types/employee';\r\nimport { OrderType } from '../types/common/orderType';\r\nimport { ISearchResult } from '../types/common/searchResult';\r\n\r\n/**\r\n * Get list of services\r\n * @param limit<number> Page size\r\n * @param page<number> Current page\r\n * @param search<string> Search text\r\n * @param sortField<string> Field name for sorting\r\n * @param order<OrderType> Sort direction: 0 - Ascending or 1 - Descending, 2 - None\r\n * @returns<ISearchResult> SearchResult: List of Employees and pagination options\r\n */\r\nexport async function getEmployeesAxios(limit: number, page: number, search: string, sortField: string, order: OrderType): Promise<ISearchResult<IEmployee>> {\r\n    return (await axios.get(`/employee/get?limit=${limit}&page=${page}&search=${search}&sortfield=${sortField}&order=${order}`)).data;\r\n}\r\n\r\n/**\r\n * Creates a new employee\r\n * @param service<IEmployee> object of type IEmployee\r\n * @returns<IEmployee> created employee object\r\n */\r\nexport async function createEmployeeAxios(employee: IEmployee): Promise<IEmployee> {\r\n    return (await axios.post(\"/employee/create\", employee)).data;\r\n}\r\n\r\n/**\r\n * Updates employee\r\n * @param service<IEmployee> object of type IEmployee\r\n * @returns<IEmployee> updated employee object\r\n */\r\nexport async function updateEmployeeAxios(employee: IEmployee): Promise<IEmployee> {\r\n    return (await axios.put(\"/employee/update\", employee)).data;\r\n}\r\n\r\n/**\r\n * Delete's the employee object specified by identifier\r\n * @param id<string> identifier\r\n */\r\nexport async function removeEmployeeAxios(id: number): Promise<void> {\r\n    return await axios.delete(`/employee/delete/${id.toString()}`);\r\n}\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport { createEmployeeAxios, getEmployeesAxios, removeEmployeeAxios, updateEmployeeAxios } from \"../../api/employee\";\r\nimport { EmployeeAction, EmployeeActionTypes, IEmployee } from \"../../types/employee\";\r\nimport { OrderType } from \"../../types/common/orderType\";\r\n\r\n\r\nexport const getEmployees = (limit: number, page: number, search: string, sortField: string, order: OrderType) => {\r\n    return async (dispatch: Dispatch<EmployeeAction>) => {\r\n        try {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_LOADING, payload: true });\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_ERROR, payload: null });\r\n            dispatch({ type: EmployeeActionTypes.GET_EMPLOYEES, payload: await getEmployeesAxios(limit, page, search, sortField, order) });\r\n        } catch (error) {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_ERROR, payload: error.message || \"Error of loading employees.\" })\r\n        } finally {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const loadMoreEmployees = (limit: number, page: number, search: string, sortField: string, order: OrderType) => {\r\n    return async (dispatch: Dispatch<EmployeeAction>) => {\r\n        try {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_LOADING, payload: true });\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_ERROR, payload: null });\r\n            dispatch({ type: EmployeeActionTypes.LOAD_MORE_EMPLOYEES, payload: await getEmployeesAxios(limit, page, search, sortField, order) });\r\n        } catch (error) {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_ERROR, payload: error.message || \"Error of loading employees.\" })\r\n        } finally {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const setEmployeePage = (page: number) => {\r\n    return async (dispatch: Dispatch<EmployeeAction>) => {\r\n        dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_PAGE, payload: page });\r\n    }\r\n}\r\n\r\nexport const createEmployee = (employee: IEmployee) => {\r\n    return async (dispatch: Dispatch<EmployeeAction>) => {\r\n        try {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_LOADING, payload: true });\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_ERROR, payload: null });\r\n            dispatch({ type: EmployeeActionTypes.CREATE_EMPLOYEE, payload: await createEmployeeAxios(employee) });\r\n        } catch (error) {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_ERROR, payload: error.message || \"Error while creating the Employee.\" })\r\n        } finally {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateEmployee = (employee: IEmployee) => {\r\n    return async (dispatch: Dispatch<EmployeeAction>) => {\r\n        try {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_LOADING, payload: true });\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_ERROR, payload: null });\r\n            dispatch({ type: EmployeeActionTypes.UPDATE_EMPLOYEE, payload: await updateEmployeeAxios(employee) });\r\n        } catch (error) {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_ERROR, payload: error.message || \"Error while updating the Employee.\" })\r\n        } finally {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\nexport const removeEmployee = (id: number) => {\r\n    return async (dispatch: Dispatch<EmployeeAction>) => {\r\n        try {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_LOADING, payload: true });\r\n            await removeEmployeeAxios(id);\r\n            dispatch({ type: EmployeeActionTypes.REMOVE_EMPLOYEE, payload: id });\r\n        } catch (error) {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_ERROR, payload: error.message || \"Error while removing the service.\" })\r\n        } finally {\r\n            dispatch({ type: EmployeeActionTypes.SET_EMPLOYEE_LOADING, payload: false });\r\n        }\r\n    }\r\n}","import { ISearchResult } from \"./common/searchResult\";\r\nimport { ICountry } from \"./country\";\r\nimport { IVacancy } from \"./vacancy\";\r\n\r\nexport interface IOffice {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    address: string;\r\n    latitude: number;\r\n    longitude: number;\r\n    countryId: number;\r\n    countryDto?: ICountry;\r\n    vacancyDtos?: IVacancy[];\r\n}\r\n\r\nexport interface OfficeState {\r\n    officeSearchResult: ISearchResult<IOffice>;\r\n    loading: boolean;\r\n    error: null | string;\r\n}\r\n\r\nexport enum OfficeActionTypes {\r\n    GET_OFFICES = \"GET_OFFICES\",\r\n    GET_OFFICE_BY_ID = \"GET_OFFICE_BY_ID\",\r\n    SET_OFFICE_ERROR = \"SET_OFFICE_ERROR\",\r\n    SET_OFFICE_LOADING = \"SET_OFFICE_LOADING\",\r\n    SET_OFFICE_PAGE = \"SET_OFFICE_PAGE\",\r\n    CREATE_OFFICE = \"CREATE_OFFICE\",\r\n    UPDATE_OFFICE = \"UPDATE_OFFICE\",\r\n    REMOVE_OFFICE = \"REMOVE_OFFICE\"\r\n}\r\n\r\ninterface GetOfficesAction {\r\n    type: OfficeActionTypes.GET_OFFICES;\r\n    payload: ISearchResult<IOffice>;\r\n}\r\n\r\ninterface GetOfficeByIdAction {\r\n    type: OfficeActionTypes.GET_OFFICE_BY_ID;\r\n    payload: IOffice;\r\n}\r\n\r\ninterface SetOfficeErrorAction {\r\n    type: OfficeActionTypes.SET_OFFICE_ERROR;\r\n    payload: null | string;\r\n}\r\n\r\ninterface SetOfficeLoadingAction {\r\n    type: OfficeActionTypes.SET_OFFICE_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\ninterface SetOfficePageAction {\r\n    type: OfficeActionTypes.SET_OFFICE_PAGE;\r\n    payload: number;\r\n}\r\n\r\ninterface CreateOfficeAction {\r\n    type: OfficeActionTypes.CREATE_OFFICE;\r\n    payload: IOffice;\r\n}\r\n\r\ninterface UpdateOfficeAction {\r\n    type: OfficeActionTypes.UPDATE_OFFICE;\r\n    payload: IOffice;\r\n}\r\n\r\ninterface RemoveOfficeAction {\r\n    type: OfficeActionTypes.REMOVE_OFFICE;\r\n    payload: number;\r\n}\r\n\r\nexport type OfficeAction = GetOfficesAction |\r\n    GetOfficeByIdAction |\r\n    SetOfficeErrorAction |\r\n    SetOfficeLoadingAction |\r\n    SetOfficePageAction |\r\n    CreateOfficeAction |\r\n    UpdateOfficeAction |\r\n    RemoveOfficeAction","import axios from 'axios';\r\nimport { OfficeNameIdDto } from '../types/common/officeNameIdDto';\r\nimport { OrderType } from '../types/common/orderType';\r\nimport { ISearchResult } from '../types/common/searchResult';\r\nimport { IOffice } from '../types/office';\r\n\r\n/**\r\n * Gets list of offices with pagination properties\r\n * @param limit<number> Page size\r\n * @param page<number> Current page\r\n * @param sortField<string> Field for sorting, for now only by Name\r\n * @param order<OrderType> Sort direction (0 - Ascending / 1 - Descending / 2 - None)\r\n */\r\nexport async function getOfficesAxios(limit: number, page: number, sortField: string, order: OrderType): Promise<ISearchResult<IOffice>> {\r\n    return (await axios.get(`/office/get?limit=${limit}&page=${page}&sortField=${sortField}&order=${order}`)).data;\r\n}\r\n\r\n/**\r\n * Gets list of OfficeNameIdDto's\r\n * @returns<OfficeNameIdDto[]> Array of OfficeNameIdDto object\r\n */\r\nexport async function getOfficeNameIdsAxios(): Promise<OfficeNameIdDto[]> {\r\n    return (await axios.get(\"/office/getofficenameids\")).data;\r\n}\r\n\r\n/**\r\n * Gets the object of Office specified by identifier\r\n * @param id<string> Identifier\r\n * @returns<IOffice> Object of office\r\n */\r\nexport async function getOfficeByIdAxios(id: number): Promise<IOffice> {\r\n    return (await axios.get(`/office/getbyid/${id.toString()}`)).data;\r\n}\r\n\r\n/**\r\n * Creates a new office\r\n * @param office<IOffice> Object of type IOffice\r\n * @returns<IOffice> Created office object\r\n */\r\nexport async function createOfficeAxios(office: IOffice): Promise<IOffice> {\r\n    return (await axios.post(\"/office/create\", office)).data;\r\n}\r\n\r\n/**\r\n * Updates the office\r\n * @param office<IOffice> Object of type IOffice\r\n * @returns<IOffice> Updated service object\r\n */\r\nexport async function updateOfficeAxios(office: IOffice): Promise<IOffice> {\r\n    return (await axios.put(\"/office/update\", office)).data;\r\n}\r\n\r\n/**\r\n * Delete's the object of office specified by identifier\r\n * @param id<string> Identifier\r\n */\r\nexport async function removeOfficeAxios(id: number): Promise<void> {\r\n    return await axios.delete(`/Office/delete/${id}`);\r\n}","import { Dispatch } from \"redux\";\r\nimport { getOfficesAxios, getOfficeByIdAxios, createOfficeAxios, updateOfficeAxios, removeOfficeAxios } from \"../../api/office\";\r\nimport { OrderType } from \"../../types/common/orderType\";\r\nimport { IOffice, OfficeAction, OfficeActionTypes } from \"../../types/office\";\r\n\r\nexport const getOffices = (limit: number, page: number, sortField: string, order: OrderType) => {\r\n    return async (dispatch: Dispatch<OfficeAction>) => {\r\n        try {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_LOADING, payload: true });\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_ERROR, payload: null });\r\n            dispatch({\r\n                type: OfficeActionTypes.GET_OFFICES, payload:\r\n                    await getOfficesAxios(limit, page, sortField, order)\r\n            });\r\n        } catch (error) {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_ERROR, payload: error.message || \"Error of loading offices.\" })\r\n        } finally {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const getOfficeById = (id: number) => {\r\n    return async (dispatch: Dispatch<OfficeAction>) => {\r\n        try {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_LOADING, payload: true });\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_ERROR, payload: null });\r\n            dispatch({ type: OfficeActionTypes.GET_OFFICE_BY_ID, payload: await getOfficeByIdAxios(id) });\r\n        } catch (error) {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_ERROR, payload: error.message || \"Error of loading choosed office.\" })\r\n        } finally {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const setOfficeError = (message: string) => {\r\n    return async (dispatch: Dispatch<OfficeAction>) => {\r\n        dispatch({ type: OfficeActionTypes.SET_OFFICE_ERROR, payload: message });\r\n    }\r\n}\r\n\r\nexport const setOfficeLoading = (isLoading: boolean) => {\r\n    return async (dispatch: Dispatch<OfficeAction>) => {\r\n        dispatch({ type: OfficeActionTypes.SET_OFFICE_LOADING, payload: isLoading });\r\n    }\r\n}\r\n\r\nexport const setOfficePage = (page: number) => {\r\n    return async (dispatch: Dispatch<OfficeAction>) => {\r\n        dispatch({ type: OfficeActionTypes.SET_OFFICE_PAGE, payload: page });\r\n    }\r\n}\r\n\r\nexport const createOffice = (office: IOffice) => {\r\n    return async (dispatch: Dispatch<OfficeAction>) => {\r\n        try {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_LOADING, payload: true });\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_ERROR, payload: null });\r\n            dispatch({ type: OfficeActionTypes.CREATE_OFFICE, payload: await createOfficeAxios(office) });\r\n        } catch (error) {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_ERROR, payload: error.message || \"Error while creating the office.\" })\r\n        } finally {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateOffice = (office: IOffice) => {\r\n    return async (dispatch: Dispatch<OfficeAction>) => {\r\n        try {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_LOADING, payload: true });\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_ERROR, payload: null });\r\n            dispatch({ type: OfficeActionTypes.UPDATE_OFFICE, payload: await updateOfficeAxios(office) });\r\n        } catch (error) {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_ERROR, payload: error.message || \"Error while updating the office.\" })\r\n        } finally {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeOffice = (id: number) => {\r\n    return async (dispatch: Dispatch<OfficeAction>) => {\r\n        try {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_LOADING, payload: true });\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_ERROR, payload: null });\r\n            await removeOfficeAxios(id);\r\n            dispatch({ type: OfficeActionTypes.REMOVE_OFFICE, payload: id });\r\n        } catch (error) {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_ERROR, payload: error.message || \"Error while removing the office.\" })\r\n        } finally {\r\n            dispatch({ type: OfficeActionTypes.SET_OFFICE_LOADING, payload: false });\r\n        }\r\n    }\r\n}","import { ISearchResult } from \"./common/searchResult\";\r\n\r\nexport interface IUser {\r\n    id: string;\r\n    userName: string;\r\n    email: string;\r\n    emailConfirmed: boolean;\r\n    phoneNumber?: string;\r\n    avatarUrl?: string;\r\n}\r\n\r\nexport interface UserFilters {\r\n    searchInUserName: string;\r\n}\r\n\r\nexport interface UserState {\r\n    userSearchResult: ISearchResult<IUser>;\r\n    filters: UserFilters;\r\n    loading: boolean;\r\n    error: null | string;\r\n}\r\n\r\nexport enum UserActionTypes {\r\n    GET_USERS = \"GET_All_USERS\",\r\n    UPDATE_USER_EMAILCONFIRMED_STATUS = \"UPDATE_USER_EMAILCONFIRMED_STATUS\",\r\n    SET_USER_SEARCH_CRITERIA = \"SET_USER_SEARCH_CRITERIA\",\r\n    SET_USER_PAGE = \"SET_USER_PAGE\",\r\n    SET_USER_ERROR = \"SET_USER_ERROR\",\r\n    SET_USER_LOADING = \"SET_USER_LOADING\"\r\n}\r\n\r\ninterface GetUsersAction {\r\n    type: UserActionTypes.GET_USERS;\r\n    payload: ISearchResult<IUser>;\r\n}\r\n\r\ninterface UpdateUserEmailConfirmedStatusAction {\r\n    type: UserActionTypes.UPDATE_USER_EMAILCONFIRMED_STATUS;\r\n    payload: IUser;\r\n}\r\n\r\ninterface SetUserSearchCriteriaAction {\r\n    type: UserActionTypes.SET_USER_SEARCH_CRITERIA;\r\n    payload: string;\r\n}\r\n\r\ninterface SetUserPagesAction {\r\n    type: UserActionTypes.SET_USER_PAGE;\r\n    payload: number;\r\n}\r\n\r\ninterface SetUserErrorAction {\r\n    type: UserActionTypes.SET_USER_ERROR;\r\n    payload: null | string;\r\n}\r\n\r\ninterface SetUserLoadingAction {\r\n    type: UserActionTypes.SET_USER_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\nexport type UserAction = GetUsersAction |\r\n    UpdateUserEmailConfirmedStatusAction |\r\n    SetUserSearchCriteriaAction |\r\n    SetUserPagesAction |\r\n    SetUserErrorAction |\r\n    SetUserLoadingAction\r\n","import axios from 'axios';\r\nimport { ISearchResult } from '../types/common/searchResult';\r\nimport { IUser } from '../types/user';\r\n\r\n/**\r\n * Get list of candidates\r\n * @param limit<number> Page size\r\n * @param page<number> Current page\r\n * @param search<string> Search text for candadate full name\r\n */\r\nexport async function getUsersAxios(limit: number, page: number, search: string): Promise<ISearchResult<IUser>> {\r\n    return (await axios.get(`/account/get?limit=${limit}&page=${page}&search=${search}`)).data;\r\n}\r\n\r\n/**\r\n * @param id<string> User identifier\r\n * @param confirmed<boolean> User's emailConfirmed status\r\n */\r\nexport async function updateUserEmailConfirmedStatusAxios(id: string, confirmed: boolean): Promise<void> {\r\n    await axios.patch(`/account/partialuserupdate/${id}`, [{ op: \"replace\", path: \"/emailConfirmed\", value: confirmed }]);\r\n}\r\n\r\n/**\r\n * Updates the existing user\r\n * @param user<IUser> Object of type IUser\r\n * @returns<IUser> Updated user object\r\n */\r\nexport async function updateUserAxios(user: IUser): Promise<IUser> {\r\n    return (await axios.post(\"/account/update\", user)).data;\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { getUsersAxios, updateUserEmailConfirmedStatusAxios } from \"../../api/user\";\r\nimport { IUser, UserAction, UserActionTypes, UserFilters } from \"../../types/user\"\r\n\r\nexport const getUsers = (limit: number, page: number, filters: UserFilters) => {\r\n    return async (dispatch: Dispatch<UserAction>) => {\r\n        try {\r\n            dispatch({ type: UserActionTypes.SET_USER_LOADING, payload: true });\r\n            dispatch({ type: UserActionTypes.SET_USER_ERROR, payload: null });\r\n            dispatch({ type: UserActionTypes.GET_USERS, payload: await getUsersAxios(limit, page, filters.searchInUserName) });\r\n        } catch (error) {\r\n            dispatch({ type: UserActionTypes.SET_USER_ERROR, payload: error.message || \"Error of loading users.\" })\r\n        } finally {\r\n            dispatch({ type: UserActionTypes.SET_USER_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateUserEmailConfirmedStatus = (id: string, userToUpdate: IUser) => {\r\n    return async (dispatch: Dispatch<UserAction>) => {\r\n        try {\r\n            dispatch({ type: UserActionTypes.SET_USER_LOADING, payload: true });\r\n            dispatch({ type: UserActionTypes.SET_USER_ERROR, payload: null });\r\n            await updateUserEmailConfirmedStatusAxios(id, userToUpdate.emailConfirmed);\r\n            dispatch({ type: UserActionTypes.UPDATE_USER_EMAILCONFIRMED_STATUS, payload: userToUpdate });\r\n        } catch (error) {\r\n            dispatch({ type: UserActionTypes.SET_USER_ERROR, payload: error.message || \"Error of updating user EmailConfirmed status.\" })\r\n        } finally {\r\n            dispatch({ type: UserActionTypes.SET_USER_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const setUserSearchCriteria = (search: string) => {\r\n    return async (dispatch: Dispatch<UserAction>) => {\r\n        dispatch({ type: UserActionTypes.SET_USER_SEARCH_CRITERIA, payload: search });\r\n    }\r\n}\r\n\r\nexport const setUserPage = (page: number) => {\r\n    return async (dispatch: Dispatch<UserAction>) => {\r\n        dispatch({ type: UserActionTypes.SET_USER_PAGE, payload: page });\r\n    }\r\n}\r\n\r\nexport const setUserError = (message: string) => {\r\n    return async (dispatch: Dispatch<UserAction>) => {\r\n        dispatch({ type: UserActionTypes.SET_USER_ERROR, payload: message });\r\n    }\r\n}\r\n","import { OfficeNameIdDto } from \"./common/officeNameIdDto\";\r\nimport { ISearchResult } from \"./common/searchResult\";\r\n\r\nexport interface IVacancy {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    previews: number;\r\n    isActive: boolean;\r\n    officeId: number;\r\n    candidates?: { id: number, fullName: string, isDismissed: boolean }[];\r\n    officeDto?: {\r\n        name: string;\r\n    }\r\n}\r\n\r\nexport enum VacancyStatus {\r\n    Active,\r\n    Disabled,\r\n    All\r\n}\r\n\r\nexport interface VacancyFilters {\r\n    active: VacancyStatus;\r\n    officeId: string;\r\n    searchInTitle: string;\r\n}\r\n\r\nexport interface VacancyTitleDto {\r\n    value: string;\r\n}\r\n\r\nexport interface VacancyState {\r\n    vacancySearchResult: ISearchResult<IVacancy>;\r\n    filters: VacancyFilters;\r\n    currentVacancy: null | IVacancy;\r\n    offices: OfficeNameIdDto[];\r\n    titles: VacancyTitleDto[];\r\n    loadingFilters: boolean;\r\n    errorFilters: null | string;\r\n    loadingVacancies: boolean;\r\n    errorVacancies: null | string;\r\n}\r\n\r\nexport enum VacancyActionTypes {\r\n    GET_VACANCIES = \"GET_VACANCIES\",\r\n    GET_VACANCY_BY_ID = \"GET_VACANCY_BY_ID\",\r\n    LOAD_MORE_VACANCIES = \"LOAD_MORE_VACANCIES\",\r\n    SET_VACANCY_ERROR = \"SET_VACANCY_ERROR\",\r\n    SET_VACANCY_LOADING = \"SET_VACANCY_LOADING\",\r\n    SET_FILTERS_ERROR = \"SET_FILTERS_ERROR\",\r\n    SET_FILTERS_LOADING = \"SET_FILTERS_LOADING\",\r\n    SET_VACANCY_PAGE = \"SET_VACANCY_PAGE\",\r\n    SET_VACANCY_ACTIVE_FILTER = \"SET_VACANCY_ACTIVE_FILTER\",\r\n    SET_VACANCY_OFFICE_FILTER = \"SET_VACANCY_OFFICE_FILTER\",\r\n    SET_VACANCY_SEARCH_CRITERIA = \"SET_VACANCY_SEARCH_CRITERIA\",\r\n    SET_VACANCY_OFFICES = \"SET_VACANCY_OFFICES\",\r\n    SET_VACANCIES_TITLES = \"SET_VACANCIES_TITLES\",\r\n    SET_CURRENT_VACANCY = \"SET_CURRENT_VACANCY\",\r\n    INCREMENT_PREVIEWS = \"INCREMENT_PREVIEWS\",\r\n    UPDATE_VACANCY_ISACTIVE_STATUS = \"UPDATE_VACANCY_ISACTIVE_STATUS\",\r\n    CREATE_VACANCY = \"CREATE_VACANCY\",\r\n    UPDATE_VACANCY = \"UPDATE_VACANCY\"\r\n}\r\n\r\ninterface GetVacanciesAction {\r\n    type: VacancyActionTypes.GET_VACANCIES;\r\n    payload: ISearchResult<IVacancy>;\r\n}\r\n\r\ninterface GetVacancyByIdAction {\r\n    type: VacancyActionTypes.GET_VACANCY_BY_ID;\r\n    payload: IVacancy;\r\n}\r\n\r\ninterface LoadMoreVacanciesAction {\r\n    type: VacancyActionTypes.LOAD_MORE_VACANCIES;\r\n    payload: ISearchResult<IVacancy>;\r\n}\r\n\r\ninterface SetErrorVacancyAction {\r\n    type: VacancyActionTypes.SET_VACANCY_ERROR;\r\n    payload: null | string;\r\n}\r\n\r\ninterface SetLoadingVacancyAction {\r\n    type: VacancyActionTypes.SET_VACANCY_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\ninterface SetFiltersErrorAction {\r\n    type: VacancyActionTypes.SET_FILTERS_ERROR;\r\n    payload: null | string;\r\n}\r\n\r\ninterface SetFiltersLoadingAction {\r\n    type: VacancyActionTypes.SET_FILTERS_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\ninterface SetPageVacancyAction {\r\n    type: VacancyActionTypes.SET_VACANCY_PAGE;\r\n    payload: number;\r\n}\r\n\r\ninterface SetVacancyActiveFilterAction {\r\n    type: VacancyActionTypes.SET_VACANCY_ACTIVE_FILTER;\r\n    payload: VacancyStatus;\r\n}\r\n\r\ninterface SetVacancyOfficeFilterAction {\r\n    type: VacancyActionTypes.SET_VACANCY_OFFICE_FILTER;\r\n    payload: string;\r\n}\r\n\r\ninterface SetVacancySearchCriteriaAction {\r\n    type: VacancyActionTypes.SET_VACANCY_SEARCH_CRITERIA;\r\n    payload: string;\r\n}\r\n\r\ninterface SetVacancyOfficesAction {\r\n    type: VacancyActionTypes.SET_VACANCY_OFFICES;\r\n    payload: OfficeNameIdDto[];\r\n}\r\n\r\ninterface SetVacanciesTitlesAction {\r\n    type: VacancyActionTypes.SET_VACANCIES_TITLES;\r\n    payload: VacancyTitleDto[];\r\n}\r\n\r\ninterface SetCurrentVacancyAction {\r\n    type: VacancyActionTypes.SET_CURRENT_VACANCY;\r\n    payload: IVacancy;\r\n}\r\n\r\ninterface IncrementPreviewsAction {\r\n    type: VacancyActionTypes.INCREMENT_PREVIEWS;\r\n    payload: number;\r\n}\r\n\r\ninterface UpdateVacancyIsActiveStatus {\r\n    type: VacancyActionTypes.UPDATE_VACANCY_ISACTIVE_STATUS;\r\n    payload: IVacancy;\r\n}\r\n\r\ninterface CreateVacancy {\r\n    type: VacancyActionTypes.CREATE_VACANCY;\r\n    payload: IVacancy;\r\n}\r\n\r\ninterface UpdateVacancy {\r\n    type: VacancyActionTypes.UPDATE_VACANCY;\r\n    payload: IVacancy;\r\n}\r\n\r\nexport type VacancyAction = GetVacanciesAction |\r\n    GetVacancyByIdAction |\r\n    LoadMoreVacanciesAction |\r\n    SetErrorVacancyAction |\r\n    SetLoadingVacancyAction |\r\n    SetFiltersErrorAction |\r\n    SetFiltersLoadingAction |\r\n    SetPageVacancyAction |\r\n    SetVacancyActiveFilterAction |\r\n    SetVacancyOfficeFilterAction |\r\n    SetVacancySearchCriteriaAction |\r\n    SetVacancyOfficesAction |\r\n    SetVacanciesTitlesAction |\r\n    SetCurrentVacancyAction |\r\n    IncrementPreviewsAction |\r\n    UpdateVacancyIsActiveStatus |\r\n    CreateVacancy |\r\n    UpdateVacancy\r\n","import axios from 'axios';\r\nimport { IVacancy, VacancyStatus, VacancyTitleDto } from '../types/vacancy';\r\nimport { ISearchResult } from '../types/common/searchResult';\r\nimport { OrderType } from '../types/common/orderType';\r\n\r\n/**\r\n * Get list of vacancies for current office\r\n * @param limit<number> Page size\r\n * @param page<number> Current page\r\n * @param search<string> Autocompleted search\r\n * @param vacancyStatus<VacancyStatus> Means Active / Disabled / All vacancy 'isActive' status\r\n * @param officeId<string> Choosed office\r\n * @param sortField<string> Field for sorting\r\n * @param order<OrderType> Sort direction (Ascending / Descending / None)\r\n */\r\nexport async function getVacanciesAxios(\r\n    limit: number,\r\n    page: number,\r\n    search: string,\r\n    vacancyStatus: VacancyStatus,\r\n    officeId: string,\r\n    sortField: string,\r\n    order: OrderType): Promise<ISearchResult<IVacancy>> {\r\n    return (\r\n        await axios.get(`/vacancy/get?limit=${limit}&page=${page}&search=${search}&vacancyStatus=${vacancyStatus.toString()}&officeId=${officeId}&sortField=${sortField}&order=${order}`)).data;\r\n}\r\n\r\n/**\r\n * Get vacancy specified by identifier\r\n * @param id<string> Vacancy identifier\r\n */\r\nexport async function getVacancyByIdAxios(id: number): Promise<IVacancy> {\r\n    return (await axios.get(`/vacancy/getbyid/${id.toString()}`)).data;\r\n}\r\n\r\n/**\r\n * Get sorted list of all vacancies titles\r\n * @param searchValue<string> Search paremeter\r\n * @param officeId<string> Identifier of the office which vacancy belongs. If it's '' in request query - means all offices.\r\n */\r\nexport async function searchVacanciesTitlesAxios(searchValue: string, officeId: string): Promise<VacancyTitleDto[]> {\r\n    return (await axios.get(`/vacancy/searchvacanciestitles?searchValue=${searchValue}&officeId=${officeId}`)).data;\r\n}\r\n\r\n/**\r\n * @param id<string> Vacancy identifier\r\n * @param number<string> Previews amount\r\n */\r\nexport async function incrementPreviewsAxios(id: number, number: number): Promise<void> {\r\n    await axios.patch(`/vacancy/partialvacancyupdate/${id}`, [{ op: \"replace\", path: \"/previews\", value: number }]);\r\n}\r\n\r\n/**\r\n * @param id<string> Vacancy identifier\r\n * @param isActive<boolean> Vacancy status\r\n */\r\nexport async function updateVacancyIsActiveStatusAxios(id: number, isActive: boolean): Promise<void> {\r\n    await axios.patch(`/vacancy/partialvacancyupdate/${id}`, [{ op: \"replace\", path: \"/isactive\", value: isActive }]);\r\n}\r\n\r\n/**\r\n * Creates a new vacancy\r\n * @param vacancy<IVacancy> object of type IVacancy\r\n * @returns<IVacancy> Created vacancy\r\n */\r\nexport async function createVacancyAxios(vacancy: IVacancy): Promise<IVacancy> {\r\n    return (await axios.post(\"/vacancy/create\", vacancy)).data;\r\n}\r\n\r\n/**\r\n * Updates the existing vacancy\r\n * @param vacancy<IVacancy> Object of type IVacancy\r\n * @returns<IVacancy> Updated vacancy object\r\n */\r\nexport async function updateVacancyAxios(vacancy: IVacancy): Promise<IVacancy> {\r\n    return (await axios.put(\"/vacancy/update\", vacancy)).data;\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { getOfficeNameIdsAxios } from \"../../api/office\";\r\nimport { createVacancyAxios, getVacanciesAxios, getVacancyByIdAxios, incrementPreviewsAxios, searchVacanciesTitlesAxios, updateVacancyAxios, updateVacancyIsActiveStatusAxios } from \"../../api/vacancy\";\r\nimport { OrderType } from \"../../types/common/orderType\";\r\nimport { IVacancy, VacancyAction, VacancyActionTypes, VacancyStatus } from \"../../types/vacancy\";\r\n\r\nexport const getVacancies = (limit: number, page: number, search: string, vacancyStatus: VacancyStatus, officeId: string, sortField: string, order: OrderType) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        try {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: true });\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: null });\r\n            dispatch({\r\n                type: VacancyActionTypes.GET_VACANCIES, payload:\r\n                    await getVacanciesAxios(limit, page, search, vacancyStatus, officeId, sortField, order)\r\n            });\r\n        } catch (error) {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: error.message || \"Error of loading vacancies.\" })\r\n        } finally {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const getVacancyById = (id: number) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        try {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: true });\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: null });\r\n            dispatch({ type: VacancyActionTypes.GET_VACANCY_BY_ID, payload: await getVacancyByIdAxios(id) });\r\n        } catch (error) {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: error.message || \"Error of loading choosed vacancy.\" })\r\n        } finally {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const getOfficeNameIdDtos = () => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        try {\r\n            dispatch({ type: VacancyActionTypes.SET_FILTERS_LOADING, payload: true });\r\n            dispatch({ type: VacancyActionTypes.SET_FILTERS_ERROR, payload: null });\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_OFFICES, payload: await getOfficeNameIdsAxios() });\r\n        } catch (error) {\r\n            dispatch({ type: VacancyActionTypes.SET_FILTERS_ERROR, payload: error.message || \"Error of loading vacancies.\" })\r\n        } finally {\r\n            dispatch({ type: VacancyActionTypes.SET_FILTERS_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const getVacanciesTitles = (search: string, officeId: string) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        try {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: true });\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: null });\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCIES_TITLES, payload: await searchVacanciesTitlesAxios(search, officeId) });\r\n        } catch (error) {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: error.message || \"Error of loading vacancies titles.\" })\r\n        } finally {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const loadMoreVacancies = (limit: number, page: number, search: string, vacancyStatus: VacancyStatus, officeId: string, sortField: string, order: OrderType) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        try {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: true });\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: null });\r\n            dispatch({\r\n                type: VacancyActionTypes.LOAD_MORE_VACANCIES, payload:\r\n                    await getVacanciesAxios(limit, page, search, vacancyStatus, officeId, sortField, order)\r\n            });\r\n        } catch (error) {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: error.message || \"Error of loading vacancies.\" })\r\n        } finally {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Sets current page for vacancies store\r\n * @param page<number> current page\r\n */\r\nexport const setVacancyPage = (page: number) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        dispatch({ type: VacancyActionTypes.SET_VACANCY_PAGE, payload: page });\r\n    }\r\n}\r\n\r\nexport const setVacancyActiveFilter = (active: VacancyStatus) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        dispatch({ type: VacancyActionTypes.SET_VACANCY_ACTIVE_FILTER, payload: active });\r\n    }\r\n}\r\n\r\nexport const setVacancyLoading = (isLoading: boolean) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: isLoading });\r\n    }\r\n}\r\n\r\nexport const setVacancyOfficeFilter = (officeId: string) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        dispatch({ type: VacancyActionTypes.SET_VACANCY_OFFICE_FILTER, payload: officeId });\r\n    }\r\n}\r\n\r\nexport const setVacancySearchCriteria = (search: string) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        dispatch({ type: VacancyActionTypes.SET_VACANCY_SEARCH_CRITERIA, payload: search });\r\n    }\r\n}\r\n\r\nexport const setCurrentVacancy = (vacancy: IVacancy) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        dispatch({ type: VacancyActionTypes.SET_CURRENT_VACANCY, payload: vacancy });\r\n    }\r\n}\r\n\r\nexport const incrementPreviews = (id: number, number: number) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        try {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: true });\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: null });\r\n            await incrementPreviewsAxios(id, number);\r\n            dispatch({ type: VacancyActionTypes.INCREMENT_PREVIEWS, payload: number });\r\n        } catch (error) {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: error.message || \"Error of incrementing previews for the vacancy.\" })\r\n        } finally {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateVacancyIsActiveStatus = (id: number, vacancyToUpdate: IVacancy) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        try {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: true });\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: null });\r\n            await updateVacancyIsActiveStatusAxios(id, vacancyToUpdate.isActive);\r\n            dispatch({ type: VacancyActionTypes.UPDATE_VACANCY_ISACTIVE_STATUS, payload: vacancyToUpdate });\r\n        } catch (error) {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: error.message || \"Error of updating vacancy isActive status.\" })\r\n        } finally {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const createVacancy = (vacancy: IVacancy) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        try {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: true });\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: null });\r\n            dispatch({ type: VacancyActionTypes.CREATE_VACANCY, payload: await createVacancyAxios(vacancy) });\r\n        } catch (error) {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: error.message || \"Error while creating the vacancy.\" })\r\n        } finally {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateVacancy = (vacancy: IVacancy) => {\r\n    return async (dispatch: Dispatch<VacancyAction>) => {\r\n        try {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: true });\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: null });\r\n            dispatch({ type: VacancyActionTypes.UPDATE_VACANCY, payload: await updateVacancyAxios(vacancy) });\r\n        } catch (error) {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_ERROR, payload: error.message || \"Error while updating the vacancy.\" })\r\n        } finally {\r\n            dispatch({ type: VacancyActionTypes.SET_VACANCY_LOADING, payload: false });\r\n        }\r\n    }\r\n}\r\n","export enum OrderType {\r\n    Ascending,\r\n    Descending,\r\n    None\r\n}","import * as AuthActionCreators from \"./auth\";\r\nimport * as CandidateActionCreators from \"./candidate\";\r\nimport * as CompanyServiceActionCreators from \"./companyService\";\r\nimport * as CountryActionCreators from \"./country\";\r\nimport * as EmployeeActionCreators from \"./employee\";\r\nimport * as OfficeActionCreators from \"./office\";\r\nimport * as UserActionCreators from \"./user\";\r\nimport * as VacancyActionCreators from \"./vacancy\";\r\n\r\nexport const ActionCreators = {\r\n    ...AuthActionCreators,\r\n    ...CandidateActionCreators,\r\n    ...CompanyServiceActionCreators,\r\n    ...CountryActionCreators,\r\n    ...EmployeeActionCreators,\r\n    ...OfficeActionCreators,\r\n    ...UserActionCreators,\r\n    ...VacancyActionCreators\r\n}","import { bindActionCreators } from \"@reduxjs/toolkit\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { ActionCreators } from \"../store/action-creators\";\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch()\r\n    return bindActionCreators(ActionCreators, dispatch);\r\n}","import { SearchTextFilterProps } from \"./types\";\r\nimport { Grid, TextField } from \"@mui/material\";\r\n\r\nexport default function SearchText({ title, onSearch }: SearchTextFilterProps): JSX.Element {\r\n\r\n    return (\r\n        <Grid item>\r\n            <TextField\r\n                label={title}\r\n                type=\"text\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n                onChange={(event) => onSearch(event.target.value)}\r\n            />\r\n        </Grid>\r\n    )\r\n}","import { Checkbox, FormControlLabel, Grid } from \"@mui/material\";\r\nimport { ChangeEvent } from \"react\";\r\nimport { CheckBoxFilterProps } from \"./types\";\r\n\r\n\r\nexport default function CheckBoxFilter({ label, onCheck, isChecked }: CheckBoxFilterProps): JSX.Element {\r\n\r\n    return (\r\n        <Grid item>\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        onChange={(event: ChangeEvent<HTMLInputElement>, checked: boolean) => onCheck(checked)}\r\n                        checked={isChecked}\r\n                    />}\r\n                label={label} />\r\n        </Grid>\r\n    )\r\n}","import { Button, Grid } from \"@mui/material\";\r\nimport { CreateNewButtonProps } from \"./types\";\r\n\r\nexport default function CreateNewButton({ onAction, children }: CreateNewButtonProps): JSX.Element {\r\n\r\n    return (\r\n        <Grid item>\r\n            <Button\r\n                variant=\"contained\"\r\n                style={{ marginTop: '15px' }}\r\n                onClick={onAction}>\r\n                {children}\r\n            </Button>\r\n        </Grid>\r\n    )\r\n}","import { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { CandidateStatus } from \"../../../types/candidate\";\r\nimport { AdminCandidateFiltersProps } from \"./types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport SearchTextFilter from \"../../../components/FiltersArea/SearchTextFilter/SearchTextFilter\";\r\nimport CheckBoxFilter from \"../../../components/FiltersArea/CheckBoxFilter/CheckBoxFilter\";\r\nimport CreateNewButton from \"../../../components/FiltersArea/CreateNewButton/CreateNewButton\";\r\n\r\nexport default function AdminCandidateFilters({ onAddNew }: AdminCandidateFiltersProps) {\r\n    const { filters } = useTypedSelector(state => state.candidate);\r\n    const { setCandidatePage, setCandidateSearchCriteria, setCandidateActiveFilter } = useActions();\r\n\r\n    const activeCandidatesFilterHandler = (checked: boolean): void => {\r\n        checked ? setCandidateActiveFilter(CandidateStatus.Active) : setCandidateActiveFilter(CandidateStatus.All)\r\n    }\r\n\r\n    const onChangeSearch = (search: string): void => {\r\n        if (search.length === 0) setCandidateSearchCriteria(\"\");\r\n        if (search.length < 3) return;\r\n        setCandidatePage(1);\r\n        setCandidateSearchCriteria(search);\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2} direction='row' justifyContent={'space-between'} alignItems={'center'}>\r\n            <CheckBoxFilter label=\"Show only not dismissed\" onCheck={activeCandidatesFilterHandler} isChecked={filters.active === CandidateStatus.Active ? true : false} />\r\n            <SearchTextFilter title=\"Search candidate\" onSearch={onChangeSearch} />\r\n            <CreateNewButton onAction={onAddNew}>+ New Candidate</CreateNewButton>\r\n        </Grid>\r\n    )\r\n}","import { ReactNode } from \"react\";\r\n\r\nexport enum MessageAppearance {\r\n\tSMALL,\r\n\tREGULAR,\r\n\tLARGE\r\n}\r\n\r\nexport interface MessageProps {\r\n\tappearance: MessageAppearance;\r\n\tchildren: ReactNode;\r\n}","export const EMAIL_REG_EXP =/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n/**\r\n * Must contain at least one number and one uppercase and lowercase letter, and at least 7 or more characters\r\n */\r\nexport const PASSWORD_REG_EXP =/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{7,}$/;\r\n\r\n/**\r\n * Must contain from 11 up to 13 characters\r\n * Valid formats: +31636363634, 1234567890, 075-63546725, 123-456-7890, (123)456-7890, (123) 456-7890, 123.456.7890\r\n */\r\n// eslint-disable-next-line no-useless-escape\r\nexport const PHONE_REG_EXP =/^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\r\n\r\n","import { Grid, Typography } from \"@mui/material\";\r\nimport { MessageAppearance, MessageProps } from \"./types\";\r\nimport './styles.css';\r\n\r\nexport default function ErrorMessage({ children, appearance }: MessageProps): JSX.Element {\r\n    let cssClass: string;\r\n    switch (appearance) {\r\n        case MessageAppearance.LARGE:\r\n            cssClass = 'error-message-large';\r\n            break;\r\n        default:\r\n            cssClass = 'error-message-regular';\r\n    }\r\n\r\n    return (\r\n        // <p style={{ textAlign: 'center' }}>\r\n        //     <Typography variant=\"body2\" component={'span'} sx={{ color: 'red' }}>\r\n        //         {message}\r\n        //     </Typography>\r\n        // </p>\r\n        <Grid container\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            my={appearance === MessageAppearance.LARGE ? 5 : 1}\r\n        >\r\n            <Typography\r\n                variant={appearance === MessageAppearance.LARGE ? \"h6\" : 'body2'}\r\n                component={'span'}\r\n                className={cssClass}\r\n            >\r\n                {children}\r\n            </Typography>\r\n        </Grid>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport moment from \"moment\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { AdminCandidateFormProps } from \"./types\";\r\nimport { ICandidate } from \"../../../types/candidate\";\r\nimport { EMAIL_REG_EXP, PHONE_REG_EXP } from \"../../../types/common/RegularExpressions\";\r\nimport { Box, Button, Checkbox, FormControlLabel, Grid, IconButton, InputAdornment, Modal, TextField, Typography } from \"@mui/material\";\r\nimport { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\r\nimport PhoneIcon from '@mui/icons-material/Phone';\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\n\r\nexport default function AdminCandidateForm({ candidate, closeForm }: AdminCandidateFormProps): JSX.Element {\r\n    const { createCandidate, updateCandidate } = useActions();\r\n    const [error, setError] = useState<null | string>(null);\r\n    const [joinedAtValue, setJoinedAtValue] = useState<Date>(candidate.joinedAt);\r\n\r\n    const validationSchema = Yup.object({\r\n        id: Yup.number()\r\n            .required(),\r\n        fullName: Yup.string()\r\n            .required()\r\n            .min(1, 'Full Name must be at least 1 character.')\r\n            .max(50, 'The field FullName may not be greater than 50 characters.'),\r\n        email: Yup.string()\r\n            .max(50, 'The field Email may not be greater than 50 characters.')\r\n            .matches(EMAIL_REG_EXP, \"Required field Email is not valid.\"),\r\n        phone: Yup.string()\r\n            .matches(PHONE_REG_EXP, 'Phone number is not valid. Must contain from 11 up to 13 characters, valid formats: +31636363634, 1234567890, 075-63546725, 123-456-7890, (123)456-7890, (123) 456-7890, 123.456.7890'),\r\n        notes: Yup.string()\r\n            .required()\r\n            .min(1, 'Notes must be at least 1 characters.'),\r\n        joinedAt: Yup.date()\r\n            .required('Choose the date.'),\r\n        vacancyId: Yup.number()\r\n            .positive()\r\n            .required('Vacancy Id is required.')\r\n    })\r\n\r\n    const defaultValues: ICandidate = {\r\n        id: candidate.id,\r\n        fullName: candidate.fullName,\r\n        email: candidate.email,\r\n        phone: candidate.phone,\r\n        notes: candidate.notes,\r\n        isDismissed: candidate.isDismissed,\r\n        joinedAt: candidate.joinedAt,\r\n        vacancyId: candidate.vacancyId !== 0 ? candidate.vacancyId : null // ???\r\n    }\r\n\r\n    const { control, handleSubmit, formState: { errors }, register, reset } = useForm({\r\n        resolver: yupResolver(validationSchema),\r\n        defaultValues\r\n    })\r\n\r\n    const onSubmit = async (candidate: ICandidate): Promise<void> => {\r\n        candidate.joinedAt = joinedAtValue;\r\n        candidate.id === 0 ? createCandidate(candidate) : updateCandidate(candidate);\r\n        onCancelHandler();\r\n    }\r\n\r\n    const onCancelHandler = () => {\r\n        setError(null);\r\n        reset();\r\n        closeForm();\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={true}\r\n            onClose={closeForm}\r\n            sx={{ overflowY: 'scroll'}}\r\n        >\r\n            <Box sx={style}>\r\n                <form onSubmit={handleSubmit(onSubmit)} style={{ maxWidth: '360px' }}>\r\n                    <input {...register(\"id\")} type=\"hidden\" />\r\n                    <Grid container direction={'column'} justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }}>\r\n                        <Typography variant=\"h4\" component={'p'} sx={{ padding: '20px', fontWeight: 600 }}>\r\n                            Candidate Form\r\n                        </Typography>\r\n                        <Grid item>\r\n                            <Controller name=\"fullName\" control={control}\r\n                                render={({ field }) =>\r\n                                    <TextField  {...field} label=\"Full Name\" type=\"text\" margin=\"normal\" fullWidth\r\n                                        error={Boolean(errors.fullName)} helperText={errors.fullName?.message} />} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Controller\r\n                                name=\"email\"\r\n                                control={control}\r\n                                render={({ field }) =>\r\n                                    <TextField  {...field} label=\"Email\" type=\"email\" margin=\"normal\" fullWidth\r\n                                        InputProps={{\r\n                                            endAdornment: (\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <IconButton edge=\"end\" >\r\n                                                        <MailOutlineIcon />\r\n                                                    </IconButton>\r\n                                                </InputAdornment>),\r\n                                        }}\r\n                                        error={Boolean(errors.email)} helperText={errors.email?.message} />} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Controller name=\"phone\" control={control}\r\n                                render={({ field }) =>\r\n                                    <TextField {...field} label=\"Phone\" type=\"text\" margin=\"normal\" fullWidth\r\n                                        InputProps={{\r\n                                            endAdornment: (\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <IconButton edge=\"end\" >\r\n                                                        <PhoneIcon />\r\n                                                    </IconButton>\r\n                                                </InputAdornment>),\r\n                                        }}\r\n                                        error={Boolean(errors.phone)} helperText={errors.phone?.message} />} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Controller name=\"notes\" control={control}\r\n                                render={({ field }) =>\r\n                                    <TextField {...field} label=\"Notes\" fullWidth\r\n                                        margin=\"normal\" multiline rows={4} variant='outlined' style={{ height: 'none' }}\r\n                                        error={Boolean(errors.notes)} helperText={errors.notes?.message} />} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Controller name=\"isDismissed\" control={control}\r\n                                        render={({ field: props }) => (\r\n                                            <Checkbox\r\n                                                {...props}\r\n                                                checked={props.value}\r\n                                                onChange={(e) => props.onChange(e.target.checked)}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                }\r\n                                label=\"Dismissed?\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Controller name=\"joinedAt\" control={control}\r\n                                render={({ field }) =>\r\n                                    <LocalizationProvider dateAdapter={AdapterMoment}>\r\n                                        <DatePicker\r\n                                            {...field}\r\n                                            label=\"Joined At\"\r\n                                            format=\"DD/MM/YYYY\"\r\n                                            value={moment(joinedAtValue)}\r\n                                            onChange={(newValue) => setJoinedAtValue(newValue.toDate())}\r\n                                        />\r\n                                    </LocalizationProvider>\r\n                                } />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }} >\r\n                        <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                            <Button variant=\"outlined\" onClick={onCancelHandler}>Cancel</Button>\r\n                        </Grid>\r\n                        <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                            <Button variant=\"outlined\" type=\"submit\">Send</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n                {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n            </Box >\r\n        </Modal >\r\n    )\r\n}","import { Box, Pagination } from \"@mui/material\";\r\nimport { ChangeEvent, useState } from \"react\";\r\nimport { TablePaginationProps } from \"./types\";\r\n\r\nexport default function TablePagination({ count, onChangePage }: TablePaginationProps): JSX.Element {\r\n    const [page, setPage] = useState(1);\r\n    const handleChange = (event: ChangeEvent<unknown>, value: number) => {\r\n        onChangePage(value);\r\n        setPage(value);\r\n    };\r\n\r\n    return (\r\n        <Box mt={3} mb={3} display=\"flex\" justifyContent={\"center\"} >\r\n            <Pagination count={count} page={page} onChange={handleChange} />\r\n        </Box>\r\n    )\r\n}","import { TableCell, TableHead, TableRow } from \"@mui/material\";\r\nimport { TableHeaderProps } from \"./types\";\r\n\r\nexport default function TableHeader({ titles }: TableHeaderProps): JSX.Element {\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                {titles.map((header, index) =>\r\n                    <TableCell key={index} align=\"center\">{header}</TableCell>)}\r\n            </TableRow>\r\n        </TableHead>\r\n    )\r\n}","import moment from \"moment\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { ICandidate } from \"../../../types/candidate\";\r\nimport { AdminCandidateTableProps } from \"./types\";\r\nimport { Divider, Paper, Switch, Table, TableBody, TableCell, TableContainer, TableRow, Tooltip } from \"@mui/material\";\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport TablePagination from \"../../../components/TablePagination/TablePagination\";\r\nimport TableHeader from \"../../../components/TableHeader/TableHeader\";\r\n\r\nexport default function AdminCandidateTable({ onEdit }: AdminCandidateTableProps): JSX.Element {\r\n    const { candidateSearchResult } = useTypedSelector(state => state.candidate);\r\n    const { updateCandidateIsDismissedStatus, setCandidatePage } = useActions();\r\n\r\n    const onChangeIsDismissed = (id: number): void => {\r\n        const choosedCandidate = candidateSearchResult.itemList.find(c => c.id === id);\r\n        const candidateToUpdate: ICandidate = { ...choosedCandidate };\r\n        candidateToUpdate.isDismissed = !choosedCandidate.isDismissed;\r\n        updateCandidateIsDismissedStatus(id, candidateToUpdate);\r\n    }\r\n\r\n    const onEditHandler = (id: number) => {\r\n        const choosedCandidate = candidateSearchResult.itemList.find(c => c.id === id);\r\n        const candidateToUpdate: ICandidate = {\r\n            id: choosedCandidate.id,\r\n            fullName: choosedCandidate.fullName,\r\n            email: choosedCandidate.email,\r\n            phone: choosedCandidate.phone,\r\n            notes: choosedCandidate.notes,\r\n            isDismissed: choosedCandidate.isDismissed,\r\n            joinedAt: choosedCandidate.joinedAt,\r\n            vacancyId: choosedCandidate.vacancyId\r\n        };\r\n        onEdit(candidateToUpdate);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <TableContainer component={Paper} sx={{ margin: '20px 0' }}>\r\n                <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                    <TableHeader titles={['Full Name', 'Email', 'Phone', 'Notes', 'Dismissed?', 'Joined', 'Vacancy', 'Actions']} />\r\n                    <TableBody>\r\n                        {candidateSearchResult.itemList.map((candidate) => (\r\n                            <TableRow key={candidate.id} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\r\n                                <TableCell component=\"th\" scope=\"row\">{candidate.fullName}</TableCell>\r\n                                <TableCell align=\"left\">{candidate.email}</TableCell>\r\n                                <TableCell align=\"left\">{candidate.phone}</TableCell>\r\n                                <TableCell align=\"left\">{candidate.notes.slice(0, 50).concat('...')}</TableCell>\r\n                                <TableCell align=\"left\">\r\n                                    <Switch checked={candidate.isDismissed} onClick={() => onChangeIsDismissed(candidate.id)} />\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{moment(candidate.joinedAt).format('DD/MM/YYYY')}</TableCell>\r\n                                <TableCell align=\"left\">{candidate.vacancyDto?.title.length > 50 ? candidate.vacancyDto?.title.slice(0, 50).concat('...') : candidate.vacancyDto?.title}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                        <Tooltip title=\"Edit Company Service\" placement=\"top\">\r\n                                            <EditIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: '#0072ea' }} onClick={() => onEditHandler(candidate.id)} />\r\n                                        </Tooltip>\r\n                                        <Divider orientation=\"vertical\" flexItem />\r\n                                        <Tooltip title=\"Remove Company Service\" placement=\"top\">\r\n                                            <DeleteIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: 'red' }} onClick={() => alert(\"Delete is not implemented yet.\" + candidate.id)} />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                count={Math.ceil(candidateSearchResult.totalItemCount / candidateSearchResult.pageSize)}\r\n                onChangePage={(value: number) => setCandidatePage(value)}\r\n            />\r\n        </>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { ICandidate } from \"../../../types/candidate\";\r\nimport { OrderType } from \"../../../types/common/orderType\";\r\nimport AdminCandidateFilters from \"./AdminCandidateFilters\";\r\nimport AdminCandidateForm from \"./AdminCandidateForm\";\r\nimport AdminCandidateTable from \"./AdminCandidateTable\";\r\n\r\nexport default function AdminCandidatePage(): JSX.Element {\r\n    const { candidateSearchResult, filters } = useTypedSelector(state => state.candidate);\r\n    const { getCandidates } = useActions();\r\n    const [candidate, setCandidate] = useState<ICandidate | null>(null);\r\n\r\n    useEffect(() => {\r\n        getCandidates(candidateSearchResult.pageSize, candidateSearchResult.currentPageNumber, filters, \"FullName\", OrderType.Ascending)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [filters, candidateSearchResult.currentPageNumber]);\r\n\r\n    const onCreateEdit = (candidate: null | ICandidate) => setCandidate(candidate);\r\n\r\n    return (\r\n        <>\r\n            <PageHeader title=\"Candidates Management\" />\r\n            <AdminCandidateFilters onAddNew={() => setCandidate({ id: 0, fullName: '', email: '', phone: '', notes: '', isDismissed: false, joinedAt: new Date(), vacancyId: 0 })} />\r\n            <AdminCandidateTable onEdit={onCreateEdit} />\r\n            {candidate && <AdminCandidateForm candidate={candidate} closeForm={() => setCandidate(null)} />}\r\n        </>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { AdminCountryFormProps } from \"./types\";\r\nimport { ICountry } from \"../../../types/country\";\r\nimport { Button, Grid, SwipeableDrawer, TextField, Typography } from \"@mui/material\";\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function AdminCountryForm({ country, closeForm }: AdminCountryFormProps): JSX.Element {\r\n    const { createCountry, updateCountry } = useActions();\r\n    const [error, setError] = useState<null | string>(null);\r\n\r\n    const toggleDrawer = (anchor: string, open: boolean) =>\r\n        (event: React.KeyboardEvent | React.MouseEvent) => {\r\n            if (event && event.type === 'keydown' &&\r\n                ((event as React.KeyboardEvent).key === 'Tab' || (event as React.KeyboardEvent).key === 'Shift')\r\n            ) {\r\n                return;\r\n            }\r\n            if (!open) closeForm();\r\n        };\r\n\r\n    const validationSchema = Yup.object({\r\n        id: Yup.number()\r\n            .required(),\r\n        name: Yup.string()\r\n            .required()\r\n            .min(1, 'Name must be at least 1 character.')\r\n            .max(20, 'The field Name may not be greater than 20 characters.'),\r\n        code: Yup.string()\r\n            .required()\r\n            .min(3, 'Code must be exactly 3 characters long.')\r\n            .max(3, 'Code must be exactly 3 characters long.')\r\n    })\r\n\r\n    const defaultValues: ICountry = {\r\n        id: country.id,\r\n        name: country.name,\r\n        code: country.code,\r\n        officeDtos: null\r\n    }\r\n\r\n    const { control, handleSubmit, formState: { errors }, register, reset } = useForm({\r\n        resolver: yupResolver(validationSchema),\r\n        defaultValues\r\n    })\r\n\r\n    const onSubmit = async (country: ICountry): Promise<void> => {\r\n        country.id === 0 ? createCountry(country) : updateCountry(country);\r\n        onCancelHandler();\r\n    }\r\n\r\n    const onCancelHandler = () => {\r\n        setError(null);\r\n        reset();\r\n        closeForm();\r\n    }\r\n\r\n    return (\r\n        <SwipeableDrawer\r\n            open={true}\r\n            anchor='left'\r\n            onClose={toggleDrawer('left', false)}\r\n            onOpen={toggleDrawer('left', true)}\r\n        >\r\n            <form onSubmit={handleSubmit(onSubmit)} style={{ maxWidth: '360px' }}>\r\n                <input {...register(\"id\")} type=\"hidden\" />\r\n                <Grid container direction=\"column\" justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }}>\r\n                    <Typography variant=\"h5\" component={'p'} sx={{ padding: '20px', fontWeight: 400 }}>\r\n                        Country Form\r\n                    </Typography>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"name\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField {...field} label=\"Name\" type=\"text\"\r\n                                    margin=\"normal\" fullWidth\r\n                                    error={Boolean(errors.name)} helperText={errors.name?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"code\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField {...field} label=\"Code\" type=\"text\"\r\n                                    margin=\"normal\" fullWidth\r\n                                    error={Boolean(errors.code)} helperText={errors.code?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }} >\r\n                    <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                        <Button variant=\"outlined\" onClick={onCancelHandler}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                        <Button variant=\"outlined\" type=\"submit\">\r\n                            Send\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n            {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n        </SwipeableDrawer>\r\n    )\r\n}","import { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { AdminCountryTableProps } from \"./types\";\r\nimport { Divider, Paper, Table, TableBody, TableCell, TableContainer, TableRow, Tooltip } from \"@mui/material\";\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { ICountry } from \"../../../types/country\";\r\nimport TablePagination from \"../../../components/TablePagination/TablePagination\";\r\nimport TableHeader from \"../../../components/TableHeader/TableHeader\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function AdminCountryTable({ onEdit }: AdminCountryTableProps): JSX.Element {\r\n    const { countrySearchResult, error } = useTypedSelector(state => state.country);\r\n    const { removeCountry, setCountryPage } = useActions();\r\n\r\n    const onEditHandler = (id: number) => {\r\n        const choosedCountry = countrySearchResult.itemList.find(c => c.id === id);\r\n        const countryToUpdate: ICountry = {\r\n            id: choosedCountry.id,\r\n            name: choosedCountry.name,\r\n            code: choosedCountry.code,\r\n        }\r\n        onEdit(countryToUpdate);\r\n    }\r\n\r\n    if (error) return <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>;\r\n\r\n    return (\r\n        <>\r\n            <TableContainer component={Paper} sx={{ margin: '20px 0' }}>\r\n                <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                    <TableHeader titles={['Name', 'Code', 'Offices', 'Actions']} />\r\n                    <TableBody>\r\n                        {countrySearchResult.itemList.map((country) => (\r\n                            <TableRow\r\n                                key={country.id}\r\n                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">{country.name}</TableCell>\r\n                                <TableCell align=\"left\">{country.code}</TableCell>\r\n                                <TableCell align=\"left\">{\r\n                                    country.officeDtos &&\r\n                                    country.officeDtos.map(office => {\r\n                                        return <p key={office.name}><span>{office.name + ', ' + office.address}</span></p>\r\n                                    })\r\n                                }</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                        <Tooltip title=\"Edit Country\" placement=\"top\">\r\n                                            <EditIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: '#0072ea' }} onClick={() => onEditHandler(country.id)} />\r\n                                        </Tooltip>\r\n                                        <Divider orientation=\"vertical\" flexItem />\r\n                                        <Tooltip title=\"Remove Country\" placement=\"top\">\r\n                                            <DeleteIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: 'red' }} onClick={() => removeCountry(country.id)} />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                count={Math.ceil(countrySearchResult.totalItemCount / countrySearchResult.pageSize)}\r\n                onChangePage={(value: number) => setCountryPage(value)}\r\n            />\r\n        </>\r\n    )\r\n}","import { Grid } from \"@mui/material\";\r\nimport CreateNewButton from \"../../../components/FiltersArea/CreateNewButton/CreateNewButton\";\r\nimport { AdminCountryFiltersProps } from \"./types\";\r\n\r\n\r\nexport default function AdminCountryFilters({ onAddNew }: AdminCountryFiltersProps): JSX.Element {\r\n\r\n    return (\r\n        <Grid container spacing={2} direction='row' justifyContent={'flex-end'} alignItems={'center'}>\r\n            <CreateNewButton onAction={onAddNew}>+ New Country</CreateNewButton>\r\n        </Grid>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { OrderType } from \"../../../types/common/orderType\";\r\nimport { ICountry } from \"../../../types/country\";\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\r\nimport AdminCountryForm from \"./AdminCountryForm\";\r\nimport AdminCountryTable from \"./AdminCountryTable\";\r\nimport AdminCountryFilters from \"./AdminCountryFilters\";\r\n\r\nexport default function AdminCountryPage(): JSX.Element {\r\n    const { countrySearchResult } = useTypedSelector(state => state.country);\r\n    const { getCountries } = useActions();\r\n    const [country, setCountry] = useState<ICountry | null>(null);\r\n\r\n    useEffect(() => {\r\n        getCountries(5, countrySearchResult.currentPageNumber, 'Name', OrderType.Ascending);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [countrySearchResult.currentPageNumber])\r\n\r\n    const onCreateEdit = (country: ICountry | null) => setCountry(country);\r\n\r\n    return (\r\n        <>\r\n            <PageHeader title=\"Countries Management\" />\r\n            <AdminCountryFilters onAddNew={() => setCountry({ id: 0, name: '', code: '' })} />\r\n            <AdminCountryTable onEdit={onCreateEdit} />\r\n            {country && <AdminCountryForm country={country} closeForm={() => setCountry(null)} />}\r\n        </>\r\n    )\r\n}","import { useTypedSelector } from '../../../hooks/useTypedSelector';\r\nimport { useActions } from '../../../hooks/useActions';\r\nimport { ICompanyService } from '../../../types/companyService';\r\nimport { AdminServiceTableProps } from './types';\r\nimport { Divider, Paper, Switch, Table, TableBody, TableCell, TableContainer, TableRow, Tooltip } from '@mui/material';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ErrorMessage from '../../../components/Messages/ErrorMessage';\r\nimport TablePagination from '../../../components/TablePagination/TablePagination';\r\nimport TableHeader from '../../../components/TableHeader/TableHeader';\r\nimport { MessageAppearance } from '../../../components/Messages/types';\r\n\r\nexport default function AdminServiceTable({ onEdit }: AdminServiceTableProps): JSX.Element {\r\n    const { serviceSearchResult, error } = useTypedSelector(state => state.service);\r\n    const { removeService, updateServiceIsActiveStatus, setServicePage } = useActions();\r\n\r\n    const onEditHandler = (id: number) => {\r\n        const choosedService = serviceSearchResult.itemList.find(s => s.id === id);\r\n        const serviceToUpdate: ICompanyService = {\r\n            id: choosedService.id,\r\n            title: choosedService.title,\r\n            description: choosedService.description,\r\n            imageUrl: choosedService.imageUrl,\r\n            isActive: choosedService.isActive\r\n        }\r\n        onEdit(serviceToUpdate);\r\n    }\r\n\r\n    const onChangeIsActive = (id: number) => {\r\n        const choosedService = serviceSearchResult.itemList.find(s => s.id === id);\r\n        const serviceToUpdate: ICompanyService = { ...choosedService };\r\n        serviceToUpdate.isActive = !choosedService.isActive;\r\n        updateServiceIsActiveStatus(id, serviceToUpdate);\r\n    }\r\n\r\n    if (error) return <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>;\r\n\r\n    return (\r\n        <>\r\n            <TableContainer component={Paper} sx={{ margin: '20px 0' }}>\r\n                <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                    <TableHeader titles={['Title', 'Description', 'Image Url', 'Is Active?', 'Actions']} />\r\n                    <TableBody>\r\n                        {serviceSearchResult.itemList.map((service) => (\r\n                            <TableRow\r\n                                key={service.id}\r\n                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {service.title}\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{service.description.slice(0, 50).concat('...')}</TableCell>\r\n                                <TableCell align=\"left\">{service.imageUrl.slice(0, 15).concat('...')}</TableCell>\r\n                                <TableCell align=\"left\">\r\n                                    <Switch checked={service.isActive} onClick={() => onChangeIsActive(service.id)} />\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                        <Tooltip title=\"Edit Company Service\" placement=\"top\">\r\n                                            <EditIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: '#0072ea' }} onClick={() => onEditHandler(service.id)} />\r\n                                        </Tooltip>\r\n                                        <Divider orientation=\"vertical\" flexItem />\r\n                                        <Tooltip title=\"Remove Company Service\" placement=\"top\">\r\n                                            <DeleteIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: 'red' }} onClick={() => removeService(service.id)} />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                count={Math.ceil(serviceSearchResult.totalItemCount / serviceSearchResult.pageSize)}\r\n                onChangePage={(value: number) => setServicePage(value)}\r\n            />\r\n        </>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { AdminServiceFormProps } from \"./types\";\r\nimport { ICompanyService } from \"../../../types/companyService\";\r\nimport { Button, Checkbox, FormControlLabel, Grid, SwipeableDrawer, TextField, Typography } from \"@mui/material\";\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function AdminServiceForm({ service, closeForm }: AdminServiceFormProps): JSX.Element {\r\n    const { createService, updateService } = useActions();\r\n    const [error, setError] = useState<null | string>(null);\r\n\r\n    const toggleDrawer = (anchor: string, open: boolean) =>\r\n        (event: React.KeyboardEvent | React.MouseEvent) => {\r\n            if (\r\n                event &&\r\n                event.type === 'keydown' &&\r\n                ((event as React.KeyboardEvent).key === 'Tab' ||\r\n                    (event as React.KeyboardEvent).key === 'Shift')\r\n            ) {\r\n                return;\r\n            }\r\n            if (!open) closeForm();\r\n        };\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string()\r\n            .required()\r\n            .min(2, 'Title must be at least 2 characters.')\r\n            .max(100, 'The field Title may not be greater than 100 characters.'),\r\n        description: Yup.string()\r\n            .required()\r\n            .min(6, 'Description must be at least 6 characters.')\r\n            .max(1024, 'The field Description may not be greater than 1024 characters.'),\r\n        imageUrl: Yup.string()\r\n            .required()\r\n            .min(2, 'ImageUrl must be at least 2 characters.')\r\n            .max(1024, 'The field ImageUrl may not be greater than 1024 characters.'),\r\n        isActive: Yup.boolean()\r\n            .required(),\r\n        id: Yup.number()\r\n            .required()\r\n    })\r\n\r\n    const defaultValues: { title: string, description: string, imageUrl: string, isActive: boolean, id: number } = {\r\n        title: service.title,\r\n        description: service.description,\r\n        imageUrl: service.imageUrl,\r\n        isActive: service.isActive,\r\n        id: service.id\r\n    }\r\n\r\n    const { control, handleSubmit, formState: { errors }, register, reset } = useForm({\r\n        resolver: yupResolver(validationSchema),\r\n        defaultValues\r\n    })\r\n\r\n    const onSubmit = async (service: ICompanyService): Promise<void> => {\r\n        service.id === 0 ? createService(service) : updateService(service);\r\n        onCancelHandler();\r\n    }\r\n\r\n    const onCancelHandler = () => {\r\n        setError(null);\r\n        reset();\r\n        closeForm();\r\n    }\r\n\r\n    return (\r\n        <SwipeableDrawer\r\n            open={true}\r\n            anchor='left'\r\n            onClose={toggleDrawer('left', false)}\r\n            onOpen={toggleDrawer('left', true)}\r\n        >\r\n            <form onSubmit={handleSubmit(onSubmit)} style={{ maxWidth: '360px' }}>\r\n                <input {...register(\"id\")} type=\"hidden\" />\r\n                <Grid container justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }}>\r\n                    <Typography variant=\"h5\" component={'p'} sx={{ padding: '20px', fontWeight: 400 }}>\r\n                        Company Service Form\r\n                    </Typography>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"title\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField\r\n                                    {...field}\r\n                                    label=\"Title\"\r\n                                    type=\"text\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    error={Boolean(errors.title)}\r\n                                    helperText={errors.title?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"description\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField\r\n                                    {...field}\r\n                                    label=\"Description\"\r\n                                    fullWidth\r\n                                    margin=\"normal\"\r\n                                    multiline\r\n                                    rows={4}\r\n                                    variant='outlined'\r\n                                    style={{ height: 'none' }}\r\n                                    error={Boolean(errors.description)}\r\n                                    helperText={errors.description?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"imageUrl\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField\r\n                                    {...field}\r\n                                    label=\"Image Url\"\r\n                                    type=\"text\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    error={Boolean(errors.imageUrl)}\r\n                                    helperText={errors.imageUrl?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Controller\r\n                                    name=\"isActive\"\r\n                                    control={control}\r\n                                    render={({ field: props }) => (\r\n                                        <Checkbox\r\n                                            {...props}\r\n                                            checked={props.value}\r\n                                            onChange={(e) => props.onChange(e.target.checked)}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            }\r\n                            label=\"Is Active?\"\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }} >\r\n                    <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                        <Button variant=\"outlined\" onClick={onCancelHandler}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                        <Button variant=\"outlined\" type=\"submit\">\r\n                            Send\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n            {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n        </SwipeableDrawer>\r\n    )\r\n}","import { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { CompanyServiceStatus } from \"../../../types/companyService\"\r\nimport { AdminServiceFiltersProps } from \"./types\";\r\nimport { Grid } from \"@mui/material\"\r\nimport CheckBoxFilter from \"../../../components/FiltersArea/CheckBoxFilter/CheckBoxFilter\";\r\nimport CreateNewButton from \"../../../components/FiltersArea/CreateNewButton/CreateNewButton\";\r\n\r\nexport default function AdminServiceFilters({ onAddNew }: AdminServiceFiltersProps): JSX.Element {\r\n    const { filters } = useTypedSelector(state => state.service);\r\n    const { setServiceActiveFilter } = useActions();\r\n\r\n    const activeServicesFilterHandler = (checked: boolean): void => {\r\n        checked ? setServiceActiveFilter(CompanyServiceStatus.Active) : setServiceActiveFilter(CompanyServiceStatus.All);\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2} direction='row' justifyContent={'space-between'} alignItems={'center'}>\r\n            <CheckBoxFilter label=\"Show only active\" onCheck={activeServicesFilterHandler} isChecked={filters.active === CompanyServiceStatus.Active ? true : false} />\r\n            <CreateNewButton onAction={onAddNew}>+ Create New</CreateNewButton>\r\n        </Grid>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { OrderType } from \"../../../types/common/orderType\";\r\nimport { ICompanyService } from \"../../../types/companyService\";\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\r\nimport AdminServiceTable from \"./AdminServiceTable\";\r\nimport AdminServiceForm from \"./AdminServiceForm\";\r\nimport AdminServiceFilters from \"./AdminServiceFilters\";\r\n\r\nexport default function AdminServicePage(): JSX.Element {\r\n    const { serviceSearchResult, filters } = useTypedSelector(state => state.service);\r\n    const { getServices } = useActions();\r\n    const [service, setService] = useState<null | ICompanyService>(null);\r\n\r\n    useEffect(() => {\r\n        getServices(5, serviceSearchResult.currentPageNumber, filters.active, OrderType.Ascending);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [serviceSearchResult.currentPageNumber, filters])\r\n\r\n    const onCreateEdit = (service: null | ICompanyService) => setService(service);\r\n\r\n    return (\r\n        <>\r\n            <PageHeader title=\"Services Management\" />\r\n            <AdminServiceFilters onAddNew={() => setService({ id: 0, title: '', description: '', imageUrl: '', isActive: true })} />\r\n            <AdminServiceTable onEdit={onCreateEdit} />\r\n            {service && <AdminServiceForm service={service} closeForm={() => setService(null)} />}\r\n        </>\r\n    )\r\n}\r\n\r\n","import { useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { AdminOfficeFormProps } from \"./types\";\r\nimport { IOffice } from \"../../../types/office\";\r\nimport { Button, FormControl, FormHelperText, Grid, InputLabel, MenuItem, Select, SwipeableDrawer, TextField, Typography } from \"@mui/material\";\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function AdminOfficeForm({ office, closeForm }: AdminOfficeFormProps): JSX.Element {\r\n    const { countrySearchResult } = useTypedSelector(state => state.country);\r\n    const { createOffice, updateOffice } = useActions();\r\n    const [error, setError] = useState<null | string>(null);\r\n\r\n    const countries = countrySearchResult.itemList;\r\n\r\n    const toggleDrawer = (anchor: string, open: boolean) =>\r\n        (event: React.KeyboardEvent | React.MouseEvent) => {\r\n            if (event && event.type === 'keydown' &&\r\n                ((event as React.KeyboardEvent).key === 'Tab' || (event as React.KeyboardEvent).key === 'Shift')\r\n            ) {\r\n                return;\r\n            }\r\n            if (!open) closeForm();\r\n        };\r\n\r\n    const validationSchema = Yup.object({\r\n        id: Yup.number()\r\n            .required(),\r\n        name: Yup.string()\r\n            .required()\r\n            .min(1, 'Name must be at least 1 character.')\r\n            .max(100, 'The field Name may not be greater than 100 characters.'),\r\n        description: Yup.string()\r\n            .required()\r\n            .min(1, 'Description must be at least 3 characters.')\r\n            .max(1000, 'Description may not be greater than 1000 characters.'),\r\n        address: Yup.string()\r\n            .required()\r\n            .min(1, 'Address must be at least 3 characters.')\r\n            .max(1000, 'The field Address may not be greater than 1000 characters.'),\r\n        latitude: Yup.number()\r\n            .required()\r\n            .min(0, 'Latitude must be at greater than 0.')\r\n            .max(180, 'The field Latitude may not be greater than 180.'),\r\n        longitude: Yup.number()\r\n            .required()\r\n            .min(0, 'Longitude must be at greater than 0.')\r\n            .max(180, 'The field Longitude may not be greater than 180.'),\r\n        countryId: Yup.number()\r\n            .required()\r\n    })\r\n\r\n    const defaultValues: IOffice = {\r\n        id: office.id,\r\n        name: office.name,\r\n        description: office.description,\r\n        address: office.address,\r\n        latitude: office.latitude,\r\n        longitude: office.longitude,\r\n        countryId: office.countryId\r\n    }\r\n\r\n    const { control, handleSubmit, formState: { errors }, register, reset } = useForm({\r\n        resolver: yupResolver(validationSchema),\r\n        defaultValues\r\n    })\r\n\r\n    const onSubmit = async (office: IOffice): Promise<void> => {\r\n        office.id === 0 ? createOffice(office) : updateOffice(office);\r\n        onCancelHandler();\r\n    }\r\n\r\n    const onCancelHandler = () => {\r\n        setError(null);\r\n        reset();\r\n        closeForm();\r\n    }\r\n\r\n    return (\r\n        <SwipeableDrawer\r\n            open={true}\r\n            anchor='left'\r\n            onClose={toggleDrawer('left', false)}\r\n            onOpen={toggleDrawer('left', true)}\r\n        >\r\n            <form onSubmit={handleSubmit(onSubmit)} style={{ maxWidth: '360px' }}>\r\n                <input {...register(\"id\")} type=\"hidden\" />\r\n                <Grid container direction=\"column\" justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }}>\r\n                    <Typography variant=\"h5\" component={'p'} sx={{ padding: '20px', fontWeight: 400 }}>\r\n                        Office Form\r\n                    </Typography>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"name\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField {...field} label=\"Name\" type=\"text\"\r\n                                    margin=\"normal\" fullWidth\r\n                                    error={Boolean(errors.name)} helperText={errors.name?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"description\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField  {...field} label=\"Description\"\r\n                                    fullWidth margin=\"normal\" multiline rows={4} variant='outlined' style={{ height: 'none' }}\r\n                                    error={Boolean(errors.description)} helperText={errors.description?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"address\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField {...field} label=\"Address\" type=\"text\"\r\n                                    margin=\"normal\" fullWidth\r\n                                    error={Boolean(errors.address)} helperText={errors.address?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"latitude\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField {...field} label=\"Latitude\" type=\"number\"\r\n                                    margin=\"normal\" fullWidth\r\n                                    error={Boolean(errors.latitude)} helperText={errors.latitude?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"longitude\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField {...field} label=\"Longitude\" type=\"number\"\r\n                                    margin=\"normal\" fullWidth\r\n                                    error={Boolean(errors.longitude)} helperText={errors.longitude?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <FormControl sx={{ width: 300 }}>\r\n                            <InputLabel id=\"level-label\">Country</InputLabel>\r\n                            <Controller\r\n                                name=\"countryId\"\r\n                                defaultValue={countries[0].id}\r\n                                control={control}\r\n                                render={({ field }) => (\r\n                                    <Select label=\"Country\" {...field}>\r\n                                        {countries.map((country) => <MenuItem key={country.id} value={country.id}>{country.name}</MenuItem>)}\r\n                                    </Select>\r\n                                )}\r\n                            />\r\n                            <FormHelperText error={true}>{errors.countryId?.message}</FormHelperText>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }} >\r\n                    <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                        <Button variant=\"outlined\" onClick={onCancelHandler}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                        <Button variant=\"outlined\" type=\"submit\">\r\n                            Send\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n            {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n        </SwipeableDrawer>\r\n    )\r\n}","import { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { AdminOfficeTableProps } from \"./types\";\r\nimport { Divider, Paper, Table, TableBody, TableCell, TableContainer, TableRow, Tooltip } from \"@mui/material\";\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { IOffice } from \"../../../types/office\";\r\nimport TablePagination from \"../../../components/TablePagination/TablePagination\";\r\nimport TableHeader from \"../../../components/TableHeader/TableHeader\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function AdminOfficeTable({ onEdit }: AdminOfficeTableProps): JSX.Element {\r\n    const { officeSearchResult, error } = useTypedSelector(state => state.office);\r\n    const { removeOffice, setOfficePage } = useActions();\r\n\r\n    const onEditHandler = (id: number) => {\r\n        const choosedOffice = officeSearchResult.itemList.find(c => c.id === id);\r\n        const officeToUpdate: IOffice = {\r\n            id: choosedOffice.id,\r\n            name: choosedOffice.name,\r\n            description: choosedOffice.description,\r\n            address: choosedOffice.address,\r\n            latitude: choosedOffice.latitude,\r\n            longitude: choosedOffice.longitude,\r\n            countryId: choosedOffice.countryId\r\n        };\r\n        onEdit(officeToUpdate);\r\n    }\r\n\r\n    if (error) return <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>;\r\n\r\n    return (\r\n        <>\r\n            <TableContainer component={Paper} sx={{ margin: '20px 0' }}>\r\n                <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                    <TableHeader titles={['Name', 'Description', 'Address', 'Country', 'Vacancies', 'Actions']} />\r\n                    <TableBody>\r\n                        {officeSearchResult.itemList.map((office) => (\r\n                            <TableRow\r\n                                key={office.id}\r\n                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">{office.name}</TableCell>\r\n                                <TableCell align=\"left\">{office.description.slice(0, 15).concat('...')}</TableCell>\r\n                                <TableCell align=\"left\">{office.address.slice(0, 15).concat('...')}</TableCell>\r\n                                <TableCell align=\"center\">{office.countryDto?.code}</TableCell>\r\n                                <TableCell align=\"center\">{office.vacancyDtos?.length}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                        <Tooltip title=\"Edit Office\" placement=\"top\">\r\n                                            <EditIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: '#0072ea' }} onClick={() => onEditHandler(office.id)} />\r\n                                        </Tooltip>\r\n                                        <Divider orientation=\"vertical\" flexItem />\r\n                                        <Tooltip title=\"Remove Office\" placement=\"top\">\r\n                                            <DeleteIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: 'red' }} onClick={() => removeOffice(office.id)} />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                count={Math.ceil(officeSearchResult.totalItemCount / officeSearchResult.pageSize)}\r\n                onChangePage={(value: number) => setOfficePage(value)}\r\n            />\r\n        </>\r\n    )\r\n}","import { Grid } from \"@mui/material\";\r\nimport { AdminOfficeFiltersProps } from \"./types\";\r\nimport CreateNewButton from \"../../../components/FiltersArea/CreateNewButton/CreateNewButton\";\r\n\r\nexport default function AdminOfficeFilters({ onAddNew }: AdminOfficeFiltersProps): JSX.Element {\r\n\r\n    return (\r\n        <Grid container spacing={2} direction='row' justifyContent={'flex-end'} alignItems={'center'}>\r\n            <CreateNewButton onAction={onAddNew}>+ New Office</CreateNewButton>\r\n        </Grid>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { IOffice } from \"../../../types/office\";\r\nimport { OrderType } from \"../../../types/common/orderType\";\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\r\nimport AdminOfficeForm from \"./AdminOfficeForm\";\r\nimport AdminOfficeTable from \"./AdminOfficeTable\";\r\nimport AdminOfficeFilters from \"./AdminOfficeFilters\";\r\n\r\nexport default function AdminOfficePage(): JSX.Element {\r\n    const { officeSearchResult } = useTypedSelector(state => state.office);\r\n    const { countrySearchResult } = useTypedSelector(state => state.country);\r\n    const { getCountries, getOffices } = useActions();\r\n    const [office, setOffice] = useState<IOffice | null>(null);\r\n\r\n    useEffect(() => {\r\n        getCountries(100, countrySearchResult.currentPageNumber, 'Name', OrderType.Ascending);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getOffices(5, officeSearchResult.currentPageNumber, 'Name', OrderType.Ascending);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [officeSearchResult.currentPageNumber])\r\n\r\n    const onCreateEdit = (office: IOffice | null) => setOffice(office);\r\n\r\n    return (\r\n        <>\r\n            <PageHeader title=\"Offices Management\" />\r\n            {/* <CreateNewButton onAction={() => setOffice({ id: 0, name: '', description: '', address: '', latitude: 0, longitude: 0, countryId: countrySearchResult.itemList[0].id })}\r\n            >\r\n                + Create New\r\n            </CreateNewButton> */}\r\n            <AdminOfficeFilters onAddNew={() => setOffice({ id: 0, name: '', description: '', address: '', latitude: 0, longitude: 0, countryId: countrySearchResult.itemList[0].id })} />\r\n            <AdminOfficeTable onEdit={onCreateEdit} />\r\n            {office && <AdminOfficeForm office={office} closeForm={() => setOffice(null)} />}\r\n        </>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { AdminEmployeeFormProps } from \"./types\";\r\nimport { IEmployee } from \"../../../types/employee\";\r\nimport { EMAIL_REG_EXP } from \"../../../types/common/RegularExpressions\";\r\nimport { Button, FormControl, FormHelperText, Grid, IconButton, InputAdornment, InputLabel, MenuItem, Select, SwipeableDrawer, TextField, Typography } from \"@mui/material\";\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function AdminEmployeeForm({ employee, closeForm }: AdminEmployeeFormProps): JSX.Element {\r\n    const { offices } = useTypedSelector(state => state.vacancy);\r\n    const { createEmployee, updateEmployee } = useActions();\r\n    const [error, setError] = useState<null | string>(null);\r\n\r\n    const toggleDrawer = (anchor: string, open: boolean) =>\r\n        (event: React.KeyboardEvent | React.MouseEvent) => {\r\n            if (event && event.type === 'keydown' &&\r\n                ((event as React.KeyboardEvent).key === 'Tab' || (event as React.KeyboardEvent).key === 'Shift')\r\n            ) {\r\n                return;\r\n            }\r\n            if (!open) closeForm();\r\n        };\r\n\r\n    const validationSchema = Yup.object({\r\n        id: Yup.number()\r\n            .required(),\r\n        fullName: Yup.string()\r\n            .required()\r\n            .min(1, 'Full Name must be at least 1 character.')\r\n            .max(50, 'The field Full Name may not be greater than 50 characters.'),\r\n        email: Yup.string()\r\n            .max(50, 'The field Email may not be greater than 50 characters.')\r\n            .matches(EMAIL_REG_EXP, \"Required field Email is not valid and may not be greater than 50 characters.\"),\r\n        position: Yup.string()\r\n            .required()\r\n            .min(1, 'Position must be at least 1 character.')\r\n            .max(50, 'The field Position may not be greater than 50 characters.'),\r\n        description: Yup.string()\r\n            .required()\r\n            .min(1, 'Description must be at least 1 characters.')\r\n            .max(1024, 'The field Description may not be greater than 1024 characters.'),\r\n        avatarUrl: Yup.string()\r\n            .required()\r\n            .min(2, 'ImageUrl must be at least 2 characters.')\r\n            .max(1024, 'The field ImageUrl may not be greater than 1024 characters.'),\r\n        officeId: Yup.number()\r\n            .required('Office required.')\r\n    })\r\n\r\n    const defaultValues: IEmployee = {\r\n        id: employee.id,\r\n        fullName: employee.fullName,\r\n        email: employee.email,\r\n        position: employee.position,\r\n        description: employee.description,\r\n        avatarUrl: employee.avatarUrl,\r\n        officeId: employee.officeId,\r\n    }\r\n\r\n    const { control, handleSubmit, formState: { errors }, register, reset } = useForm({\r\n        resolver: yupResolver(validationSchema),\r\n        defaultValues\r\n    })\r\n\r\n    const onSubmit = async (employee: IEmployee): Promise<void> => {\r\n        employee.id === 0 ? createEmployee(employee) : updateEmployee(employee);\r\n        onCancelHandler();\r\n    }\r\n\r\n    const onCancelHandler = () => {\r\n        setError(null);\r\n        reset();\r\n        closeForm();\r\n    }\r\n\r\n    return (\r\n        <SwipeableDrawer\r\n            open={true}\r\n            anchor='left'\r\n            onClose={toggleDrawer('left', false)}\r\n            onOpen={toggleDrawer('left', true)}\r\n        >\r\n            <form onSubmit={handleSubmit(onSubmit)} style={{ maxWidth: '360px' }}>\r\n                <input {...register(\"id\")} type=\"hidden\" />\r\n                <Grid container direction=\"column\" justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }}>\r\n                    <Typography variant=\"h5\" component={'p'} sx={{ padding: '20px', fontWeight: 400 }}>\r\n                        Employee Form\r\n                    </Typography>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"fullName\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField {...field} label=\"Full Name\" type=\"text\"\r\n                                    margin=\"normal\" fullWidth\r\n                                    error={Boolean(errors.fullName)} helperText={errors.fullName?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"email\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField {...field} label=\"Email\" type=\"email\"\r\n                                    margin=\"normal\" fullWidth\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton edge=\"end\" >\r\n                                                    <MailOutlineIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>),\r\n                                    }}\r\n                                    error={Boolean(errors.email)} helperText={errors.email?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"position\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField {...field} label=\"Position\" type=\"text\"\r\n                                    margin=\"normal\" fullWidth\r\n                                    error={Boolean(errors.position)} helperText={errors.position?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"description\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField  {...field} label=\"Description\"\r\n                                    fullWidth margin=\"normal\" multiline rows={4} variant='outlined' style={{ height: 'none' }}\r\n                                    error={Boolean(errors.description)} helperText={errors.description?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller\r\n                            name=\"avatarUrl\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField {...field} label=\"Avatar Url\" type=\"text\"\r\n                                    margin=\"normal\" fullWidth\r\n                                    error={Boolean(errors.avatarUrl)} helperText={errors.avatarUrl?.message}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <FormControl sx={{ width: 300 }}>\r\n                            <InputLabel id=\"level-label\">Office</InputLabel>\r\n                            <Controller\r\n                                name=\"officeId\"\r\n                                defaultValue={offices[1].id}\r\n                                control={control}\r\n                                render={({ field }) => (\r\n                                    <Select label=\"Office\" {...field}>\r\n                                        {offices.slice(1).map((office) => <MenuItem key={office.id} value={office.id}>{office.name}</MenuItem>)}\r\n                                    </Select>\r\n                                )}\r\n                            />\r\n                            <FormHelperText error={true}>{errors.officeId?.message}</FormHelperText>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }} >\r\n                    <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                        <Button variant=\"outlined\" onClick={onCancelHandler}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                        <Button variant=\"outlined\" type=\"submit\">\r\n                            Send\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n            {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n        </SwipeableDrawer>\r\n    )\r\n}","import { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { IEmployee } from \"../../../types/employee\";\r\nimport { AdminEmployeeTableProps } from \"./types\";\r\nimport { Divider, Paper, Table, TableBody, TableCell, TableContainer, TableRow, Tooltip } from \"@mui/material\";\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport TablePagination from \"../../../components/TablePagination/TablePagination\";\r\nimport TableHeader from \"../../../components/TableHeader/TableHeader\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function AdminEmployeeTable({ onEdit }: AdminEmployeeTableProps): JSX.Element {\r\n    const { employeeSearchResult, error } = useTypedSelector(state => state.employee);\r\n    const { removeEmployee, setEmployeePage } = useActions();\r\n\r\n    const onEditHandler = (id: number) => {\r\n        const choosedEmployee = employeeSearchResult.itemList.find(e => e.id === id);\r\n        const employeeToUpdate: IEmployee = {\r\n            id: choosedEmployee.id,\r\n            fullName: choosedEmployee.fullName,\r\n            email: choosedEmployee.email,\r\n            position: choosedEmployee.position,\r\n            description: choosedEmployee.description,\r\n            avatarUrl: choosedEmployee.avatarUrl,\r\n            officeId: choosedEmployee.officeId\r\n        }\r\n        onEdit(employeeToUpdate);\r\n    }\r\n\r\n    if (error) return <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>;\r\n\r\n    return (\r\n        <>\r\n            <TableContainer component={Paper} sx={{ margin: '20px 0' }}>\r\n                <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                    <TableHeader titles={['Full Name', 'Email', 'Position', 'Description', 'Avatar Url', 'Office', 'Actions']} />\r\n                    <TableBody>\r\n                        {employeeSearchResult.itemList.map((employee) => (\r\n                            <TableRow\r\n                                key={employee.id}\r\n                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">{employee.fullName}</TableCell>\r\n                                <TableCell align=\"left\">{employee.email}</TableCell>\r\n                                <TableCell align=\"left\">{employee.position}</TableCell>\r\n                                <TableCell align=\"left\">{employee.description.slice(0, 15).concat('...')}</TableCell>\r\n                                <TableCell align=\"left\">{employee.avatarUrl.slice(0, 15).concat('...')}</TableCell>\r\n                                <TableCell align=\"left\">{employee.officeDto ? employee.officeDto.name : '...Please refresh the page...'}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                        <Tooltip title=\"Edit Employee\" placement=\"top\">\r\n                                            <EditIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: '#0072ea' }} onClick={() => onEditHandler(employee.id)} />\r\n                                        </Tooltip>\r\n                                        <Divider orientation=\"vertical\" flexItem />\r\n                                        <Tooltip title=\"Remove Employee\" placement=\"top\">\r\n                                            <DeleteIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: 'red' }} onClick={() => removeEmployee(employee.id)} />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                count={Math.ceil(employeeSearchResult.totalItemCount / employeeSearchResult.pageSize)}\r\n                onChangePage={(value: number) => setEmployeePage(value)}\r\n            />\r\n        </>\r\n    )\r\n}","import { AdminTeamFiltersProps } from \"./types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport CreateNewButton from \"../../../components/FiltersArea/CreateNewButton/CreateNewButton\";\r\n\r\nexport default function AdminTeamFilters({ onAddNew }: AdminTeamFiltersProps): JSX.Element {\r\n\r\n    return (\r\n        <Grid container spacing={2} direction='row' justifyContent={'flex-end'} alignItems={'center'}>\r\n            <CreateNewButton onAction={onAddNew}>+ New Employee</CreateNewButton>\r\n        </Grid>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { IEmployee } from \"../../../types/employee\";\r\nimport { OrderType } from \"../../../types/common/orderType\";\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\r\nimport AdminEmployeeForm from \"./AdminEmployeeForm\";\r\nimport AdminEmployeeTable from \"./AdminEmployeeTable\";\r\nimport AdminTeamFilters from \"./AdminTeamFilters\";\r\n\r\nexport default function AdminTeamPage(): JSX.Element {\r\n    const { employeeSearchResult } = useTypedSelector(state => state.employee);\r\n    const { offices } = useTypedSelector(state => state.vacancy);\r\n    const { getEmployees, getOfficeNameIdDtos } = useActions();\r\n    const [employee, setEmployee] = useState<IEmployee | null>(null);\r\n\r\n    useEffect(() => {\r\n        getEmployees(5, employeeSearchResult.currentPageNumber, employeeSearchResult.searchCriteria, 'FullName', OrderType.Ascending);\r\n        getOfficeNameIdDtos();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [employeeSearchResult.currentPageNumber])\r\n\r\n    const onCreateEdit = (employee: IEmployee | null) => setEmployee(employee);\r\n\r\n    return (\r\n        <>\r\n            <PageHeader title=\"Team Management\" />\r\n            <AdminTeamFilters onAddNew={() => setEmployee({ id: 0, fullName: '', email: '', position: '', description: '', avatarUrl: '', officeId: offices[1].id })} />\r\n            <AdminEmployeeTable onEdit={onCreateEdit} />\r\n            {employee && <AdminEmployeeForm employee={employee} closeForm={() => setEmployee(null)} />}\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { AutocompleteFilterProps } from \"./types\";\r\nimport { Autocomplete, Grid, TextField } from \"@mui/material\";\r\n\r\nexport default function AutocompleteFilter({ label, options, onSearch }: AutocompleteFilterProps): JSX.Element {\r\n\r\n    return (\r\n        <Grid item >\r\n            <Autocomplete\r\n                freeSolo\r\n                disableClearable\r\n                options={options.map((option) => option.value)}\r\n                onChange={(event: React.SyntheticEvent, values) => onSearch(event, values)}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        sx={{ width: 300 }}\r\n                        {...params}\r\n                        label={label}\r\n                        InputProps={{ ...params.InputProps, type: 'search' }}\r\n                    />\r\n                )}\r\n            />\r\n        </Grid>\r\n    )\r\n}","import { FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent } from \"@mui/material\";\r\nimport { SelectItemFilterProps } from \"./types\";\r\n\r\nexport default function SelectItemsFilter({ items, label, onSelectChanged, value }: SelectItemFilterProps): JSX.Element {\r\n\r\n    return (\r\n        <Grid item>\r\n            <FormControl sx={{ width: 300 }}>\r\n                <InputLabel id=\"demo-simple-select-label\">{label}</InputLabel>\r\n                <Select\r\n                    value={value}\r\n                    label={label}\r\n                    onChange={(event: SelectChangeEvent) => onSelectChanged(event.target.value)}\r\n                >\r\n                    {items.map((item) => <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>)}\r\n                </Select>\r\n            </FormControl>\r\n        </Grid>\r\n    )\r\n}","import { Grid } from \"@mui/material\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { AdminVacancyFiltersProps } from \"./types\";\r\nimport AutocompleteFilter from \"../../../components/FiltersArea/AutocompleteFilter/AutocompleteFilter\";\r\nimport CreateNewButton from \"../../../components/FiltersArea/CreateNewButton/CreateNewButton\";\r\nimport SelectItemsFilter from \"../../../components/FiltersArea/SelectItemFilter/SelectItemFilter\";\r\n\r\nexport default function AdminVacancyFilters({ onAddNew }: AdminVacancyFiltersProps): JSX.Element {\r\n    const { filters, offices, titles } = useTypedSelector(state => state.vacancy);\r\n    const { setVacancyPage, setVacancyOfficeFilter, setVacancySearchCriteria } = useActions();\r\n\r\n    const onSelectChanged = (newValue: string) => {\r\n        setVacancyPage(1);\r\n        setVacancyOfficeFilter(newValue);\r\n        setVacancySearchCriteria(\"\");\r\n    }\r\n\r\n    const searchTitleChanged = (event, values) => {\r\n        setVacancyPage(1);\r\n        setVacancySearchCriteria(values);\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2} direction='row' justifyContent={'space-between'} alignItems={'center'}>\r\n            <SelectItemsFilter\r\n                items={offices.map((o) => { return { id: o.id, name: o.name } })}\r\n                label=\"Office\"\r\n                onSelectChanged={onSelectChanged}\r\n                value={filters.officeId}\r\n            />\r\n            <AutocompleteFilter label=\"Search by title\" options={titles} onSearch={searchTitleChanged} />\r\n            <CreateNewButton onAction={onAddNew}>+ New Vacancy</CreateNewButton>\r\n        </Grid>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { AdminVacancyFormProps } from \"./types\";\r\nimport { IVacancy } from \"../../../types/vacancy\";\r\nimport { Box, Button, Checkbox, FormControl, FormControlLabel, FormHelperText, Grid, InputLabel, MenuItem, Modal, Select, TextField, Typography } from \"@mui/material\";\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nconst style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    overflow: 'scroll',\r\n    maxHeight: '90%',\r\n    display: 'block',\r\n    transform: 'translate(-50%, -50%)',\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    p: 4,\r\n};\r\n\r\nexport default function AdminVacancyForm({ vacancy, closeForm }: AdminVacancyFormProps): JSX.Element {\r\n    const { offices } = useTypedSelector(state => state.vacancy);\r\n    const { createVacancy, updateVacancy } = useActions();\r\n    const [error, setError] = useState<null | string>(null);\r\n    const [editorValue, setEditorValue] = useState(vacancy.description);\r\n\r\n    const validationSchema = Yup.object({\r\n        id: Yup.number()\r\n            .required(),\r\n        title: Yup.string()\r\n            .required()\r\n            .min(1, 'Title must be at least 1 character.')\r\n            .max(50, 'The field Title may not be greater than 50 characters.'),\r\n        // description: Yup.string()\r\n        //     .required('Description must be at least 1 characters.'),\r\n        previews: Yup.number()\r\n            .required(),\r\n        isActive: Yup.boolean()\r\n            .required(),\r\n        officeId: Yup.number()\r\n            .required('Office required.')\r\n    })\r\n\r\n    const defaultValues: IVacancy = {\r\n        id: vacancy.id,\r\n        title: vacancy.title,\r\n        description: vacancy.description,\r\n        previews: vacancy.previews,\r\n        isActive: vacancy.isActive,\r\n        officeId: vacancy.officeId\r\n    }\r\n\r\n    const { control, handleSubmit, formState: { errors }, register, reset } = useForm({\r\n        resolver: yupResolver(validationSchema),\r\n        defaultValues\r\n    })\r\n\r\n    const onSubmit = async (vacancy: IVacancy): Promise<void> => {\r\n        vacancy.description = editorValue;\r\n        vacancy.id === 0 ? createVacancy(vacancy) : updateVacancy(vacancy);\r\n        onCancelHandler();\r\n    }\r\n\r\n    const onCancelHandler = () => {\r\n        setError(null);\r\n        reset();\r\n        closeForm();\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={true}\r\n            onClose={closeForm}\r\n        >\r\n            <Box sx={style}>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <input {...register(\"id\")} type=\"hidden\" />\r\n                    <input {...register(\"previews\")} type=\"hidden\" />\r\n                    <Grid container direction=\"column\" justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }}>\r\n                        <Typography variant=\"h5\" component={'p'} sx={{ padding: '20px', fontWeight: 400, textAlign: 'center' }}>\r\n                            Vacancy Form\r\n                        </Typography>\r\n                        <Grid item>\r\n                            <Controller\r\n                                name=\"title\"\r\n                                control={control}\r\n                                render={({ field }) =>\r\n                                    <TextField {...field} label=\"Title\" type=\"text\"\r\n                                        margin=\"normal\" fullWidth\r\n                                        error={Boolean(errors.title)} helperText={errors.title?.message}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControl>\r\n                                <Controller\r\n                                    name=\"description\"\r\n                                    control={control}\r\n                                    render={({ field }) =>\r\n                                        <ReactQuill\r\n                                            {...field}\r\n                                            style={{ width: '800px' }}\r\n                                            theme=\"snow\"\r\n                                            value={editorValue}\r\n                                            onChange={setEditorValue}\r\n                                        />\r\n                                    }\r\n                                />\r\n                                <FormHelperText error={Boolean(errors.description)}>{errors.description?.message}</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Controller\r\n                                        name=\"isActive\"\r\n                                        control={control}\r\n                                        render={({ field: props }) => (\r\n                                            <Checkbox\r\n                                                {...props}\r\n                                                checked={props.value}\r\n                                                onChange={(e) => props.onChange(e.target.checked)}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                }\r\n                                label=\"Is Active?\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormControl sx={{ width: 300 }}>\r\n                                <InputLabel id=\"level-label\">Office</InputLabel>\r\n                                <Controller\r\n                                    name=\"officeId\"\r\n                                    defaultValue={offices[1].id}\r\n                                    control={control}\r\n                                    render={({ field }) => (\r\n                                        <Select label=\"Office\" {...field}>\r\n                                            {offices.slice(1).map((office) => <MenuItem key={office.id} value={office.id}>{office.name}</MenuItem>)}\r\n                                        </Select>\r\n                                    )}\r\n                                />\r\n                                <FormHelperText error={true}>{errors.officeId?.message}</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }} >\r\n                        <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                            <Button variant=\"outlined\" onClick={onCancelHandler}>\r\n                                Cancel\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                            <Button variant=\"outlined\" type=\"submit\">\r\n                                Send\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n                {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n            </Box >\r\n        </Modal >\r\n    )\r\n}","import { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { AdminVacancyTableProps } from \"./types\";\r\nimport { IVacancy } from \"../../../types/vacancy\";\r\nimport { Badge, Divider, Paper, Switch, Table, TableBody, TableCell, TableContainer, TableRow, Tooltip, Typography } from \"@mui/material\";\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport TablePagination from \"../../../components/TablePagination/TablePagination\";\r\nimport TableHeader from \"../../../components/TableHeader/TableHeader\";\r\n\r\nexport default function AdminVacancyTable({ onEdit }: AdminVacancyTableProps): JSX.Element {\r\n    const { vacancySearchResult } = useTypedSelector(state => state.vacancy);\r\n    const { setVacancyPage, updateVacancyIsActiveStatus } = useActions();\r\n\r\n    const onEditHandler = (id: number) => {\r\n        const vacancy = vacancySearchResult.itemList.find(v => v.id === id);\r\n        const vacancyToUpdate: IVacancy = {\r\n            id: vacancy.id,\r\n            title: vacancy.title,\r\n            description: vacancy.description,\r\n            previews: vacancy.previews,\r\n            isActive: vacancy.isActive,\r\n            officeId: vacancy.officeId\r\n        }\r\n        onEdit(vacancyToUpdate);\r\n    }\r\n\r\n    const onChangeIsActive = (id: number) => {\r\n        const choosedVacancy = vacancySearchResult.itemList.find(v => v.id === id);\r\n        const vacancyToUpdate: IVacancy = { ...choosedVacancy };\r\n        vacancyToUpdate.isActive = !choosedVacancy.isActive;\r\n        updateVacancyIsActiveStatus(id, vacancyToUpdate);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <TableContainer component={Paper} sx={{ margin: '20px 0' }}>\r\n                <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                    <TableHeader titles={['Title', 'Previews', 'Is Active?', 'Office', 'Actions']} />\r\n                    <TableBody>\r\n                        {vacancySearchResult.itemList.map((vacancy) => {\r\n                            return (\r\n                                <TableRow\r\n                                    key={vacancy.id}\r\n                                    sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                                >\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {\r\n                                            vacancy.candidates?.length > 0 ?\r\n                                                <Typography gutterBottom variant=\"body2\" component=\"div\" sx={{ cursor: 'pointer' }} onClick={() => alert('Should redirect to list of candidates belong to the vacancy. Is not implemented yet.')}>\r\n                                                    <Tooltip title=\"Show candidates (not dismissed)\" placement=\"top\">\r\n                                                        <Badge badgeContent={vacancy.candidates?.filter((c) => c.isDismissed === false).length} color=\"primary\">\r\n                                                            {vacancy.title.length > 60 ? vacancy.title.substring(0, 60) + ' ...' : vacancy.title}\r\n                                                        </Badge>\r\n                                                    </Tooltip>\r\n                                                </Typography>\r\n                                                :\r\n                                                <Typography gutterBottom variant=\"body2\" component=\"div\" >\r\n                                                    {vacancy.title.length > 60 ? vacancy.title.substring(0, 60) + ' ...' : vacancy.title}\r\n                                                </Typography>\r\n                                        }\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">{vacancy.previews}</TableCell>\r\n                                    <TableCell align=\"center\" >\r\n                                        <Switch checked={vacancy.isActive} onClick={() => onChangeIsActive(vacancy.id)} />\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">{vacancy.officeDto ? vacancy.officeDto.name : '...Please refresh the page...'}</TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                            <Tooltip title=\"Edit Company Service\" placement=\"top\">\r\n                                                <EditIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: '#0072ea' }} onClick={() => onEditHandler(vacancy.id)} />\r\n                                            </Tooltip>\r\n                                            <Divider orientation=\"vertical\" flexItem />\r\n                                            <Tooltip title=\"Remove Company Service\" placement=\"top\">\r\n                                                <DeleteIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: 'red' }} onClick={() => alert(\"Delete is not implemented yet.\" + vacancy.id)} />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                count={Math.ceil(vacancySearchResult.totalItemCount / vacancySearchResult.pageSize)}\r\n                onChangePage={(value: number) => setVacancyPage(value)}\r\n            />\r\n        </>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { IVacancy, VacancyStatus } from \"../../../types/vacancy\";\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\r\nimport AdminVacancyFilters from \"./AdminVacancyFilters\";\r\nimport AdminVacancyForm from \"./AdminVacancyForm\";\r\nimport AdminVacancyTable from \"./AdminVacancyTable\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function AdminVacancyPage(): JSX.Element {\r\n    const { errorFilters, errorVacancies, offices, vacancySearchResult, filters } = useTypedSelector(state => state.vacancy);\r\n    const { getOfficeNameIdDtos, getVacanciesTitles, getVacancies } = useActions();\r\n    const [vacancy, setVacancy] = useState<IVacancy | null>(null);\r\n\r\n    useEffect(() => {\r\n        getOfficeNameIdDtos();\r\n        getVacanciesTitles(vacancySearchResult.searchCriteria, filters.officeId);\r\n        getVacancies(5, vacancySearchResult.currentPageNumber, vacancySearchResult.searchCriteria,\r\n            VacancyStatus.All, filters.officeId, \"Title\", vacancySearchResult.order);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [vacancySearchResult.searchCriteria, filters.officeId, vacancySearchResult.currentPageNumber])\r\n\r\n    const onCreateEdit = (vacancy: null | IVacancy) => setVacancy(vacancy);\r\n\r\n    if (errorFilters) return <ErrorMessage appearance={MessageAppearance.REGULAR}>{errorFilters}</ErrorMessage>;\r\n    if (errorVacancies) return <ErrorMessage appearance={MessageAppearance.REGULAR}>{errorVacancies}</ErrorMessage>;\r\n\r\n    return (\r\n        <>\r\n            <PageHeader title=\"Vacancies Management\" />\r\n            <AdminVacancyFilters onAddNew={() => setVacancy({ id: 0, title: '', description: 'Vacancy Description', previews: 0, isActive: true, officeId: offices[1].id })} />\r\n            <AdminVacancyTable onEdit={onCreateEdit} />\r\n            {vacancy && <AdminVacancyForm vacancy={vacancy} closeForm={() => setVacancy(null)} />}\r\n        </>\r\n    )\r\n}","import { Box, Button } from \"@mui/material\";\r\nimport { LoadMoreButtonProps } from \"./types\";\r\n\r\nexport default function LoadMoreButton({ isDisabled, onClickHandler, children }: LoadMoreButtonProps): JSX.Element {\r\n    return (\r\n        <Box mt={3} mb={3} textAlign=\"center\">\r\n            <Button\r\n                onClick={onClickHandler}\r\n                variant=\"outlined\"\r\n                disabled={isDisabled}>\r\n                {children}\r\n            </Button>\r\n        </Box>\r\n    )\r\n}","import { Box, Grid } from \"@mui/material\";\r\nimport { ServiceCardProps } from \"./types\";\r\nimport './styles.css';\r\n\r\nexport default function ServiceCard({ service }: ServiceCardProps): JSX.Element {\r\n    return (\r\n        <>\r\n            <Grid item xs={12} md={6}>\r\n                <h5 className=\"card-header\">{service.title}</h5>\r\n                <p id=\"service-description\">{service.description}</p>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n                <Box component=\"img\" sx={{ width: '100%' }} alt=\"Company service img.\" src={service.imageUrl} />\r\n            </Grid>\r\n        </>\r\n    )\r\n\r\n}","import { Grid } from \"@mui/material\";\r\nimport ServiceCard from \"./ServiceCard\";\r\nimport { ServiceListProps } from \"./types\";\r\n\r\nexport default function ServicesList({ services }: ServiceListProps): JSX.Element {\r\n    return (\r\n        <Grid container spacing={2} className=\"page-chapter-container\">\r\n            {services.map(service => <ServiceCard key={service.id} service={service} />)}\r\n        </Grid>\r\n    )\r\n}","import CircularProgress from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport default function Spinner(): JSX.Element {\r\n    return (\r\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', textAlign: 'center', marginTop: '20px' }}>\r\n            <CircularProgress />\r\n        </Box>\r\n    );\r\n}","import { useEffect } from \"react\";\r\nimport { useActions } from \"../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\r\nimport { OrderType } from \"../../types/common/orderType\";\r\nimport { CompanyServiceStatus } from \"../../types/companyService\";\r\nimport LoadMoreButton from \"../../components/Button/LoadMoreButton\";\r\nimport ErrorMessage from \"../../components/Messages/ErrorMessage\";\r\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\r\nimport ServicesList from \"../../components/ServiceList/ServicesList\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport { Container } from \"@mui/material\";\r\nimport { MessageAppearance } from \"../../components/Messages/types\";\r\n\r\nexport default function ServicesPage(): JSX.Element {\r\n    const { error, serviceSearchResult, loading } = useTypedSelector(state => state.service);\r\n    const { getServices, loadMoreServices, setServicePage } = useActions();\r\n\r\n    useEffect(() => {\r\n        getServices(serviceSearchResult.pageSize, 1, CompanyServiceStatus.Active, OrderType.Ascending);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const loadMoreHandler = () => {\r\n        loadMoreServices(serviceSearchResult.pageSize, serviceSearchResult.currentPageNumber + 1, CompanyServiceStatus.Active, OrderType.Ascending);\r\n        setServicePage(serviceSearchResult.currentPageNumber + 1);\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container' >\r\n            <PageHeader\r\n                title=\"OUR SERVICES\"\r\n                text=\"Voluptatum deleniti atque corrupti quos dolores et quas molestias...\"\r\n            />\r\n            <ServicesList services={serviceSearchResult.itemList} />\r\n            {loading ?\r\n                <Spinner /> :\r\n                error && <ErrorMessage appearance={MessageAppearance.LARGE}>{error}</ErrorMessage>\r\n            }\r\n            <LoadMoreButton\r\n                onClickHandler={loadMoreHandler}\r\n                isDisabled={serviceSearchResult.currentPageNumber * serviceSearchResult.pageSize >= serviceSearchResult.totalItemCount}\r\n            >\r\n                {loading ? 'Loading...' : 'Load more'}\r\n            </LoadMoreButton>\r\n        </Container>\r\n    )\r\n}\r\n","import axios from 'axios';\r\nimport { IMailMessage } from '../types/common/mailMessage';\r\n\r\nexport async function sendEmailAxios(email: IMailMessage): Promise<string> {\r\n    return (await axios.post(\"/mailsubscriber/sendmessagetoadmin\", email)).data;\r\n}","import { useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { IMailMessage } from \"../../types/common/mailMessage\";\r\nimport { EMAIL_REG_EXP } from \"../../types/common/RegularExpressions\";\r\nimport { sendEmailAxios } from \"../../api/email\";\r\nimport { Button, Grid, IconButton, InputAdornment, Snackbar, TextField } from \"@mui/material\";\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\r\nimport ErrorMessage from \"../../components/Messages/ErrorMessage\";\r\nimport { MessageAppearance } from \"../../components/Messages/types\";\r\n\r\nexport default function ContactForm(): JSX.Element {\r\n    const [error, setError] = useState<null | string>(null);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [openSnackBar, setOpenSnackBar] = useState<boolean>(false);\r\n    const [serverConfirmation, setServerConfirmation] = useState<string>('');\r\n\r\n    const validationSchema = Yup.object({\r\n        senderName: Yup.string()\r\n            .required()\r\n            .min(2, 'Name must be at least 2 characters.')\r\n            .max(50, 'The field Name may not be greater than 50 characters.'),\r\n        senderEmail: Yup.string()\r\n            .max(50, 'The field Email may not be greater than 50 characters.')\r\n            .matches(EMAIL_REG_EXP, \"Required field Email is not valid.\"),\r\n        subject: Yup.string()\r\n            .required()\r\n            .min(2, 'Subject must be at least 2 characters.')\r\n            .max(255, 'The field Subject may not be greater than 255 characters.'),\r\n        message: Yup.string()\r\n            .required()\r\n            .min(2, 'Message must be at least 2 characters.')\r\n            .max(1024, 'The field Message may not be greater than 1024 characters.')\r\n    })\r\n\r\n    const defaultValues: IMailMessage = {\r\n        senderName: '', senderEmail: '', subject: '', message: ''\r\n    }\r\n\r\n    const { control, handleSubmit, formState: { errors }, reset } = useForm({ resolver: yupResolver(validationSchema), defaultValues })\r\n\r\n    const sendEmail = async (message: IMailMessage) => {\r\n        try {\r\n            setLoading(true);\r\n            const responceFromServer: string = await sendEmailAxios(message);\r\n            setServerConfirmation(responceFromServer);\r\n            setOpenSnackBar(true);\r\n        } catch (e) {\r\n            setError(\"Oops! Something while sending sending the message. Please try again later.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (message: IMailMessage): void => {\r\n        sendEmail(message);\r\n    }\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') return;\r\n        setOpenSnackBar(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid container justifyContent=\"space-between\" spacing={2} >\r\n                    <Grid item sm={6} xs={12}>\r\n                        <Controller\r\n                            name=\"senderName\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField  {...field} label=\"Name\" type=\"text\" margin=\"normal\" fullWidth\r\n                                    error={Boolean(errors.senderName)} helperText={errors.senderName?.message} />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <Controller\r\n                            name=\"senderEmail\"\r\n                            control={control}\r\n                            render={({ field }) =>\r\n                                <TextField  {...field} label=\"Email\" type=\"email\" margin=\"normal\" fullWidth\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton edge=\"end\" >\r\n                                                    <MailOutlineIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>),\r\n                                    }}\r\n                                    error={Boolean(errors.senderEmail)} helperText={errors.senderEmail?.message} />}\r\n                        />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <Grid>\r\n                    <Controller\r\n                        name=\"subject\"\r\n                        control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"Subject\" type=\"text\" margin=\"normal\" size=\"medium\" fullWidth\r\n                                error={Boolean(errors.subject)} helperText={errors.subject?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid>\r\n                    <Controller\r\n                        name=\"message\"\r\n                        control={control}\r\n                        render={({ field }) =>\r\n                            <TextField {...field} label=\"Message\" type=\"text\" margin=\"normal\" size=\"medium\" fullWidth\r\n                                error={Boolean(errors.message)} helperText={errors.message?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid container justifyContent=\"center\" spacing={2} sx={{ padding: '20px 0' }} >\r\n                    <Grid item sm={6} xs={12} sx={{ textAlign: 'center' }}>\r\n                        <Button variant=\"outlined\" onClick={() => reset()}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item sm={6} xs={12} sx={{ textAlign: 'center' }}>\r\n                        <Button variant=\"outlined\" type=\"submit\">\r\n                            {loading ? 'Sending...' : 'Send'}\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Snackbar open={openSnackBar} message={serverConfirmation} autoHideDuration={4000} onClose={handleClose} />\r\n            </form>\r\n            {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n        </>\r\n    )\r\n}","import { Grid, Typography } from \"@mui/material\";\r\nimport { IContactInfoCardProps } from \"./types\";\r\n\r\nimport AutoFixHigh from \"@mui/icons-material/AutoFixHigh\";\r\n\r\nexport default function ContactInfoCard({ contactInfoItem }: IContactInfoCardProps): JSX.Element {\r\n    return (\r\n        <Grid item xs={12} md={6} textAlign='center' sx={{ marginTop: '20px' }}>\r\n            <AutoFixHigh />\r\n            <br />\r\n            <Typography variant=\"h6\">\r\n                <strong>{contactInfoItem.title}</strong>\r\n            </Typography>\r\n            <br />\r\n            {contactInfoItem.lines.map((line) => <Typography key={line} variant=\"body2\">{line}</Typography>)}\r\n        </Grid>\r\n    )\r\n}","export interface IContactInfo {\r\n    title: string;\r\n    lines: string[];\r\n}\r\n\r\nexport interface IContactInfoCardProps {\r\n    contactInfoItem: IContactInfo;\r\n}\r\n\r\nexport const contactInfoItems: IContactInfo[] = [\r\n    { title: \"ADDRESS\", lines: [\"A108 Adam Street,\", \"New York, NY 535022\"] },\r\n    { title: \"CALL US\", lines: [\"+1 5589 55488 55\", \"+1 5589 22548 64\"] },\r\n    { title: \"EMAIL US\", lines: [\"contact@example.com\", \"info @example.com\"] },\r\n    { title: \"WORKING HOURS\", lines: [\"Mon - Fri: 9AM to 6PM\", \"Sunday: 9AM to 1PM\"] }\r\n]\r\n\r\n","import { Grid } from \"@mui/material\";\r\nimport ContactInfoCard from \"./ContactInfoCard\";\r\nimport { contactInfoItems } from \"./types\";\r\n\r\nexport default function ContactInfoCardsList(): JSX.Element {\r\n    return (\r\n        <Grid container>\r\n            {contactInfoItems.map((item) => <ContactInfoCard key={item.title} contactInfoItem={item} />)}\r\n        </Grid>\r\n    )\r\n}","import { Container, Grid, Typography } from \"@mui/material\";\r\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\r\nimport ContactForm from \"./ContactForm\";\r\nimport ContactInfoCardsList from \"./ContactInfoCardsList\";\r\n\r\nexport default function ContactPage(): JSX.Element {\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container' >\r\n            <PageHeader\r\n                title=\"CONTACT US\"\r\n                text=\"Lorem ipsum dolor...\"\r\n            />\r\n            <Grid container spacing={2} className=\"page-chapter-container\">\r\n                <Grid item xs={12} md={6}>\r\n                    <ContactInfoCardsList />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"h5\" textAlign={'center'}>\r\n                        Voluptatem dignissimos <strong>provident quasi corporis voluptates</strong>\r\n                    </Typography>\r\n                    <ContactForm />\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n","import Grid from '@mui/material/Grid';\r\nimport '../../index.css';\r\nimport { Props } from './types';\r\nimport { Typography } from '@mui/material';\r\nimport PageHeader from '../../components/PageHeader/PageHeader';\r\n\r\nexport default function ErrorPage({ status = '500', message = 'Internal Server Error' }: Props): JSX.Element {\r\n\r\n    return (\r\n        <Grid container direction=\"column\">\r\n            <Grid item>\r\n                <PageHeader title=\"Oops! Something went wrong.\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography component={'p'} sx={{ padding: '10px' }}>\r\n                    Error status: {status}\r\n                </Typography>\r\n                <Typography component={'p'} sx={{ color: 'red', padding: '10px' }}>\r\n                    {message}\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n\r\n};\r\n","import { Button, Container, Grid, Paper } from \"@mui/material\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { RouteNames } from '../../routing';\r\nimport './styles.css';\r\n\r\nexport default function HeaderChapter(): JSX.Element {\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <Paper sx={{ backgroundImage: 'url(https://source.unsplash.com/random)', backgroundSize: '100%', borderRadius: '0' }}>\r\n            <Container fixed maxWidth='md' >\r\n                <Grid container direction=\"column\" alignContent=\"center\" maxWidth=\"50%\">\r\n                    <Grid item mt={10} mb={3}>\r\n                        <h3 className=\"header-chapter-header\">Eivolo Solutions</h3>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <p id=\"description\">\r\n                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Illum quo non praesentium quas.\r\n                        </p>\r\n                    </Grid>\r\n                    <Grid item mt={4} mb={8}>\r\n                        <Button className='btn-transit' variant='contained' color='primary'\r\n                            onClick={() => { navigate(RouteNames.SERVICES); window.scroll(0, 0) }}\r\n                        >\r\n                            Learn more ...\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </Paper>\r\n    )\r\n}","import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { RouteNames } from \"../../routing\";\r\nimport { useActions } from \"../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\r\nimport { CompanyServiceStatus } from \"../../types/companyService\";\r\nimport { OrderType } from \"../../types/common/orderType\";\r\nimport ErrorMessage from \"../../components/Messages/ErrorMessage\";\r\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\r\nimport ServicesList from \"../../components/ServiceList/ServicesList\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport LoadMoreButton from \"../../components/Button/LoadMoreButton\";\r\nimport { MessageAppearance } from \"../../components/Messages/types\";\r\n\r\nexport default function ServiceChapter(): JSX.Element {\r\n    const { error, serviceSearchResult, loading } = useTypedSelector(state => state.service);\r\n    const { getServices } = useActions();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        getServices(serviceSearchResult.pageSize, 1, CompanyServiceStatus.Active, OrderType.Ascending);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <PageHeader\r\n                title=\"Services\"\r\n                text=\"Voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi.\"\r\n            />\r\n            {loading ?\r\n                <Spinner /> :\r\n                error ?\r\n                    <ErrorMessage appearance={MessageAppearance.LARGE}>{error}</ErrorMessage> :\r\n                    <ServicesList services={serviceSearchResult.itemList.slice(0, 3)} />\r\n            }\r\n            <LoadMoreButton isDisabled={error && error.length > 0} onClickHandler={() => { navigate(RouteNames.SERVICES); window.scroll(0, 0) }} >\r\n                See All\r\n            </LoadMoreButton>\r\n        </>\r\n    )\r\n}","import { Box, Card, CardContent, Grid, Typography } from \"@mui/material\";\r\nimport { EmployeeCardProps } from \"./types\";\r\nimport './styles.css';\r\n\r\nexport default function EmployeeCard({ employee }: EmployeeCardProps): JSX.Element {\r\n    return (\r\n        <Grid item xs={12} md={4} textAlign='center'>\r\n            <Card elevation={16}>\r\n                <Box\r\n                    component=\"img\"\r\n                    sx={{ width: '90%', paddingTop: '15px' }}\r\n                    alt=\"Employee photo.\"\r\n                    src={employee.avatarUrl}\r\n                />\r\n                <CardContent>\r\n                    {/* <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {employee.fullName} - {employee.position}\r\n                    </Typography> */}\r\n                    <p id=\"full-name\">{employee.fullName}</p>\r\n                    <p id=\"position\">{employee.position}</p>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {employee.description}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};","import { Grid } from \"@mui/material\";\r\nimport EmployeeCard from \"./EmployeeCard\";\r\nimport { EmployeeListProps } from \"./types\";\r\n\r\nexport default function EmployeesList({ employees }: EmployeeListProps): JSX.Element {\r\n    return (\r\n        <Grid container spacing={2} className=\"page-chapter-container\">\r\n            {employees.map(employee => <EmployeeCard employee={employee} key={employee.id} />)}\r\n        </Grid>\r\n    )\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useActions } from \"../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\r\nimport ErrorMessage from \"../../components/Messages/ErrorMessage\";\r\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport { OrderType } from \"../../types/common/orderType\";\r\nimport LoadMoreButton from \"../../components/Button/LoadMoreButton\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { RouteNames } from \"../../routing\";\r\nimport EmployeesList from \"../../components/EmployeeList/EmployeesList\";\r\nimport { MessageAppearance } from \"../../components/Messages/types\";\r\n\r\nexport default function TeamChapter(): JSX.Element {\r\n    const { error, employeeSearchResult, loading } = useTypedSelector(state => state.employee);\r\n    const { getEmployees } = useActions();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        getEmployees(employeeSearchResult.pageSize, 1, '', 'FullName', OrderType.Ascending)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <PageHeader\r\n                title=\"OUR TEAM\"\r\n                text=\"Magnam dolores commodi suscipit. Necessitatibus eius consequatur ex aliquid fuga eum quidem. Sit sint consectetur velit. Quisquam quos quisquam cupiditate. Et nemo qui impedit suscipit alias ea. Quia fugiat sit in iste officiis commodi quidem hic quas.\"\r\n            />\r\n            {loading ?\r\n                <Spinner /> :\r\n                error ?\r\n                    <ErrorMessage appearance={MessageAppearance.LARGE}>{error}</ErrorMessage> :\r\n                    <EmployeesList employees={employeeSearchResult.itemList} />\r\n            }\r\n            <LoadMoreButton isDisabled={error && error.length > 0} onClickHandler={() => { navigate(RouteNames.TEAM); window.scroll(0, 0) }} >\r\n                See All\r\n            </LoadMoreButton>\r\n        </>\r\n    )\r\n}","import { Container } from '@mui/material';\r\nimport AboutPage from '../About/AboutPage';\r\nimport ContactPage from '../Contact/ContactPage';\r\nimport HeaderChapter from './HeaderChapter';\r\nimport ServiceChapter from './ServiceChapter';\r\nimport TeamChapter from './TeamChapter';\r\n\r\nexport default function HomePage(): JSX.Element {\r\n    return (\r\n        <>\r\n            <HeaderChapter />\r\n\r\n            <Container maxWidth=\"lg\" className='layout-container' >\r\n                <AboutPage />\r\n\r\n                <ServiceChapter />\r\n\r\n                <TeamChapter />\r\n\r\n                <ContactPage />\r\n            </Container>\r\n\r\n        </>\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { ILoginDto } from \"../../../types/auth\";\r\nimport { EMAIL_REG_EXP, PASSWORD_REG_EXP } from \"../../../types/common/RegularExpressions\";\r\nimport { loginAxios } from \"../../../api/auth\";\r\nimport { RouteNames } from \"../../../routing\";\r\nimport { Button, Checkbox, FormControlLabel, Grid, IconButton, InputAdornment, TextField } from \"@mui/material\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function LoginForm(): JSX.Element {\r\n    const { login } = useActions();\r\n    const navigate = useNavigate();\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<null | string>(null);\r\n    const [showPassword, setShowPassword] = useState<boolean>(false);\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string()\r\n            .max(50, 'The field Email may not be greater than 50 characters.')\r\n            .matches(EMAIL_REG_EXP, \"Required field Email is not valid and may not be greater than 50 characters.\"),\r\n        password: Yup.string()\r\n            .max(100, 'The field Password may not be greater than 100 characters.')\r\n            .matches(PASSWORD_REG_EXP, \"Password is not valid. Must contain at least one number and one uppercase and lowercase letter, and lenght 7 up to 100 characters.\"),\r\n        remember: Yup.boolean()\r\n            .required()\r\n    })\r\n\r\n    const defaultValues: ILoginDto = { email: '', password: '', remember: true }\r\n\r\n    const { control, handleSubmit, formState: { errors }, reset } = useForm({\r\n        resolver: yupResolver(validationSchema), defaultValues\r\n    })\r\n\r\n    const onSubmit = async (loginModel: { email: string, password: string, remember: boolean }) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const authModel = await loginAxios(loginModel);\r\n            localStorage.setItem(\"auth\", JSON.stringify(authModel));\r\n            login(authModel);\r\n            reset();\r\n            navigate(RouteNames.HOME)\r\n        } catch (e) {\r\n            setError(e.message || 'Unknown server error.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    if (error) return <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"form-centered\">\r\n            <Grid container direction=\"column\" alignContent=\"center\" mt={2}>\r\n                <Grid item>\r\n                    <Controller\r\n                        name=\"email\"\r\n                        control={control}\r\n                        render={({ field }) =>\r\n                            <TextField {...field} label=\"Email\" type=\"email\" margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton edge=\"end\" >\r\n                                                <MailOutlineIcon />\r\n                                            </IconButton>\r\n                                        </InputAdornment>),\r\n                                }}\r\n                                error={Boolean(errors.email)} helperText={errors.email?.message}\r\n                            />\r\n                        }\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Controller name=\"password\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"Password\" type={showPassword ? 'text' : 'password'}\r\n                                margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                onClick={() => setShowPassword(!showPassword)}\r\n                                                onMouseDown={(event: React.MouseEvent<HTMLButtonElement>) => event.preventDefault()}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                error={Boolean(errors.password)} helperText={errors.password?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <FormControlLabel\r\n                        sx={{ marginTop: '10px' }}\r\n                        control={\r\n                            <Controller name=\"remember\" control={control}\r\n                                render={({ field: props }) =>\r\n                                    <Checkbox  {...props} checked={props.value}\r\n                                        onChange={(event) => props.onChange(event.target.checked)} />}\r\n                            />\r\n                        }\r\n                        label={<p>Remember Me?</p>}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container sx={{ marginTop: '-20px' }} spacing={5} direction=\"row\" justifyContent=\"center\">\r\n                        <Grid item>\r\n                            <Button variant=\"outlined\" onClick={() => navigate(RouteNames.HOME)}>\r\n                                Cancel\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button variant=\"outlined\" type=\"submit\">\r\n                                {loading ? 'Sending...' : 'Log In'}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n    )\r\n}\r\n","import { Container, Grid, Typography } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\r\nimport { RouteNames } from \"../../../routing\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nexport default function LoginPage(): JSX.Element {\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container' >\r\n            <PageHeader\r\n                title=\"Sign In.\"\r\n                text=\"Magnam dolores commodi suscipit. Necessitatibus eius consequatur ex aliquid fuga eum quidem.\"\r\n            />\r\n            <Grid container direction=\"column\" alignItems=\"center\">\r\n                <LoginForm />\r\n                <Typography component={'p'} my={3} >\r\n                    Or <Link to={RouteNames.REGISTER}>Sign Up</Link> if you don't have an account yet.\r\n                </Typography>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n","import { Container, Grid, Typography } from \"@mui/material\"\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\"\r\n\r\nexport default function RegisterCompletePage(): JSX.Element {\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container' >\r\n            <PageHeader\r\n                title=\"Registration successful.\"\r\n                text=\"Magnam dolores commodi suscipit. Necessitatibus eius consequatur ex aliquid fuga eum quidem.\"\r\n            />\r\n            <Grid container>\r\n                <Grid item>\r\n                    <Typography component={'p'} sx={{ padding: '30px 0' }}>\r\n                        Please check your mail-box and confirm the email-address before login.\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { RouteNames } from \"../../../routing\";\r\nimport { registerAxios } from \"../../../api/auth\";\r\nimport { IRegisterDto } from \"../../../types/auth\";\r\nimport { EMAIL_REG_EXP, PASSWORD_REG_EXP } from \"../../../types/common/RegularExpressions\";\r\nimport { Button, Grid, IconButton, InputAdornment, TextField } from \"@mui/material\";\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function RegisterForm(): JSX.Element {\r\n    const navigate = useNavigate();\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<null | string>(null);\r\n    const [showPassword, setShowPassword] = useState<boolean>(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState<boolean>(false);\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string()\r\n            .max(50, 'The field Email may not be greater than 50 characters.')\r\n            .matches(EMAIL_REG_EXP, \"Required field Email is not valid and may not be greater than 50 characters.\"),\r\n        password: Yup.string()\r\n            .max(100, 'The field Password may not be greater than 100 characters.')\r\n            .matches(PASSWORD_REG_EXP, \"Password is not valid. Must contain at least one number and one uppercase and lowercase letter, and lenght 7 up to 100 characters.\"),\r\n        confirmPassword: Yup.string()\r\n            .matches(PASSWORD_REG_EXP, \"Confirm Password is not valid. Must contain at least one number and one uppercase and lowercase letter, and lenght 7 up to 100 characters.\")\r\n    })\r\n\r\n    const defaultValues: IRegisterDto = { email: '', password: '', confirmPassword: '' }\r\n\r\n    const { control, handleSubmit, formState: { errors }, reset } = useForm({\r\n        resolver: yupResolver(validationSchema), defaultValues\r\n    })\r\n\r\n    const onSubmit = async (registerDto: IRegisterDto) => {\r\n        try {\r\n            setLoading(true)\r\n            setError(null)\r\n            await registerAxios({\r\n                email: registerDto.email,\r\n                password: registerDto.password,\r\n                confirmPassword: registerDto.confirmPassword\r\n            });\r\n            reset();\r\n            navigate(RouteNames.REGISTER_COMPLETE);\r\n        } catch (e) {\r\n            setError(e.message || 'Unknown server error.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"form-centered\">\r\n            <Grid container direction=\"column\" alignContent=\"center\" mt={2}>\r\n                <Grid item>\r\n                    <Controller name=\"email\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"Email\" type=\"email\"\r\n                                margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton edge=\"end\" >\r\n                                                <MailOutlineIcon />\r\n                                            </IconButton>\r\n                                        </InputAdornment>),\r\n                                }}\r\n                                error={Boolean(errors.email)} helperText={errors.email?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Controller name=\"password\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"Password\" type={showPassword ? 'text' : 'password'}\r\n                                margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                onClick={() => setShowPassword(!showPassword)}\r\n                                                onMouseDown={(event: React.MouseEvent<HTMLButtonElement>) => event.preventDefault()}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                error={Boolean(errors.password)} helperText={errors.password?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Controller name=\"confirmPassword\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField {...field} label=\"Confirm Password\" type={showConfirmPassword ? 'text' : 'password'}\r\n                                margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\r\n                                                onMouseDown={(event: React.MouseEvent<HTMLButtonElement>) => event.preventDefault()}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                {showConfirmPassword ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                error={Boolean(errors.confirmPassword)} helperText={errors.confirmPassword?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item my={3}>\r\n                    <Grid container spacing={5} direction=\"row\" justifyContent=\"center\">\r\n                        <Grid item>\r\n                            <Button variant=\"outlined\" onClick={() => navigate(RouteNames.HOME)}>\r\n                                Cancel\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button variant=\"outlined\" type=\"submit\">\r\n                                {loading ? 'Sending...' : 'Sign Up'}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n            </Grid>\r\n        </form>\r\n    )\r\n}\r\n","import { Container, Grid } from \"@mui/material\";\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\r\nimport RegisterForm from \"./RegisterForm\";\r\n\r\nexport default function RegisterPage(): JSX.Element {\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container' >\r\n            <PageHeader\r\n                title=\"Sign Up.\"\r\n                text=\"Magnam dolores commodi suscipit. Necessitatibus eius consequatur ex aliquid fuga eum quidem.\"\r\n            />\r\n            <Grid container direction=\"column\" alignItems=\"center\">\r\n                <RegisterForm />\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\r\nimport { useActions } from \"../../hooks/useActions\";\r\nimport { OrderType } from \"../../types/common/orderType\";\r\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\r\nimport EmployeesList from \"../../components/EmployeeList/EmployeesList\";\r\nimport ErrorMessage from \"../../components/Messages/ErrorMessage\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport LoadMoreButton from \"../../components/Button/LoadMoreButton\";\r\nimport { Container } from \"@mui/material\";\r\nimport { MessageAppearance } from \"../../components/Messages/types\";\r\n\r\nexport default function TeamPage(): JSX.Element {\r\n    const { error, employeeSearchResult, loading } = useTypedSelector(state => state.employee);\r\n    const { getEmployees, loadMoreEmployees, setEmployeePage } = useActions();\r\n\r\n    useEffect(() => {\r\n        getEmployees(employeeSearchResult.pageSize, 1, '', 'FullName', OrderType.Ascending)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const loadMoreHandler = () => {\r\n        loadMoreEmployees(3, employeeSearchResult.currentPageNumber + 1, '', 'FullName', OrderType.Ascending);\r\n        setEmployeePage(employeeSearchResult.currentPageNumber + 1);\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container' >\r\n            <PageHeader\r\n                title=\"OUR TEAM\"\r\n                text=\"Magnam dolores commodi suscipit. Necessitatibus eius consequatur ex aliquid fuga eum quidem. Sit sint consectetur velit. Quisquam quos quisquam cupiditate. Et nemo qui impedit suscipit alias ea. Quia fugiat sit in iste officiis commodi quidem hic quas.\"\r\n            />\r\n            <EmployeesList employees={employeeSearchResult.itemList} />\r\n            {loading ?\r\n                <Spinner /> :\r\n                error && <ErrorMessage appearance={MessageAppearance.LARGE}>{error}</ErrorMessage>\r\n            }\r\n            <LoadMoreButton\r\n                onClickHandler={loadMoreHandler}\r\n                isDisabled={employeeSearchResult.currentPageNumber * employeeSearchResult.pageSize >= employeeSearchResult.totalItemCount}\r\n            >\r\n                {loading ? 'Loading...' : 'Load more'}\r\n            </LoadMoreButton>\r\n        </Container>\r\n    )\r\n}\r\n","import { useActions } from \"../../../hooks/useActions\";\r\nimport { Grid } from \"@mui/material\"\r\nimport SearchTextFilter from \"../../../components/FiltersArea/SearchTextFilter/SearchTextFilter\"\r\n\r\nexport default function AdminUserFilters(): JSX.Element {\r\n    const { setUserPage, setUserSearchCriteria } = useActions();\r\n\r\n    const onChangeSearch = (search: string): void => {\r\n        if (search.length === 0) setUserSearchCriteria(\"\");\r\n        if (search.length < 3) return;\r\n        setUserPage(1);\r\n        setUserSearchCriteria(search);\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2} direction='row' justifyContent={'space-between'} alignItems={'center'}>\r\n            <SearchTextFilter title=\"Search user\" onSearch={onChangeSearch} />\r\n        </Grid>\r\n    )\r\n}","import { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { IUser } from \"../../../types/user\";\r\nimport { Paper, Switch, Table, TableBody, TableCell, TableContainer, TableRow, Tooltip } from \"@mui/material\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport TableHeader from \"../../../components/TableHeader/TableHeader\";\r\nimport TablePagination from \"../../../components/TablePagination/TablePagination\";\r\n\r\nexport default function AdminUserTable(): JSX.Element {\r\n    const { userSearchResult } = useTypedSelector(state => state.user);\r\n    const { setUserPage, updateUserEmailConfirmedStatus } = useActions();\r\n\r\n    const onChangeEmailConfirmed = (id: string): void => {\r\n        const choosedUser = userSearchResult.itemList.find(c => c.id === id);\r\n        const userToUpdate: IUser = { ...choosedUser };\r\n        userToUpdate.emailConfirmed = !choosedUser.emailConfirmed;\r\n        updateUserEmailConfirmedStatus(id, userToUpdate);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <TableContainer component={Paper} sx={{ margin: '20px 0' }}>\r\n                <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                    <TableHeader titles={['User Name', 'Email', 'Email Confirmed?', 'Phone', 'Avatar Url', 'Actions']} />\r\n                    <TableBody>\r\n                        {userSearchResult.itemList.map((user) => (\r\n                            <TableRow key={user.id} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\r\n                                <TableCell component=\"th\" scope=\"row\">{user.userName}</TableCell>\r\n                                <TableCell align=\"left\">{user.email}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <Switch checked={user.emailConfirmed} onClick={() => onChangeEmailConfirmed(user.id)} />\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{user.phoneNumber}</TableCell>\r\n                                <TableCell align=\"left\">{user.avatarUrl}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                        <Tooltip title=\"Remove User\" placement=\"top\">\r\n                                            <DeleteIcon sx={{ cursor: 'pointer', margin: '0 5px', fill: 'red' }} onClick={() => alert(\"Delete is not implemented yet.\" + user.id)} />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                count={Math.ceil(userSearchResult.totalItemCount / userSearchResult.pageSize)}\r\n                onChangePage={(value: number) => setUserPage(value)}\r\n            />\r\n        </>\r\n    )\r\n};\r\n","import { useEffect } from 'react';\r\nimport { useActions } from '../../../hooks/useActions';\r\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\r\nimport PageHeader from '../../../components/PageHeader/PageHeader';\r\nimport AdminUserFilters from './AdminUserFilters';\r\nimport AdminUserTable from './AdminUserTable';\r\n\r\nexport default function AdminUsersPage(): JSX.Element {\r\n    const { userSearchResult, filters } = useTypedSelector(state => state.user);\r\n    const { getUsers } = useActions();\r\n    \r\n    useEffect(() => {\r\n        getUsers(userSearchResult.pageSize, userSearchResult.currentPageNumber, filters)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [filters, userSearchResult.currentPageNumber]);\r\n    \r\n    return (\r\n        <>\r\n            <PageHeader title=\"Users Management\" />\r\n            <AdminUserFilters />\r\n            <AdminUserTable />\r\n        </>\r\n    );\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { useActions } from \"../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\r\nimport { Grid } from \"@mui/material\";\r\nimport SelectItemsFilter from \"../../components/FiltersArea/SelectItemFilter/SelectItemFilter\";\r\nimport AutocompleteFilter from \"../../components/FiltersArea/AutocompleteFilter/AutocompleteFilter\";\r\n\r\nexport default function VacanciesFilters(): JSX.Element {\r\n    const { getVacanciesTitles, setVacancyPage, setVacancyOfficeFilter, setVacancySearchCriteria } = useActions();\r\n    const { filters, offices, titles } = useTypedSelector(state => state.vacancy);\r\n\r\n    useEffect(() => {\r\n        getVacanciesTitles(\"\", filters.officeId);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [filters.officeId])\r\n\r\n    const onSelectChanged = (newValue: string) => {\r\n        setVacancyPage(1);\r\n        setVacancyOfficeFilter(newValue);\r\n        setVacancySearchCriteria(\"\");\r\n    }\r\n\r\n    const searchTitleChanged = (event, values) => {\r\n        setVacancyPage(1);\r\n        setVacancySearchCriteria(values);\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2} direction='row' justifyContent={'space-between'} alignItems={'center'}>\r\n            <SelectItemsFilter\r\n                items={offices.map((o) => { return { id: o.id, name: o.name } })}\r\n                label=\"Office\"\r\n                onSelectChanged={onSelectChanged}\r\n                value={filters.officeId}\r\n            />\r\n            <AutocompleteFilter label=\"Search by title\" options={titles} onSearch={searchTitleChanged} />\r\n        </Grid>\r\n    )\r\n}\r\n\r\n","import { Badge, Box, Button, Card, CardContent, Grid, Typography } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useActions } from \"../../hooks/useActions\";\r\nimport { RouteNames } from \"../../routing\";\r\nimport { VacancyCardProps } from \"./types\";\r\n\r\nexport default function VacancyCard({ vacancy }: VacancyCardProps): JSX.Element {\r\n    const navigate = useNavigate();\r\n    const { setCurrentVacancy, incrementPreviews } = useActions();\r\n\r\n    const showDetailesHandler = () => {\r\n        incrementPreviews(vacancy.id, vacancy.previews + 1);\r\n        setCurrentVacancy(vacancy);\r\n        navigate(RouteNames.VACANCY + \"/\" + vacancy.id);\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} md={4} textAlign='left'>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                        {vacancy.officeDto.name}\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\" sx={{ cursor: 'pointer' }} onClick={showDetailesHandler}>\r\n                        <Badge badgeContent={vacancy.previews} color=\"primary\">\r\n                            {vacancy.title.substring(0, 15) + ' ...'}\r\n                        </Badge>\r\n                    </Typography>\r\n                    <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                        {'Previews: ' + vacancy.previews}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\">\r\n                        {vacancy.description.substring(0, 20) + ' ...'}\r\n                    </Typography>\r\n                    <Box sx={{ textAlign: 'right' }}>\r\n                        <Button variant=\"outlined\" size=\"small\" onClick={showDetailesHandler}>More...</Button>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};","import { useTypedSelector } from \"../../hooks/useTypedSelector\";\r\nimport { Grid } from \"@mui/material\";\r\nimport VacancyCard from \"./VacancyCard\";\r\n\r\nexport default function VacanciesList(): JSX.Element {\r\n    const { vacancySearchResult } = useTypedSelector(state => state.vacancy)\r\n\r\n    return (\r\n        <Grid container spacing={2} sx={{ margin: '30px 0', padding: '0', width: '100%' }}>\r\n            {vacancySearchResult.itemList.map(vacancy => (<VacancyCard key={vacancy.id} vacancy={vacancy} />))}\r\n        </Grid>\r\n    )\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useActions } from \"../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\r\nimport LoadMoreButton from \"../../components/Button/LoadMoreButton\";\r\nimport ErrorMessage from \"../../components/Messages/ErrorMessage\";\r\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport VacanciesFilters from \"./VacanciesFilters\";\r\nimport VacanciesList from \"./VacanciesList\";\r\nimport { Container } from \"@mui/material\";\r\nimport { MessageAppearance } from \"../../components/Messages/types\";\r\n\r\nexport default function VacanciesPage(): JSX.Element {\r\n    const { errorFilters, errorVacancies, loadingFilters, loadingVacancies, vacancySearchResult, filters } = useTypedSelector(state => state.vacancy);\r\n    const { getOfficeNameIdDtos, getVacanciesTitles, getVacancies, setVacancyPage, loadMoreVacancies } = useActions();\r\n\r\n    useEffect(() => {\r\n        getOfficeNameIdDtos();\r\n        getVacanciesTitles(vacancySearchResult.searchCriteria, filters.officeId);\r\n        getVacancies(vacancySearchResult.pageSize, vacancySearchResult.currentPageNumber, vacancySearchResult.searchCriteria,\r\n            filters.active, filters.officeId, \"Title\", vacancySearchResult.order);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [vacancySearchResult.searchCriteria, filters.officeId])\r\n\r\n    const loadMoreHandler = () => {\r\n        loadMoreVacancies(vacancySearchResult.pageSize, vacancySearchResult.currentPageNumber + 1, vacancySearchResult.searchCriteria,\r\n            filters.active, filters.officeId, \"Title\", vacancySearchResult.order)\r\n        setVacancyPage(vacancySearchResult.currentPageNumber + 1);\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container' >\r\n            <PageHeader title=\"OUR VACANCIES\" />\r\n            {loadingFilters ?\r\n                <Spinner /> :\r\n                errorFilters ?\r\n                    <ErrorMessage appearance={MessageAppearance.LARGE}>{errorFilters}</ErrorMessage> :\r\n                    <VacanciesFilters />\r\n            }\r\n            {loadingVacancies ?\r\n                <Spinner /> :\r\n                errorVacancies ?\r\n                    <ErrorMessage appearance={MessageAppearance.LARGE}>{errorVacancies}</ErrorMessage> :\r\n                    <VacanciesList />\r\n            }\r\n            <LoadMoreButton\r\n                onClickHandler={loadMoreHandler}\r\n                isDisabled={vacancySearchResult.currentPageNumber * vacancySearchResult.pageSize >= vacancySearchResult.totalItemCount}\r\n            >\r\n                {loadingVacancies ? 'Loading...' : 'Load more'}\r\n            </LoadMoreButton>\r\n        </Container>\r\n    )\r\n}\r\n","import { useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { VacancyApplyFormProps } from \"./types\";\r\nimport { ICandidate } from \"../../types/candidate\";\r\nimport { createCandidateAxios } from \"../../api/candidate\";\r\nimport { Button, Grid, IconButton, InputAdornment, SwipeableDrawer, TextField, Typography } from \"@mui/material\";\r\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\r\nimport PhoneIcon from '@mui/icons-material/Phone';\r\nimport ErrorMessage from \"../../components/Messages/ErrorMessage\";\r\nimport { EMAIL_REG_EXP, PHONE_REG_EXP } from \"../../types/common/RegularExpressions\";\r\nimport { MessageAppearance } from \"../../components/Messages/types\";\r\n\r\nexport default function VacancyApplyForm({ candidate, closeForm, openForm, onSuccess }: VacancyApplyFormProps): JSX.Element {\r\n    const [error, setError] = useState<null | string>(null);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    const toggleDrawer =\r\n        (anchor: string, open: boolean) =>\r\n            (event: React.KeyboardEvent | React.MouseEvent) => {\r\n                if (\r\n                    event &&\r\n                    event.type === 'keydown' &&\r\n                    ((event as React.KeyboardEvent).key === 'Tab' ||\r\n                        (event as React.KeyboardEvent).key === 'Shift')\r\n                ) {\r\n                    return;\r\n                }\r\n                if (!open) closeForm(null);\r\n            };\r\n\r\n    const validationSchema = Yup.object({\r\n        fullName: Yup.string()\r\n            .required('The field Name is a required field (up to 50 characters).')\r\n            .max(50, 'The field Name may not be greater than 50 characters.'),\r\n        email: Yup.string()\r\n            .max(50, 'The field Email may not be greater than 50 characters.')\r\n            .matches(EMAIL_REG_EXP, \"Required field Email is not valid and may not be greater than 50 characters.\"),\r\n        phone: Yup.string()\r\n            .matches(PHONE_REG_EXP, 'Phone number is not valid. Must contain from 11 up to 13 characters, valid formats: +31636363634, 1234567890, 075-63546725, 123-456-7890, (123)456-7890, (123) 456-7890, 123.456.7890'),\r\n        notes: Yup.string()\r\n            .required('The field Note is a required field (up to 1024 characters).')\r\n            .max(1024, 'The field Note may not be greater than 1024 characters.'),\r\n        isDismissed: Yup.boolean()\r\n            .required(),\r\n        joinedAt: Yup.date()\r\n            .required(),\r\n        vacancyId: Yup.number()\r\n            .required()\r\n    })\r\n\r\n    const defaultValues: { fullName: string, email: string, phone: string, notes: string, isDismissed: boolean, joinedAt: Date, vacancyId: number } = {\r\n        fullName: candidate.fullName,\r\n        email: candidate.email,\r\n        phone: candidate.phone,\r\n        notes: candidate.notes,\r\n        isDismissed: candidate.isDismissed,\r\n        joinedAt: candidate.joinedAt,\r\n        vacancyId: candidate.vacancyId\r\n    }\r\n\r\n    const { control, handleSubmit, formState: { errors }, reset } = useForm({ resolver: yupResolver(validationSchema), defaultValues })\r\n\r\n    const createCandidate = async (candidate: ICandidate) => {\r\n        try {\r\n            setLoading(true);\r\n            await createCandidateAxios(candidate);\r\n            onSuccess();\r\n        } catch (e) {\r\n            setError(e.message || \"Oops! Something went wrong while joining the vacancy.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (candidate: ICandidate): void => {\r\n        createCandidate(candidate);\r\n        onCancelHandler();\r\n    }\r\n\r\n    const onCancelHandler = () => {\r\n        setError(null);\r\n        reset();\r\n        closeForm(null);\r\n    }\r\n\r\n    return (\r\n        <SwipeableDrawer open={openForm} anchor='left'\r\n            onClose={toggleDrawer('left', false)} onOpen={toggleDrawer('left', true)}\r\n        >\r\n            <form onSubmit={handleSubmit(onSubmit)} style={{ maxWidth: '360px' }}>\r\n                <Grid container justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }}>\r\n                    <Typography variant=\"h4\" component={'p'} sx={{ padding: '20px', fontWeight: 600 }}>\r\n                        Join Us!\r\n                    </Typography>\r\n                    <Grid item>\r\n                        <Controller name=\"fullName\" control={control}\r\n                            render={({ field }) =>\r\n                                <TextField  {...field} label=\"Name\" type=\"text\" margin=\"normal\" className=\"form-text-input\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton edge=\"end\" >\r\n                                                    <AccountCircleIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>),\r\n                                    }}\r\n                                    error={Boolean(errors.fullName)} helperText={errors.fullName?.message} />} />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller name=\"email\" control={control}\r\n                            render={({ field }) =>\r\n                                <TextField  {...field} label=\"Email\" type=\"email\" margin=\"normal\" className=\"form-text-input\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton edge=\"end\" >\r\n                                                    <MailOutlineIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>),\r\n                                    }}\r\n                                    error={Boolean(errors.email)} helperText={errors.email?.message} />} />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller name=\"phone\" control={control}\r\n                            render={({ field }) =>\r\n                                <TextField {...field} label=\"Phone\" type=\"text\" margin=\"normal\" className=\"form-text-input\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton edge=\"end\" >\r\n                                                    <PhoneIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>),\r\n                                    }}\r\n                                    error={Boolean(errors.phone)} helperText={errors.phone?.message} />} />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Controller name=\"notes\" control={control}\r\n                            render={({ field }) =>\r\n                                <TextField {...field} label=\"Notes\" margin=\"normal\" className=\"form-text-input\" multiline rows={4}\r\n                                    error={Boolean(errors.notes)} helperText={errors.notes?.message} />} />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container justifyContent=\"center\" spacing={2} sx={{ padding: '20px' }} >\r\n                    <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                        <Button variant=\"outlined\" onClick={onCancelHandler}>Cancel</Button>\r\n                    </Grid>\r\n                    <Grid item sm={6} sx={{ textAlign: 'center' }}>\r\n                        <Button variant=\"outlined\" type=\"submit\">\r\n                            {loading ? 'Sending...' : 'Send'}\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n            {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n        </SwipeableDrawer>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { useActions } from \"../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\r\nimport { ICandidate } from \"../../types/candidate\";\r\nimport { Box, Button, Container, Snackbar, Typography } from \"@mui/material\";\r\nimport ErrorMessage from \"../../components/Messages/ErrorMessage\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport VacancyApplyForm from \"./VacancyApplyForm\";\r\nimport { MessageAppearance } from \"../../components/Messages/types\";\r\n\r\nexport default function VacancyDetailes(): JSX.Element {\r\n    const { vacancyId } = useParams();\r\n    const { errorVacancies, currentVacancy, loadingVacancies } = useTypedSelector(state => state.vacancy)\r\n    const { auth } = useTypedSelector(state => state.auth)\r\n    const { getVacancyById } = useActions();\r\n    const [candidate, setCandidate] = useState<ICandidate | null>(null);\r\n    const [snackbarOpened, setSnackbarOpened] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        getVacancyById(Number(vacancyId));\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const onApply = (candidate: ICandidate | null) => {\r\n        setCandidate(candidate);\r\n    }\r\n\r\n    const handleClose = (event: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') return;\r\n        setSnackbarOpened(false);\r\n    };\r\n\r\n    if (errorVacancies) return <ErrorMessage appearance={MessageAppearance.REGULAR}>{errorVacancies}</ErrorMessage>;\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container'>\r\n            {loadingVacancies && <Spinner />}\r\n            <Typography variant=\"h4\" component={'p'} sx={{ padding: '20px', fontWeight: 600, textAlign: 'center' }}>\r\n                {currentVacancy.title}\r\n            </Typography>\r\n            <Box sx={{ textAlign: 'left', marginTop: '20px', marginBottom: '20px' }}>\r\n                <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                    {'Office: ' + currentVacancy.officeDto.name}\r\n                </Typography>\r\n            </Box>\r\n            <Typography variant=\"body2\" component={'div'}>\r\n                {ReactHtmlParser(currentVacancy.description)}\r\n            </Typography>\r\n            <Box sx={{ textAlign: 'left', marginTop: '20px' }}>\r\n                <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                    {'Previews: ' + currentVacancy.previews}\r\n                </Typography>\r\n            </Box>\r\n            <Box sx={{ textAlign: 'right' }}>\r\n                <Button variant=\"outlined\" size=\"small\" onClick={() => onApply({\r\n                    id: 0,\r\n                    fullName: auth.user.userName,\r\n                    email: auth.user.email,\r\n                    phone: auth.user.phoneNumber || '',\r\n                    notes: '',\r\n                    isDismissed: false,\r\n                    joinedAt: new Date(),\r\n                    vacancyId: Number(vacancyId)\r\n                })}>Apply</Button>\r\n            </Box>\r\n            {candidate && <VacancyApplyForm candidate={candidate} closeForm={onApply} openForm={true} onSuccess={() => setSnackbarOpened(true)} />}\r\n            <Snackbar\r\n                open={snackbarOpened}\r\n                autoHideDuration={4000}\r\n                onClose={handleClose}\r\n                message=\"Successfully applied!\"\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n","import { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { RouteNames } from \"../../../routing\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { changeEmailAxios } from \"../../../api/auth\";\r\nimport { IChangeEmailDto } from \"../../../types/auth\";\r\nimport { EMAIL_REG_EXP, PASSWORD_REG_EXP } from \"../../../types/common/RegularExpressions\";\r\nimport { Button, Grid, IconButton, InputAdornment, Snackbar, TextField } from \"@mui/material\";\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function ChangeEmailForm(): JSX.Element {\r\n    const navigate = useNavigate();\r\n    const { auth } = useTypedSelector(state => state.auth)\r\n    const { login } = useActions();\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<null | string>(null);\r\n    const [snackbarOpened, setSnackbarOpened] = useState<boolean>(false);\r\n    const [showPassword, setShowPassword] = useState<boolean>(false);\r\n\r\n    const handleClose = (event: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') return;\r\n        setSnackbarOpened(false);\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        existingEmail: Yup.string()\r\n            .max(50, 'The field Email may not be greater than 50 characters.')\r\n            .matches(EMAIL_REG_EXP, \"Required field Email is not valid and may not be greater than 50 characters.\"),\r\n        newEmail: Yup.string()\r\n            .max(50, 'The field Email may not be greater than 50 characters.')\r\n            .matches(EMAIL_REG_EXP, \"Required field Email is not valid and may not be greater than 50 characters.\"),\r\n        password: Yup.string()\r\n            .matches(PASSWORD_REG_EXP, \"The field New Password is not valid. . Must contain at least one number and one uppercase and lowercase letter, and lenght 7 up to 100 characters.\"),\r\n    })\r\n\r\n    const defaultValues: IChangeEmailDto = { existingEmail: auth.user.email, newEmail: '', password: '' }\r\n\r\n    const { control, handleSubmit, formState: { errors }, reset } = useForm({\r\n        resolver: yupResolver(validationSchema), defaultValues\r\n    })\r\n\r\n    const onSubmit = async (changeEmailDto: IChangeEmailDto) => {\r\n        try {\r\n            setLoading(true)\r\n            setError(null)\r\n            await changeEmailAxios(changeEmailDto);\r\n            setSnackbarOpened(true);\r\n            reset();\r\n            setTimeout(() => {\r\n                localStorage.removeItem('auth');\r\n                login(null);\r\n                navigate(RouteNames.LOGIN);\r\n            }, 3000);\r\n        } catch (e) {\r\n            setError(e.message || 'Unknown server error.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"form-centered\">\r\n            <Grid container direction=\"column\" alignContent=\"center\" mt={2}>\r\n                <Grid item>\r\n                    <Controller name=\"existingEmail\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"Existing Email\" type=\"email\"\r\n                                margin=\"normal\" className=\"form-text-input\" disabled\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton edge=\"end\" >\r\n                                                <MailOutlineIcon />\r\n                                            </IconButton>\r\n                                        </InputAdornment>),\r\n                                }}\r\n                                error={Boolean(errors.existingEmail)} helperText={errors.existingEmail?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Controller name=\"newEmail\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"New Email\" type=\"email\"\r\n                                margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton edge=\"end\" >\r\n                                                <MailOutlineIcon />\r\n                                            </IconButton>\r\n                                        </InputAdornment>),\r\n                                }}\r\n                                error={Boolean(errors.newEmail)} helperText={errors.newEmail?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Controller name=\"password\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"Password\" type={showPassword ? 'text' : 'password'}\r\n                                margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                onClick={() => setShowPassword(!showPassword)}\r\n                                                onMouseDown={(event: React.MouseEvent<HTMLButtonElement>) => event.preventDefault()}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                {setShowPassword ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                error={Boolean(errors.password)} helperText={errors.password?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item my={3}>\r\n                    <Grid container spacing={5} direction=\"row\" justifyContent=\"center\">\r\n                        <Grid item>\r\n                            <Button variant=\"outlined\" onClick={() => reset()}>\r\n                                Cancel\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button variant=\"outlined\" type=\"submit\">\r\n                                {loading ? 'Sending...' : 'Send'}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n            </Grid>\r\n            <Snackbar\r\n                open={snackbarOpened}\r\n                autoHideDuration={4000}\r\n                onClose={handleClose}\r\n                message=\"Email has been changed successfully.\"\r\n            />\r\n        </form>\r\n    )\r\n}","import { Container, Grid } from \"@mui/material\";\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\r\nimport ChangeEmailForm from \"./ChangeEmailForm\";\r\n\r\nexport default function ChangeEmailPage(): JSX.Element {\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container' >\r\n            <PageHeader\r\n                title=\"Change Email\"\r\n                text=\"Magnam dolores commodi suscipit. Necessitatibus eius consequatur ex aliquid fuga eum quidem.\"\r\n            />\r\n            <Grid container direction=\"column\" alignItems=\"center\">\r\n                <ChangeEmailForm />\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { RouteNames } from \"../../../routing\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { changePasswordAxios } from \"../../../api/auth\";\r\nimport { IChangePasswordDto } from \"../../../types/auth\";\r\nimport { EMAIL_REG_EXP, PASSWORD_REG_EXP } from \"../../../types/common/RegularExpressions\";\r\nimport { Button, Grid, IconButton, InputAdornment, Snackbar, TextField } from \"@mui/material\";\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function ChangePasswordForm(): JSX.Element {\r\n    const navigate = useNavigate();\r\n    const { auth } = useTypedSelector(state => state.auth)\r\n    const { logout } = useActions();\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<null | string>(null);\r\n    const [snackbarOpened, setSnackbarOpened] = useState<boolean>(false);\r\n    const [showOldPassword, setShowOldPassword] = useState<boolean>(false);\r\n    const [showNewPassword, setShowNewPassword] = useState<boolean>(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState<boolean>(false);\r\n\r\n    const handleClose = (event: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') return;\r\n        setSnackbarOpened(false);\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string()\r\n            .max(50, 'The field Email may not be greater than 50 characters.')\r\n            .matches(EMAIL_REG_EXP, \"Required field Email is not valid and may not be greater than 50 characters.\"),\r\n        oldPassword: Yup.string()\r\n            .max(100, 'The field Password may not be greater than 100 characters.')\r\n            .matches(PASSWORD_REG_EXP, \"Password is not valid. Must contain at least one number and one uppercase and lowercase letter, and lenght 7 up to 100 characters.\"),\r\n        newPassword: Yup.string()\r\n            .matches(PASSWORD_REG_EXP, \"The field New Password is not valid. . Must contain at least one number and one uppercase and lowercase letter, and lenght 7 up to 100 characters.\"),\r\n        confirmNewPassword: Yup.string()\r\n            .matches(PASSWORD_REG_EXP, \"The field Confirm New Password is not valid.\")\r\n    })\r\n\r\n    const defaultValues: IChangePasswordDto = { email: auth.user.email, oldPassword: '', newPassword: '', confirmNewPassword: '' }\r\n\r\n    const { control, handleSubmit, formState: { errors }, reset } = useForm({\r\n        resolver: yupResolver(validationSchema), defaultValues\r\n    })\r\n\r\n    const onSubmit = async (changePasswordDto: IChangePasswordDto) => {\r\n        try {\r\n            setLoading(true)\r\n            setError(null)\r\n            await changePasswordAxios(changePasswordDto);\r\n            setSnackbarOpened(true);\r\n            reset();\r\n            setTimeout(() => {\r\n                logout(auth.user.email, auth.tokens.accessToken);\r\n                navigate(RouteNames.LOGIN);\r\n            }, 3000);\r\n        } catch (e) {\r\n            setError(e.message || 'Unknown server error.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"form-centered\">\r\n            <Grid container direction=\"column\" alignContent=\"center\" mt={2}>\r\n                <Grid item>\r\n                    <Controller name=\"email\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"Email\" type=\"email\"\r\n                                margin=\"normal\" className=\"form-text-input\" disabled\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton edge=\"end\" >\r\n                                                <MailOutlineIcon />\r\n                                            </IconButton>\r\n                                        </InputAdornment>),\r\n                                }}\r\n                                error={Boolean(errors.email)} helperText={errors.email?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Controller name=\"oldPassword\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"Old Password\" type={showOldPassword ? 'text' : 'password'}\r\n                                margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                onClick={() => setShowOldPassword(!showOldPassword)}\r\n                                                onMouseDown={(event: React.MouseEvent<HTMLButtonElement>) => event.preventDefault()}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                {showOldPassword ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                error={Boolean(errors.oldPassword)} helperText={errors.oldPassword?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Controller name=\"newPassword\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"New Password\" type={showNewPassword ? 'text' : 'password'}\r\n                                margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                onClick={() => setShowNewPassword(!showNewPassword)}\r\n                                                onMouseDown={(event: React.MouseEvent<HTMLButtonElement>) => event.preventDefault()}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                {showNewPassword ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                error={Boolean(errors.newPassword)} helperText={errors.newPassword?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Controller name=\"confirmNewPassword\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField {...field} label=\"Confirm New Password\" type={showConfirmPassword ? 'text' : 'password'}\r\n                                margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\r\n                                                onMouseDown={(event: React.MouseEvent<HTMLButtonElement>) => event.preventDefault()}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                {showConfirmPassword ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                error={Boolean(errors.confirmNewPassword)} helperText={errors.confirmNewPassword?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item my={3}>\r\n                    <Grid container spacing={5} direction=\"row\" justifyContent=\"center\">\r\n                        <Grid item>\r\n                            <Button variant=\"outlined\" onClick={() => reset()}>\r\n                                Cancel\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button variant=\"outlined\" type=\"submit\">\r\n                                {loading ? 'Sending...' : 'Send'}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n            </Grid>\r\n            <Snackbar\r\n                open={snackbarOpened}\r\n                autoHideDuration={4000}\r\n                onClose={handleClose}\r\n                message=\"Password has been changed successfully.\"\r\n            />\r\n        </form>\r\n    )\r\n}","import { Container, Grid } from \"@mui/material\";\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\r\nimport ChangePasswordForm from \"./ChangePasswordForm\";\r\n\r\nexport default function ChangePasswordPage(): JSX.Element {\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container' >\r\n            <PageHeader\r\n                title=\"Change password\"\r\n                text=\"Magnam dolores commodi suscipit. Necessitatibus eius consequatur ex aliquid fuga eum quidem.\"\r\n            />\r\n            <Grid container direction=\"column\" alignItems=\"center\">\r\n                <ChangePasswordForm />\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { useActions } from \"../../../hooks/useActions\";\r\nimport { useTypedSelector } from \"../../../hooks/useTypedSelector\";\r\nimport { IUser } from \"../../../types/user\";\r\nimport { EMAIL_REG_EXP, PHONE_REG_EXP } from \"../../../types/common/RegularExpressions\";\r\nimport { updateUserAxios } from \"../../../api/user\";\r\nimport { Button, Checkbox, FormControlLabel, Grid, IconButton, InputAdornment, Snackbar, TextField } from \"@mui/material\";\r\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\r\nimport LinkIcon from '@mui/icons-material/Link';\r\nimport PhoneIcon from '@mui/icons-material/Phone';\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\n\r\nexport default function ProfileForm(): JSX.Element {\r\n    const { auth } = useTypedSelector(state => state.auth);\r\n    const { error } = useTypedSelector(state => state.user);\r\n    const { setUserError } = useActions();\r\n    const [snackbarOpened, setSnackbarOpened] = useState<boolean>(false);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    const handleClose = (event: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') return;\r\n        setSnackbarOpened(false);\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        userName: Yup.string()\r\n            .required()\r\n            .max(50, 'The field User Name may not be greater than 50 characters.'),\r\n        email: Yup.string()\r\n            .max(50, 'The field Email may not be greater than 50 characters.')\r\n            .matches(EMAIL_REG_EXP, \"Required field Email is not valid and may not be greater than 50 characters.\"),\r\n        phoneNumber: Yup.string()\r\n            .matches(PHONE_REG_EXP, 'Phone number is not valid. Must contain from 11 up to 13 characters, valid formats: +31636363634, 1234567890, 075-63546725, 123-456-7890, (123)456-7890, (123) 456-7890, 123.456.7890'),\r\n        avatarUrl: Yup.string()\r\n            .max(1000, 'The field Avatar Url may not be greater than 1000 characters.'),\r\n    })\r\n\r\n    const defaultValues: IUser = {\r\n        id: auth.user.id,\r\n        userName: auth.user.userName,\r\n        email: auth.user.email,\r\n        emailConfirmed: auth.user.emailConfirmed,\r\n        phoneNumber: auth.user.phoneNumber || '',\r\n        avatarUrl: auth.user.avatarUrl || ''\r\n    }\r\n\r\n    const { control, handleSubmit, formState: { errors }, register } = useForm({\r\n        resolver: yupResolver(validationSchema), defaultValues\r\n    })\r\n\r\n    const updateUserData = async (user: IUser) => {\r\n        try {\r\n            setLoading(true);\r\n            setUserError(null);\r\n            await updateUserAxios(user);\r\n            setSnackbarOpened(true);\r\n        } catch (e) {\r\n            setUserError(e.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (user: IUser) => updateUserData(user);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"form-centered\">\r\n            <input {...register(\"id\")} type=\"hidden\" />\r\n            <Grid container direction=\"column\" alignContent=\"center\" mt={2}>\r\n                <Grid item>\r\n                    <Controller name=\"userName\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"User Name\" type=\"text\" margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton edge=\"end\" >\r\n                                                <AccountCircleIcon />\r\n                                            </IconButton>\r\n                                        </InputAdornment>),\r\n                                }}\r\n                                error={Boolean(errors.userName)} helperText={errors.userName?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Controller name=\"email\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"Email\" type=\"email\" margin=\"normal\" className=\"form-text-input\" disabled\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton edge=\"end\" >\r\n                                                <MailOutlineIcon />\r\n                                            </IconButton>\r\n                                        </InputAdornment>),\r\n                                }}\r\n                                error={Boolean(errors.email)} helperText={errors.email?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Controller name=\"emailConfirmed\" control={control}\r\n                                render={({ field: props }) => (\r\n                                    <Checkbox\r\n                                        {...props}\r\n                                        checked={props.value}\r\n                                        disabled\r\n                                        onChange={(e) => props.onChange(e.target.checked)}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        }\r\n                        label=\"Email Confirmed?\"\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Controller name=\"phoneNumber\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField {...field} label=\"Phone\" type=\"text\" margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton edge=\"end\" >\r\n                                                <PhoneIcon />\r\n                                            </IconButton>\r\n                                        </InputAdornment>),\r\n                                }}\r\n                                error={Boolean(errors.phoneNumber)} helperText={errors.phoneNumber?.message} />} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Controller name=\"avatarUrl\" control={control}\r\n                        render={({ field }) =>\r\n                            <TextField  {...field} label=\"Avatar Url\" type=\"text\" margin=\"normal\" className=\"form-text-input\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton edge=\"end\" >\r\n                                                <LinkIcon />\r\n                                            </IconButton>\r\n                                        </InputAdornment>),\r\n                                }}\r\n                                error={Boolean(errors.avatarUrl)} helperText={errors.avatarUrl?.message} />}\r\n                    />\r\n                </Grid>\r\n                <Grid item my={3}>\r\n                    <Grid container spacing={5} direction=\"row\" justifyContent=\"center\">\r\n                        <Grid item>\r\n                            <Button variant=\"outlined\" type=\"submit\">\r\n                                {loading ? 'Saving...' : 'Save'}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n            </Grid>\r\n            <Snackbar\r\n                open={snackbarOpened}\r\n                autoHideDuration={4000}\r\n                onClose={handleClose}\r\n                message=\"Successfully updated!\"\r\n            />\r\n        </form>\r\n    )\r\n}","import { Container, Grid } from \"@mui/material\";\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\r\nimport ProfileForm from \"./ProfileForm\";\r\n\r\nexport default function ProfilePage(): JSX.Element {\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container' >\r\n            <PageHeader\r\n                title=\"Profile\"\r\n                text=\"Magnam dolores commodi suscipit\"\r\n            />\r\n            <Grid container direction=\"column\" alignItems=\"center\">\r\n                <ProfileForm />\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}","import * as React from 'react';\r\nimport { AppBar, Avatar, Box, Button, Container, Toolbar, Tooltip, IconButton, Menu, MenuItem, Typography, } from '@mui/material';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n// import AdbIcon from '@mui/icons-material/Adb';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\r\nimport { useActions } from '../../../hooks/useActions';\r\nimport { IRoute, RouteNames } from '../../../routing';\r\nimport AboutPage from '../../../pages/About/AboutPage';\r\nimport VacanciesPage from '../../../pages/Vacancies/VacanciesPage';\r\nimport ContactPage from '../../../pages/Contact/ContactPage';\r\nimport ChangeEmailPage from '../../../pages/Account/ChangeEmail/ChangeEmailPage';\r\nimport ChangePasswordPage from '../../../pages/Account/ChangePassword/ChangePasswordPage';\r\nimport HomePage from '../../../pages/Home/HomePage';\r\nimport ServicesPage from '../../../pages/CompanyServices/ServicesPage';\r\nimport TeamPage from '../../../pages/Team/TeamPage';\r\nimport ProfilePage from '../../../pages/Account/Profile/ProfilePage';\r\n\r\nconst settings: IRoute[] = [\r\n    { path: RouteNames.PROFILE, title: \"Profile\", component: <ProfilePage /> },\r\n    { path: RouteNames.CHANGE_EMAIL, title: \"Change email\", component: <ChangeEmailPage /> },\r\n    { path: RouteNames.CHANGE_PASSWORD, title: \"Change password\", component: <ChangePasswordPage /> }\r\n];\r\n\r\nconst mainMenuRoutes: IRoute[] = [\r\n    { path: RouteNames.HOME, title: \"Home\", component: <HomePage /> },\r\n    { path: RouteNames.ABOUT, title: \"About Us\", component: <AboutPage /> },\r\n    { path: RouteNames.SERVICES, title: \"Services\", component: <ServicesPage /> },\r\n    { path: RouteNames.TEAM, title: \"Team\", component: <TeamPage /> },\r\n    { path: RouteNames.VACANCY, title: \"Vacancies\", component: <VacanciesPage /> },\r\n    { path: RouteNames.CONTACT, title: \"Contact\", component: <ContactPage /> }\r\n]\r\n\r\nexport default function MainAppBar() {\r\n    const [anchorElNav, setAnchorElNav] = React.useState<null | HTMLElement>(null);\r\n    const [anchorElUser, setAnchorElUser] = React.useState<null | HTMLElement>(null);\r\n\r\n    const { auth } = useTypedSelector(state => state.auth)\r\n    const { logout } = useActions();\r\n    const navigate = useNavigate();\r\n\r\n    const handleOpenNavMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorElNav(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseNavMenu = () => {\r\n        setAnchorElNav(null);\r\n    };\r\n\r\n    const handleOpenUserMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorElUser(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseUserMenu = () => {\r\n        setAnchorElUser(null);\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        logout(auth.user.email, auth.tokens.accessToken);\r\n        navigate(RouteNames.HOME);\r\n    }\r\n\r\n    return (\r\n        <AppBar position=\"static\" sx={{ backgroundColor: '#158F7C' }}>\r\n            <Container maxWidth=\"xl\">\r\n                <Toolbar disableGutters>\r\n                    {/* <AdbIcon sx={{ display: { xs: 'none', md: 'flex' }, mr: 1 }} /> */}\r\n                    <Typography variant=\"h6\" component=\"a\" href={RouteNames.HOME} sx={{\r\n                        mr: 2,\r\n                        display: { xs: 'none', md: 'flex' },\r\n                        fontSize: '28px',\r\n                        lineHeight: '1',\r\n                        fontFamily: 'Poppins, sans-serif',\r\n                        fontWeight: 600,\r\n                        color: 'inherit',\r\n                        textDecoration: 'none',\r\n                    }}\r\n                    >\r\n                        Shuffle\r\n                    </Typography>\r\n\r\n                    {/* Hiden menu */}\r\n                    <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"menu-appbar\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleOpenNavMenu}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n\r\n                        <Menu\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={anchorElNav}\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'left',\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'left',\r\n                            }}\r\n                            open={Boolean(anchorElNav)}\r\n                            onClose={handleCloseNavMenu}\r\n                            sx={{\r\n                                display: { xs: 'block', md: 'none' },\r\n                            }}\r\n                        >\r\n                            {mainMenuRoutes.map((page) => (\r\n                                <MenuItem key={page.path} component={Link} to={page.path} onClick={handleCloseNavMenu}>\r\n                                    <Typography textAlign=\"center\">{page.title}</Typography>\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Menu>\r\n                    </Box>\r\n\r\n                    <Typography variant=\"h6\" component=\"a\" href={RouteNames.HOME} sx={{\r\n                        mr: 2,\r\n                        display: { xs: 'flex', md: 'none' },\r\n                        flexGrow: 1,\r\n                        fontSize: '28px',\r\n                        lineHeight: '1',\r\n                        fontFamily: 'Poppins, sans-serif',\r\n                        fontWeight: 600,\r\n                        color: 'inherit',\r\n                        textDecoration: 'none',\r\n                    }}\r\n                    >\r\n                        Shuffle\r\n                    </Typography>\r\n\r\n                    {/* Main Menu pages */}\r\n                    <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n                        {mainMenuRoutes.map((page) => (\r\n                            <Button\r\n                                key={page.path}\r\n                                onClick={handleCloseNavMenu}\r\n                                sx={{ my: 2, display: 'block' }}\r\n                            >\r\n                                <Link to={page.path} className=\"main-menu-link\">{page.title}</Link>\r\n                            </Button>\r\n                        ))}\r\n                    </Box>\r\n\r\n                    {/* Avatar */}\r\n                    {auth ?\r\n                        <Box sx={{ flexGrow: 0 }}>\r\n                            <Typography component=\"span\">\r\n                                {auth.user.userName + ' '}\r\n                            </Typography>\r\n                            <Tooltip title=\"Open settings\">\r\n                                <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n                                    {/* <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" /> */}\r\n                                    <Avatar alt=\"Remy Sharp\" src={auth.user.avatarUrl || \"/static/images/avatar/2.jpg\"} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Menu\r\n                                sx={{ mt: '45px' }}\r\n                                id=\"menu-appbar\"\r\n                                anchorEl={anchorElUser}\r\n                                anchorOrigin={{\r\n                                    vertical: 'top',\r\n                                    horizontal: 'right',\r\n                                }}\r\n                                keepMounted\r\n                                transformOrigin={{\r\n                                    vertical: 'top',\r\n                                    horizontal: 'right',\r\n                                }}\r\n                                open={Boolean(anchorElUser)}\r\n                                onClose={handleCloseUserMenu}\r\n                            >\r\n                                {settings.map((setting) => (\r\n                                    <MenuItem key={setting.path} component={Link} to={setting.path} onClick={handleCloseUserMenu}>\r\n                                        <Typography textAlign=\"center\">{setting.title}</Typography>\r\n                                    </MenuItem>\r\n                                ))}\r\n                                <hr />\r\n                                <MenuItem component={Link} to={RouteNames.HOME} onClick={handleLogout}>\r\n                                    <Typography textAlign=\"center\">Logout</Typography>\r\n                                </MenuItem>\r\n                            </Menu>\r\n                        </Box>\r\n                        :\r\n                        <Button\r\n                            onClick={handleCloseNavMenu}\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            sx={{ my: 2, color: 'white', display: 'block', textTransform: 'none' }}\r\n                        >\r\n                            <Link to='/login' className=\"main-menu-link\">Sign In</Link>\r\n                        </Button>\r\n                    }\r\n                </Toolbar>\r\n            </Container>\r\n        </AppBar>\r\n    );\r\n}\r\n","import { Button, Grid } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IRoute, RouteNames } from \"../../../routing\";\r\nimport AdminCandidatePage from \"../../../pages/Admin/AdminCandidate/AdminCandidatePage\";\r\nimport AdminCountryPage from \"../../../pages/Admin/AdminCountry/AdminCountryPage\";\r\nimport AdminServicePage from \"../../../pages/Admin/AdminService/AdminServicePage\";\r\nimport AdminOfficePage from \"../../../pages/Admin/AdminOffice/AdminOfficePage\";\r\nimport AdminTeamPage from \"../../../pages/Admin/AdminTeam/AdminTeamPage\";\r\nimport AdminVacancyPage from \"../../../pages/Admin/AdminVacancy/AdminVacancyPage\";\r\nimport AdminUsersPage from \"../../../pages/Admin/AdminUser/AdminUsersPage\";\r\n\r\nconst adminMenuLinks: IRoute[] = [\r\n    { path: RouteNames.ADMIN_COUNTRIES, title: \"Countries\", component: <AdminCountryPage /> },\r\n    { path: RouteNames.ADMIN_OFFICES, title: \"Offices\", component: <AdminOfficePage /> },\r\n    { path: RouteNames.ADMIN_SERVICES, title: \"Services\", component: <AdminServicePage /> },\r\n    { path: RouteNames.ADMIN_TEAM, title: \"Team\", component: <AdminTeamPage /> },\r\n    { path: RouteNames.ADMIN_VACANCIES, title: \"Vacancies\", component: <AdminVacancyPage /> },\r\n    { path: RouteNames.ADMIN_CANDIDATES, title: \"Candidates\", component: <AdminCandidatePage /> },\r\n    { path: RouteNames.USERS, title: \"Users\", component: <AdminUsersPage /> }\r\n]\r\n\r\nexport default function AdminAppBar(): JSX.Element {\r\n    return (\r\n        <Grid container spacing={2} style={{ margin: '16px 0 5px' }}>\r\n            {adminMenuLinks.map((page) => (\r\n                <Button key={page.path} sx={{ textTransform: 'none', padding: '0', marginLeft: '10px', minWidth: '0' }} >\r\n                    <Link to={page.path}>{page.title}</Link>\r\n                </Button>\r\n            ))}\r\n        </Grid>\r\n    )\r\n}","import axios from 'axios';\r\nimport { IMailSubscriber } from '../types/mailSubscriber';\r\n\r\nexport async function subscribeAxios(mailSubscriber: IMailSubscriber): Promise<IMailSubscriber> {\r\n    return (await axios.post<IMailSubscriber>('/MailSubscriber/Subscribe', mailSubscriber)).data;\r\n}","import { useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\nimport { subscribeAxios } from \"../../api/mailSubscriber\";\r\nimport { IMailSubscriber } from \"../../types/mailSubscriber\";\r\nimport { EMAIL_REG_EXP } from \"../../types/common/RegularExpressions\";\r\nimport { Button, IconButton, InputAdornment, Snackbar, TextField } from \"@mui/material\";\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\r\nimport ErrorMessage from \"../Messages/ErrorMessage\";\r\nimport { MessageAppearance } from \"../Messages/types\";\r\n\r\nexport default function SubscriptionForm(): JSX.Element {\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<null | string>(null);\r\n    const [openSnackBar, setOpenSnackBar] = useState<boolean>(false);\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string()\r\n            .max(50, 'The field Email may not be greater than 50 characters.')\r\n            .matches(EMAIL_REG_EXP, \"Required field Email is not valid.\"),\r\n    })\r\n\r\n    const defaultValues: { email: string } = {\r\n        email: ''\r\n    }\r\n\r\n    const { control, handleSubmit, formState: { errors }, reset } = useForm({\r\n        resolver: yupResolver(validationSchema),\r\n        defaultValues\r\n    })\r\n\r\n    const createdSubscriber = async (subscriber: IMailSubscriber) => {\r\n        try {\r\n            setLoading(true);\r\n            await subscribeAxios(subscriber);\r\n            setOpenSnackBar(true);\r\n        } catch (e) {\r\n            setError(e.message || \"Oops! Something went wrong while subscribing.\");\r\n        } finally {\r\n            setLoading(false);\r\n            reset();\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (emailAddress: { email: string }): Promise<void> => {\r\n        createdSubscriber({ email: emailAddress.email, isSubscribed: true, mailSubscriptionId: 1 });\r\n    }\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') return;\r\n        setOpenSnackBar(false);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div >\r\n                <Controller\r\n                    name=\"email\"\r\n                    control={control}\r\n                    render={({ field }) =>\r\n                        <TextField  {...field} sx={{ color: '#1976d2' }} label=\"Email\" fullWidth type=\"email\" margin=\"normal\"\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton edge=\"end\" >\r\n                                            <MailOutlineIcon />\r\n                                        </IconButton>\r\n                                    </InputAdornment>),\r\n                            }}\r\n                            error={Boolean(errors.email)} helperText={errors.email?.message} />}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button variant=\"outlined\" disabled={loading} type=\"submit\" sx={{ backgroundColor: 'white', color: '#1976d2', marginTop: '20px' }}>\r\n                    {loading ? 'Uploadind...' : 'Subscribe'}\r\n                </Button>\r\n                <Snackbar open={openSnackBar} message='Subscribed.' autoHideDuration={4000} onClose={handleClose} />\r\n            </div>\r\n            {error && <ErrorMessage appearance={MessageAppearance.REGULAR}>{error}</ErrorMessage>}\r\n        </form>\r\n    )\r\n}","import { Grid, Typography } from '@mui/material';\r\nimport List from '@mui/material/List';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SubscriptionForm from './SubscriptionForm';\r\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\r\nimport { IRoute, RouteNames } from '../../routing';\r\nimport HomePage from '../../pages/Home/HomePage';\r\nimport AboutPage from '../../pages/About/AboutPage';\r\nimport ServicesPage from '../../pages/CompanyServices/ServicesPage';\r\nimport TeamPage from '../../pages/Team/TeamPage';\r\nimport VacanciesPage from '../../pages/Vacancies/VacanciesPage';\r\nimport ContactPage from '../../pages/Contact/ContactPage';\r\n\r\nconst mainMenuRoutes: IRoute[] = [\r\n    { path: RouteNames.HOME, title: \"Home\", component: <HomePage /> },\r\n    { path: RouteNames.ABOUT, title: \"About Us\", component: <AboutPage /> },\r\n    { path: RouteNames.SERVICES, title: \"Services\", component: <ServicesPage /> },\r\n    { path: RouteNames.TEAM, title: \"Team\", component: <TeamPage /> },\r\n    { path: RouteNames.VACANCY, title: \"Vacancies\", component: <VacanciesPage /> },\r\n    { path: RouteNames.CONTACT, title: \"Contact\", component: <ContactPage /> }\r\n]\r\n\r\nexport default function Footer(): JSX.Element {\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <Grid container spacing={2} className='footer'>\r\n            <Grid item xs={12} md={4} textAlign='center'>\r\n                <Typography sx={{ margin: '0 0 20px 0', padding: '2px 0 2px 0', fontSize: 24, fontWeight: 700, lineHeight: 1 }}>\r\n                    Shuffle\r\n                </Typography>\r\n                <Typography variant=\"body2\" component={'p'}>\r\n                    A108 Adam Street\r\n                </Typography>\r\n                <Typography variant=\"body2\" component={'p'}>\r\n                    NY 535022, USA\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"body2\" component={'p'}>\r\n                    <strong>Phone:</strong> +1 5589 55488 55\r\n                </Typography>\r\n                <Typography variant=\"body2\" component={'p'}>\r\n                    <strong>Email:</strong> info@example.com\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} md={4}>\r\n                <Grid container direction=\"column\" alignContent=\"center\">\r\n                    <Typography sx={{ margin: '0 0 20px 0', padding: '2px 0 2px 0', fontSize: 18, fontWeight: 600 }}>\r\n                        Useful Links\r\n                    </Typography>\r\n                    <List>\r\n                        {mainMenuRoutes.map((page) => (\r\n                            <ListItemButton key={page.path} sx={{ padding: '0' }} onClick={() => { navigate(page.path); window.scroll(0, 0) }}>\r\n                                <ListItemIcon sx={{ minWidth: '20px', maxWidth: '30px' }}>\r\n                                    <ArrowForwardIosIcon sx={{ fontSize: '1rem' }} htmlColor='#3D4F4C' />\r\n                                </ListItemIcon>\r\n                                &nbsp;&nbsp;\r\n                                <ListItemText primary={page.title} />\r\n                            </ListItemButton>\r\n                        ))}\r\n                    </List>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} md={4} textAlign='center' sx={{ padding: '16px' }}>\r\n                <Typography sx={{ margin: '0 0 20px 0', padding: '2px 0 2px 0', fontSize: 18, fontWeight: 600 }}>\r\n                    Our Newsletter\r\n                </Typography>\r\n                <Typography variant=\"body2\" component={'p'}>\r\n                    Tamen quem nulla quae legam multos aute sint culpa legam noster magna\r\n                </Typography>\r\n                <SubscriptionForm />\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n};\r\n","import { Container } from '@mui/material';\r\nimport MainAppBar from '../AppBars/MainAppBar/MainAppBar';\r\nimport AdminAppBar from '../AppBars/AdminAppBar/AdminAppBar';\r\nimport Footer from '../Footer/Footer';\r\nimport { LayoutProps } from './types';\r\nimport './styles.css';\r\n\r\nexport default function AdminLayout({ children, title }: LayoutProps): JSX.Element {\r\n    document.title = title || 'Admin';\r\n    return (\r\n        <>\r\n            <MainAppBar />\r\n            <AdminAppBar />\r\n            <Container className=\"layout-container\" >\r\n                {children}\r\n            </Container>\r\n            <Footer />\r\n        </>\r\n    );\r\n};\r\n","import Footer from '../Footer/Footer';\r\nimport MainAppBar from '../AppBars/MainAppBar/MainAppBar';\r\nimport { LayoutProps } from './types';\r\nimport './styles.css'\r\n\r\nexport default function PublicLayout({ children, title }: LayoutProps): JSX.Element {\r\n    document.title = title || 'App';\r\n    return (\r\n        <>\r\n            <MainAppBar />\r\n            {children}\r\n            <Footer />\r\n        </>\r\n\r\n    );\r\n};\r\n","import { Grid, Typography } from \"@mui/material\";\r\nimport { MessageAppearance, MessageProps } from \"./types\";\r\nimport './styles.css';\r\n\r\nexport default function SuccessMessage({ children, appearance }: MessageProps): JSX.Element {\r\n    let cssClass: string;\r\n    switch (appearance) {\r\n        case MessageAppearance.LARGE:\r\n            cssClass = 'success-message-large';\r\n            break;\r\n        default:\r\n            cssClass = 'success-message-regular';\r\n    }\r\n\r\n    return (\r\n        <Grid container\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            my={appearance === MessageAppearance.LARGE ? 5 : 1}\r\n        >\r\n            <Typography\r\n                variant={appearance === MessageAppearance.LARGE ? \"h6\" : 'body2'}\r\n                component={'span'}\r\n                className={cssClass}\r\n            >\r\n                {children}\r\n            </Typography>\r\n        </Grid>\r\n    )\r\n}","import { Container } from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { confirmEmailAxios } from \"../../../api/auth\";\r\nimport ErrorMessage from \"../../../components/Messages/ErrorMessage\";\r\nimport SuccessMessage from \"../../../components/Messages/SuccessMessage\";\r\nimport { MessageAppearance } from \"../../../components/Messages/types\";\r\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\r\nimport Spinner from \"../../../components/Spinner/Spinner\";\r\n\r\nexport default function EmailConfirmPage(): JSX.Element {\r\n    const urlSearchParams = new URLSearchParams(window.location.search);\r\n    const params = Object.fromEntries(urlSearchParams.entries());\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<null | string>(null);\r\n\r\n    const tryToConfirmEmailByUrlParams = async () => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            console.log('params.code ', encodeURIComponent(params.code))\r\n            await confirmEmailAxios(params.code, params.email)\r\n        } catch (e) {\r\n            setError(e.message || 'Unknown server error.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        tryToConfirmEmailByUrlParams();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className='layout-container' >\r\n            <PageHeader\r\n                title=\"Email Confirmation\"\r\n                text=\"Magnam dolores commodi suscipit. Necessitatibus eius consequatur ex aliquid fuga eum quidem.\"\r\n            />\r\n            {loading ? <Spinner />\r\n                :\r\n                error ? <ErrorMessage appearance={MessageAppearance.LARGE}>{error}</ErrorMessage>\r\n                    :\r\n                    <SuccessMessage appearance={MessageAppearance.LARGE}>\r\n                        Email has been successfully verified. Please Sign In to continue.\r\n                    </SuccessMessage>\r\n            }\r\n        </Container>\r\n    )\r\n}","import { Typography } from '@mui/material';\r\nimport '../../index.css';\r\n\r\nexport default function TestUI(): JSX.Element {\r\n\r\n    return (\r\n        <>\r\n            <div className='test-ui-page-header'>Tests of UI Components</div>\r\n            <p>\r\n                Design system: https://mui.com/\r\n            </p>\r\n            <br />\r\n            <hr />\r\n            <div className='test-page-header'>Typography - Headers:</div>\r\n            <br />\r\n            <Typography variant=\"h4\" component={'h4'} className=\"test-page-header\">\r\n                Page Header\r\n            </Typography>\r\n            <Typography variant=\"h5\" component={'h5'} className=\"test-card-header\">\r\n                Card Header UPPERCASE\r\n            </Typography>\r\n            <hr />\r\n            <div className='test-page-header'>Typography - Paragraphs:</div>\r\n            <br />\r\n            <Typography component={'p'} className=\"test-page-subheader\" sx={{ textAlign: 'center' }}>\r\n                Paragraph as subheader\r\n            </Typography>\r\n            <hr />\r\n            <div className='test-page-header'>Typography - Spans:</div>\r\n        </>\r\n    )\r\n}","import { Routes, Route } from 'react-router-dom';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport AboutPage from '../pages/About/AboutPage';\r\nimport { Roles } from '../types/auth';\r\nimport { IRoute, RouteNames } from '../routing';\r\nimport AdminCandidatePage from '../pages/Admin/AdminCandidate/AdminCandidatePage';\r\nimport AdminCountryPage from '../pages/Admin/AdminCountry/AdminCountryPage';\r\nimport AdminServicePage from '../pages/Admin/AdminService/AdminServicePage';\r\nimport AdminOfficePage from '../pages/Admin/AdminOffice/AdminOfficePage';\r\nimport AdminTeamPage from '../pages/Admin/AdminTeam/AdminTeamPage';\r\nimport AdminVacancyPage from '../pages/Admin/AdminVacancy/AdminVacancyPage';\r\nimport ServicesPage from '../pages/CompanyServices/ServicesPage';\r\nimport ContactPage from '../pages/Contact/ContactPage';\r\nimport ErrorPage from '../pages/Error/ErrorPage';\r\nimport HomePage from '../pages/Home/HomePage';\r\nimport LoginPage from '../pages/Account/Login/LoginPage';\r\nimport RegisterCompletePage from '../pages/Account/RegisterComplete/RegisterCompletePage';\r\nimport RegisterPage from '../pages/Account/Register/RegisterPage';\r\nimport TeamPage from '../pages/Team/TeamPage';\r\nimport UsersPage from '../pages/Admin/AdminUser/AdminUsersPage';\r\nimport VacanciesPage from '../pages/Vacancies/VacanciesPage';\r\nimport VacancyDetailes from '../pages/Vacancies/VacancyDetails';\r\nimport AdminLayout from './Layouts/AdminLayout';\r\nimport PublicLayout from './Layouts/PublicLayout';\r\nimport EmailConfirmPage from '../pages/Account/EmailConfirm/EmailConfirmPage';\r\nimport ProfilePage from '../pages/Account/Profile/ProfilePage';\r\nimport ChangeEmailPage from '../pages/Account/ChangeEmail/ChangeEmailPage';\r\nimport ChangePasswordPage from '../pages/Account/ChangePassword/ChangePasswordPage';\r\nimport TestUI from '../pages/Test/TestUI';\r\n\r\nexport default function AppRouter() {\r\n    const { auth } = useTypedSelector(state => state.auth);\r\n\r\n    const anonimousRoleRoutes: IRoute[] = [\r\n        { path: RouteNames.ABOUT, title: \"About Us\", component: <AboutPage /> },\r\n        { path: RouteNames.CONTACT, title: \"Contact\", component: <ContactPage /> },\r\n        { path: RouteNames.HOME, title: \"Home\", component: <HomePage /> },\r\n        { path: RouteNames.SERVICES, title: \"Services\", component: <ServicesPage /> },\r\n        { path: RouteNames.TEAM, title: \"Team\", component: <TeamPage /> },\r\n        { path: RouteNames.TEST_UI, title: \"UI Tests\", component: <TestUI /> },\r\n        { path: RouteNames.VACANCY, title: \"Vacancies\", component: <VacanciesPage /> },\r\n        { path: RouteNames.LOGIN, title: \"Sign In\", component: <LoginPage /> },\r\n        { path: RouteNames.REGISTER, title: \"Sign Up\", component: <RegisterPage /> },\r\n        { path: RouteNames.REGISTER_COMPLETE, title: \"Registration Complete\", component: <RegisterCompletePage /> },\r\n        { path: RouteNames.EMAIL_CONFIRM, title: \"Email confirmation page\", component: <EmailConfirmPage /> },\r\n        { path: \"*\", title: \"Error: wrong route!\", component: <ErrorPage status='403' message='Access denied, try login to continue.' /> }\r\n    ];\r\n\r\n    const registeredRoleRoutes: IRoute[] = [\r\n        { path: RouteNames.CHANGE_EMAIL, title: \"Change email\", component: <ChangeEmailPage /> },\r\n        { path: RouteNames.CHANGE_PASSWORD, title: \"Change password\", component: <ChangePasswordPage /> },\r\n        { path: RouteNames.PROFILE, title: \"Profile\", component: <ProfilePage /> },\r\n        { path: RouteNames.VACANCY_DETAILES, title: \"Vacancy Detailes\", component: <VacancyDetailes /> }\r\n    ]\r\n\r\n    const adminRoleRoutes: IRoute[] = [\r\n        { path: RouteNames.ADMIN_CANDIDATES, title: \"Candidates\", component: <AdminCandidatePage /> },\r\n        { path: RouteNames.ADMIN_COUNTRIES, title: \"Contries\", component: <AdminCountryPage /> },\r\n        { path: RouteNames.ADMIN_OFFICES, title: \"Offices\", component: <AdminOfficePage /> },\r\n        { path: RouteNames.ADMIN_SERVICES, title: \"Services\", component: <AdminServicePage /> },\r\n        { path: RouteNames.ADMIN_TEAM, title: \"Team\", component: <AdminTeamPage /> },\r\n        { path: RouteNames.ADMIN_VACANCIES, title: \"Vacancies\", component: <AdminVacancyPage /> },\r\n        { path: RouteNames.USERS, title: \"Users page\", component: <UsersPage /> }\r\n    ]\r\n\r\n    return (\r\n        auth === null ?\r\n            <Routes>\r\n                {\r\n                    anonimousRoleRoutes.map((route) => {\r\n                        return (\r\n                            <Route key={route.path} path={route.path} element={\r\n                                <PublicLayout title={route.title}>{route.component}</PublicLayout>\r\n                            } />\r\n                        )\r\n                    })\r\n                }\r\n            </Routes >\r\n            :\r\n            auth.roles.includes(Roles.ADMIN) ?\r\n                <Routes>\r\n                    {\r\n                        anonimousRoleRoutes.concat(registeredRoleRoutes).concat(adminRoleRoutes).map((route) => {\r\n                            return (\r\n                                <Route key={route.path} path={route.path} element={\r\n                                    <AdminLayout>{route.component}</AdminLayout>\r\n                                } />\r\n                            )\r\n                        })\r\n                    }\r\n                </Routes>\r\n                :\r\n                <Routes>\r\n                    {\r\n                        anonimousRoleRoutes.concat(registeredRoleRoutes).map((route) => {\r\n                            return (\r\n                                <Route key={route.path} path={route.path} element={\r\n                                    <PublicLayout>{route.component}</PublicLayout>\r\n                                } />\r\n                            )\r\n                        })\r\n                    }\r\n                </Routes>\r\n    )\r\n}","// import { BrowserRouter } from 'react-router-dom'; For Github pages replaced BrowserRouter to HashRouter\nimport { HashRouter } from 'react-router-dom';\nimport AppRouter from './components/AppRouter';\n\nexport default function App() {\n    return (\n        <HashRouter>\n            <AppRouter />\n        </HashRouter>\n    );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { AuthAction, AuthActionTypes, AuthState } from \"../../types/auth\";\r\n\r\nconst initialState: AuthState = {\r\n    auth: JSON.parse(localStorage.getItem(\"auth\")),\r\n    loading: false,\r\n    error: null,\r\n}\r\n\r\nexport const authReducer = (state: AuthState = initialState, action: AuthAction) => {\r\n    switch (action.type) {\r\n        case AuthActionTypes.LOGIN:\r\n            return { ...state, auth: action.payload };\r\n        case AuthActionTypes.LOGOUT:\r\n            return { ...state, auth: null };\r\n        case AuthActionTypes.SET_AUTH_ERROR:\r\n            return { ...state, error: action.payload };\r\n        case AuthActionTypes.SET_AUTH_LOADING:\r\n            return { ...state, loading: action.payload };\r\n        default: return state;\r\n    }\r\n}","import { OrderType } from \"../../types/common/orderType\";\r\nimport { CandidateAction, CandidateActionTypes, CandidateState, ICandidate, CandidateStatus } from \"../../types/candidate\";\r\n\r\nconst initialState: CandidateState = {\r\n    candidateSearchResult: {\r\n        itemList: [],\r\n        currentPageNumber: 1,\r\n        order: OrderType.Ascending,\r\n        pageCount: 0,\r\n        pageSize: 5,\r\n        searchCriteria: \"\",\r\n        totalItemCount: 0\r\n    },\r\n    filters: {\r\n        active: CandidateStatus.All,\r\n        vacancyId: null,\r\n        searchInFullName: \"\"\r\n    },\r\n    loading: true,\r\n    error: null\r\n}\r\n\r\nexport const candidateReducer = (state: CandidateState = initialState, action: CandidateAction): CandidateState => {\r\n    switch (action.type) {\r\n        case CandidateActionTypes.GET_CANDIDATES:\r\n            return { ...state, candidateSearchResult: action.payload };\r\n        case CandidateActionTypes.SET_CANDIDATE_ERROR:\r\n            return { ...state, error: action.payload };\r\n        case CandidateActionTypes.SET_CANDIDATE_LOADING:\r\n            return { ...state, loading: action.payload };\r\n        case CandidateActionTypes.SET_CANDIDATE_PAGE:\r\n            return { ...state, candidateSearchResult: { ...state.candidateSearchResult, currentPageNumber: action.payload } };\r\n        case CandidateActionTypes.SET_CANDIDATE_ACTIVE_FILTER:\r\n            return { ...state, filters: { ...state.filters, active: action.payload } };\r\n        case CandidateActionTypes.SET_CANDIDATE_VACANCY_FILTER:\r\n            return { ...state, filters: { ...state.filters, vacancyId: action.payload } };\r\n        case CandidateActionTypes.SET_CANDIDATE_SEARCH_CRITERIA:\r\n            return { ...state, filters: { ...state.filters, searchInFullName: action.payload } };\r\n        case CandidateActionTypes.UPDATE_CANDIDATE_ISDISMISSED_STATUS:\r\n            return { ...state, candidateSearchResult: { ...state.candidateSearchResult, itemList: updateCandidate(state, action.payload) } }\r\n        case CandidateActionTypes.CREATE_CANDIDATE:\r\n            return { ...state, candidateSearchResult: { ...state.candidateSearchResult, itemList: [action.payload, ...state.candidateSearchResult.itemList] } }\r\n        case CandidateActionTypes.UPDATE_CANDIDATE:\r\n            return { ...state, candidateSearchResult: { ...state.candidateSearchResult, itemList: updateCandidate(state, action.payload) } }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nfunction updateCandidate(state: CandidateState, candidateToUpdate: ICandidate): Array<ICandidate> {\r\n    return state.candidateSearchResult.itemList.map((candidate: ICandidate) => {\r\n        if (candidate.id === candidateToUpdate.id) return candidateToUpdate;\r\n        return candidate;\r\n    })\r\n}","import { OrderType } from \"../../types/common/orderType\";\r\nimport { CountryAction, CountryActionTypes, CountryState, ICountry } from \"../../types/country\";\r\n\r\nconst initialState: CountryState = {\r\n    countrySearchResult: {\r\n        itemList: [] as ICountry[],\r\n        currentPageNumber: 1,\r\n        order: OrderType.Descending,\r\n        pageCount: 0,\r\n        pageSize: 10,\r\n        searchCriteria: \"\",\r\n        totalItemCount: 0\r\n    },\r\n    loading: true,\r\n    error: null\r\n}\r\n\r\nexport const countryReducer = (state: CountryState = initialState, action: CountryAction): CountryState => {\r\n    switch (action.type) {\r\n        case CountryActionTypes.GET_COUNTRIES:\r\n            return { ...state, countrySearchResult: action.payload };\r\n        case CountryActionTypes.SET_COUNTRY_ERROR:\r\n            return { ...state, error: action.payload };\r\n        case CountryActionTypes.SET_COUNTRY_LOADING:\r\n            return { ...state, loading: action.payload };\r\n        case CountryActionTypes.SET_COUNTRY_PAGE:\r\n            return { ...state, countrySearchResult: { ...state.countrySearchResult, currentPageNumber: action.payload } };\r\n        case CountryActionTypes.CREATE_COUNTRY:\r\n            return { ...state, countrySearchResult: { ...state.countrySearchResult, itemList: [action.payload, ...state.countrySearchResult.itemList] } };\r\n        case CountryActionTypes.UPDATE_COUNTRY:\r\n            return { ...state, countrySearchResult: { ...state.countrySearchResult, itemList: updateCountry(state, action.payload) } };\r\n        case CountryActionTypes.REMOVE_COUNTRY:\r\n            return { ...state, countrySearchResult: { ...state.countrySearchResult, itemList: deleteCountry(state, action) } };\r\n        default: return state;\r\n    }\r\n}\r\n\r\nfunction updateCountry(state: CountryState, countryToUpdate: ICountry): Array<ICountry> {\r\n    return state.countrySearchResult.itemList.map((country: ICountry) => {\r\n        if (country.id === countryToUpdate.id) return countryToUpdate;\r\n        return country;\r\n    })\r\n}\r\n\r\nfunction deleteCountry(state: CountryState, action: CountryAction): Array<ICountry> {\r\n    return state.countrySearchResult.itemList.filter(country => country.id !== action.payload)\r\n}\r\n","import { EmployeeAction, EmployeeActionTypes, EmployeeState, IEmployee } from \"../../types/employee\";\r\nimport { OrderType } from \"../../types/common/orderType\";\r\n\r\nconst initialState: EmployeeState = {\r\n    employeeSearchResult: {\r\n        itemList: [] as IEmployee[],\r\n        currentPageNumber: 1,\r\n        order: OrderType.Ascending,\r\n        pageCount: 0,\r\n        pageSize: 3,\r\n        searchCriteria: \"\",\r\n        totalItemCount: 0\r\n    },\r\n    offices: [],\r\n    loading: false,\r\n    error: null\r\n}\r\n\r\nexport const employeeReducer = (state: EmployeeState = initialState, action: EmployeeAction): EmployeeState => {\r\n    switch (action.type) {\r\n        case EmployeeActionTypes.GET_EMPLOYEES:\r\n            return { ...state, employeeSearchResult: action.payload };\r\n        case EmployeeActionTypes.LOAD_MORE_EMPLOYEES:\r\n            return {\r\n                ...state,\r\n                employeeSearchResult: {\r\n                    ...action.payload,\r\n                    itemList: state.employeeSearchResult.itemList.concat(action.payload.itemList)\r\n                },\r\n            };\r\n        case EmployeeActionTypes.SET_EMPLOYEE_ERROR:\r\n            return { ...state, error: action.payload };\r\n        case EmployeeActionTypes.SET_EMPLOYEE_LOADING:\r\n            return { ...state, loading: action.payload };\r\n        case EmployeeActionTypes.SET_EMPLOYEE_PAGE:\r\n            return {\r\n                ...state,\r\n                employeeSearchResult: { ...state.employeeSearchResult, currentPageNumber: action.payload }\r\n            };\r\n        case EmployeeActionTypes.CREATE_EMPLOYEE:\r\n            return {\r\n                ...state, employeeSearchResult: {\r\n                    ...state.employeeSearchResult, itemList: [action.payload, ...state.employeeSearchResult.itemList]\r\n                }\r\n            };\r\n        case EmployeeActionTypes.UPDATE_EMPLOYEE:\r\n            return { ...state, employeeSearchResult: { ...state.employeeSearchResult, itemList: updateEmployee(state, action.payload) } };\r\n        case EmployeeActionTypes.REMOVE_EMPLOYEE:\r\n            return { ...state, employeeSearchResult: { ...state.employeeSearchResult, itemList: deleteEmployee(state, action) } };\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nfunction updateEmployee(state: EmployeeState, employeeToUpdate: IEmployee): Array<IEmployee> {\r\n    return state.employeeSearchResult.itemList.map((employee: IEmployee) => {\r\n        if (employee.id === employeeToUpdate.id) return employeeToUpdate;\r\n        return employee;\r\n    })\r\n}\r\n\r\nfunction deleteEmployee(state: EmployeeState, action: EmployeeAction): Array<IEmployee> {\r\n    return state.employeeSearchResult.itemList.filter(employee => employee.id !== action.payload)\r\n}","import { OrderType } from \"../../types/common/orderType\";\r\nimport { OfficeAction, OfficeActionTypes, OfficeState, IOffice } from \"../../types/office\";\r\n\r\nconst initialState: OfficeState = {\r\n    officeSearchResult: {\r\n        itemList: [] as IOffice[],\r\n        currentPageNumber: 1,\r\n        order: OrderType.Descending,\r\n        pageCount: 0,\r\n        pageSize: 10,\r\n        searchCriteria: \"\",\r\n        totalItemCount: 0\r\n    },\r\n    loading: true,\r\n    error: null\r\n}\r\n\r\nexport const officeReducer = (state: OfficeState = initialState, action: OfficeAction): OfficeState => {\r\n    switch (action.type) {\r\n        case OfficeActionTypes.GET_OFFICES:\r\n            return { ...state, officeSearchResult: action.payload };\r\n        case OfficeActionTypes.SET_OFFICE_ERROR:\r\n            return { ...state, error: action.payload };\r\n        case OfficeActionTypes.SET_OFFICE_LOADING:\r\n            return { ...state, loading: action.payload };\r\n        case OfficeActionTypes.SET_OFFICE_PAGE:\r\n            return { ...state, officeSearchResult: { ...state.officeSearchResult, currentPageNumber: action.payload } };\r\n        case OfficeActionTypes.CREATE_OFFICE:\r\n            return { ...state, officeSearchResult: { ...state.officeSearchResult, itemList: [action.payload, ...state.officeSearchResult.itemList] } };\r\n        case OfficeActionTypes.UPDATE_OFFICE:\r\n            return { ...state, officeSearchResult: { ...state.officeSearchResult, itemList: updateOffice(state, action.payload) } };\r\n        case OfficeActionTypes.REMOVE_OFFICE:\r\n            return { ...state, officeSearchResult: { ...state.officeSearchResult, itemList: deleteOffice(state, action) } };\r\n        default: return state;\r\n    }\r\n}\r\n\r\nfunction updateOffice(state: OfficeState, officeToUpdate: IOffice): Array<IOffice> {\r\n    return state.officeSearchResult.itemList.map((office: IOffice) => {\r\n        if (office.id === officeToUpdate.id) return officeToUpdate;\r\n        return office;\r\n    })\r\n}\r\n\r\nfunction deleteOffice(state: OfficeState, action: OfficeAction): Array<IOffice> {\r\n    return state.officeSearchResult.itemList.filter(office => office.id !== action.payload)\r\n}\r\n","import { OrderType } from \"../../types/common/orderType\";\r\nimport { CompanyServiceAction, CompanyServiceActionTypes, CompanyServiceState, CompanyServiceStatus, ICompanyService } from \"../../types/companyService\";\r\n\r\nconst initialState: CompanyServiceState = {\r\n    serviceSearchResult: {\r\n        itemList: [] as ICompanyService[],\r\n        currentPageNumber: 1,\r\n        order: OrderType.Descending,\r\n        pageCount: 0,\r\n        pageSize: 3,\r\n        searchCriteria: \"\",\r\n        totalItemCount: 0\r\n    },\r\n    filters: {\r\n        active: CompanyServiceStatus.All,\r\n    },\r\n    loading: true,\r\n    error: null\r\n}\r\n\r\nexport const serviceReducer = (state: CompanyServiceState = initialState, action: CompanyServiceAction): CompanyServiceState => {\r\n    switch (action.type) {\r\n        case CompanyServiceActionTypes.GET_COMPANY_SERVICES:\r\n            return { ...state, serviceSearchResult: action.payload };\r\n        case CompanyServiceActionTypes.LOAD_MORE_COMPANY_SERVICES:\r\n            return { ...state, serviceSearchResult: { ...action.payload, itemList: state.serviceSearchResult.itemList.concat(action.payload.itemList) }, };\r\n        case CompanyServiceActionTypes.SET_COMPANY_SERVICE_ERROR:\r\n            return { ...state, error: action.payload };\r\n        case CompanyServiceActionTypes.SET_COMPANY_SERVICE_LOADING:\r\n            return { ...state, loading: action.payload };\r\n        case CompanyServiceActionTypes.SET_COMPANY_SERVICE_PAGE:\r\n            return { ...state, serviceSearchResult: { ...state.serviceSearchResult, currentPageNumber: action.payload } };\r\n        case CompanyServiceActionTypes.SET_COMPANY_SERVICE_ACTIVE_FILTER:\r\n            return { ...state, filters: { ...state.filters, active: action.payload } };\r\n        case CompanyServiceActionTypes.UPDATE_COMPANY_SERVICE_ISACTIVE_STATUS:\r\n            return { ...state, serviceSearchResult: { ...state.serviceSearchResult, itemList: updateService(state, action.payload) } }\r\n        case CompanyServiceActionTypes.CREATE_COMPANY_SERVICE:\r\n            return { ...state, serviceSearchResult: { ...state.serviceSearchResult, itemList: [action.payload, ...state.serviceSearchResult.itemList] } };\r\n        case CompanyServiceActionTypes.UPDATE_COMPANY_SERVICE:\r\n            return { ...state, serviceSearchResult: { ...state.serviceSearchResult, itemList: updateService(state, action.payload) } };\r\n        case CompanyServiceActionTypes.REMOVE_COMPANY_SERVICE:\r\n            return { ...state, serviceSearchResult: { ...state.serviceSearchResult, itemList: deleteService(state, action) } };\r\n        default: return state;\r\n    }\r\n}\r\n\r\nfunction updateService(state: CompanyServiceState, serviceToUpdate: ICompanyService): Array<ICompanyService> {\r\n    return state.serviceSearchResult.itemList.map((service: ICompanyService) => {\r\n        if (service.id === serviceToUpdate.id) return serviceToUpdate;\r\n        return service;\r\n    })\r\n}\r\n\r\nfunction deleteService(state: CompanyServiceState, action: CompanyServiceAction): Array<ICompanyService> {\r\n    return state.serviceSearchResult.itemList.filter(service => service.id !== action.payload)\r\n}\r\n","import { OrderType } from \"../../types/common/orderType\";\r\nimport { IUser, UserAction, UserActionTypes, UserState } from \"../../types/user\";\r\n\r\nconst initialState: UserState = {\r\n    userSearchResult: {\r\n        itemList: [],\r\n        currentPageNumber: 1,\r\n        order: OrderType.Ascending,\r\n        pageCount: 0,\r\n        pageSize: 5,\r\n        searchCriteria: \"\",\r\n        totalItemCount: 0\r\n    },\r\n    filters: {\r\n        searchInUserName: \"\"\r\n    },\r\n    loading: false,\r\n    error: null\r\n}\r\n\r\nexport const userReducer = (state: UserState = initialState, action: UserAction): UserState => {\r\n    switch (action.type) {\r\n        case UserActionTypes.GET_USERS:\r\n            return { ...state, userSearchResult: action.payload };\r\n        case UserActionTypes.UPDATE_USER_EMAILCONFIRMED_STATUS:\r\n            return { ...state, userSearchResult: { ...state.userSearchResult, itemList: updateUser(state, action.payload) } }\r\n        case UserActionTypes.SET_USER_SEARCH_CRITERIA:\r\n            return { ...state, filters: { ...state.filters, searchInUserName: action.payload } };\r\n        case UserActionTypes.SET_USER_PAGE:\r\n            return { ...state, userSearchResult: { ...state.userSearchResult, currentPageNumber: action.payload } };\r\n        case UserActionTypes.SET_USER_ERROR:\r\n            return { ...state, error: action.payload };\r\n        case UserActionTypes.SET_USER_LOADING:\r\n            return { ...state, loading: action.payload };\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nfunction updateUser(state: UserState, userToUpdate: IUser): Array<IUser> {\r\n    return state.userSearchResult.itemList.map((user: IUser) => {\r\n        if (user.id === userToUpdate.id) return userToUpdate;\r\n        return user;\r\n    })\r\n}","import { OrderType } from \"../../types/common/orderType\";\r\nimport { VacancyAction, VacancyActionTypes, VacancyState, IVacancy, VacancyStatus } from \"../../types/vacancy\";\r\n\r\nconst initialState: VacancyState = {\r\n    vacancySearchResult: {\r\n        itemList: [] as IVacancy[],\r\n        currentPageNumber: 1,\r\n        order: OrderType.Ascending,\r\n        pageCount: 0,\r\n        pageSize: 9,\r\n        searchCriteria: \"\",\r\n        totalItemCount: 0\r\n    },\r\n    currentVacancy: null,\r\n    offices: [],\r\n    titles: [],\r\n    filters: {\r\n        active: VacancyStatus.Active,\r\n        officeId: \"\",\r\n        searchInTitle: \"\"\r\n    },\r\n    loadingFilters: true,\r\n    errorFilters: null,\r\n    loadingVacancies: true,\r\n    errorVacancies: null\r\n}\r\n\r\nexport const vacancyReducer = (state: VacancyState = initialState, action: VacancyAction): VacancyState => {\r\n    switch (action.type) {\r\n        case VacancyActionTypes.GET_VACANCIES:\r\n            return { ...state, vacancySearchResult: action.payload };\r\n        case VacancyActionTypes.LOAD_MORE_VACANCIES:\r\n            return {\r\n                ...state,\r\n                vacancySearchResult: {\r\n                    ...action.payload,\r\n                    itemList: state.vacancySearchResult.itemList.concat(action.payload.itemList)\r\n                },\r\n            };\r\n        case VacancyActionTypes.SET_VACANCY_ERROR:\r\n            return { ...state, errorVacancies: action.payload };\r\n        case VacancyActionTypes.SET_VACANCY_LOADING:\r\n            return { ...state, loadingVacancies: action.payload };\r\n        case VacancyActionTypes.SET_FILTERS_ERROR:\r\n            return { ...state, errorFilters: action.payload };\r\n        case VacancyActionTypes.SET_FILTERS_LOADING:\r\n            return { ...state, loadingFilters: action.payload };\r\n        case VacancyActionTypes.SET_VACANCY_PAGE:\r\n            return {\r\n                ...state,\r\n                vacancySearchResult: { ...state.vacancySearchResult, currentPageNumber: action.payload }\r\n            };\r\n        case VacancyActionTypes.SET_VACANCY_ACTIVE_FILTER:\r\n            return {\r\n                ...state,\r\n                filters: { ...state.filters, active: action.payload }\r\n            };\r\n        case VacancyActionTypes.SET_VACANCY_OFFICE_FILTER:\r\n            return {\r\n                ...state,\r\n                filters: { ...state.filters, officeId: action.payload }\r\n            };\r\n        case VacancyActionTypes.SET_VACANCY_SEARCH_CRITERIA:\r\n            return {\r\n                ...state,\r\n                vacancySearchResult: { ...state.vacancySearchResult, searchCriteria: action.payload }\r\n            };\r\n        case VacancyActionTypes.SET_VACANCY_OFFICES:\r\n            let vacancyOffices = action.payload;\r\n            vacancyOffices.unshift({ id: 0, name: \"All\" });\r\n            return { ...state, offices: vacancyOffices };\r\n        case VacancyActionTypes.SET_VACANCIES_TITLES:\r\n            return { ...state, titles: action.payload };\r\n        case VacancyActionTypes.SET_CURRENT_VACANCY:\r\n            return { ...state, currentVacancy: action.payload };\r\n        case VacancyActionTypes.INCREMENT_PREVIEWS:\r\n            return { ...state };\r\n        case VacancyActionTypes.UPDATE_VACANCY_ISACTIVE_STATUS:\r\n            return {\r\n                ...state, vacancySearchResult: {\r\n                    ...state.vacancySearchResult, itemList: updateVacancy(state, action.payload)\r\n                }\r\n            }\r\n        case VacancyActionTypes.CREATE_VACANCY:\r\n            return {\r\n                ...state, vacancySearchResult: {\r\n                    ...state.vacancySearchResult, itemList:\r\n                        [action.payload, ...state.vacancySearchResult.itemList]\r\n                }\r\n            }\r\n        case VacancyActionTypes.UPDATE_VACANCY:\r\n            return {\r\n                ...state, vacancySearchResult: {\r\n                    ...state.vacancySearchResult, itemList: updateVacancy(state, action.payload)\r\n                }\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nfunction updateVacancy(state: VacancyState, vacancyToUpdate: IVacancy): Array<IVacancy> {\r\n    return state.vacancySearchResult.itemList.map((vacancy: IVacancy) => {\r\n        if (vacancy.id === vacancyToUpdate.id) return vacancyToUpdate;\r\n        return vacancy;\r\n    })\r\n}","import { combineReducers, configureStore } from '@reduxjs/toolkit';\r\nimport { authReducer } from './reducers/authReducer';\r\nimport { candidateReducer } from './reducers/candidateReducer';\r\nimport { countryReducer } from './reducers/countryReducer';\r\nimport { employeeReducer } from './reducers/employeeReducer';\r\nimport { officeReducer } from './reducers/officeReducer';\r\nimport { serviceReducer } from './reducers/serviceReducer';\r\nimport { userReducer } from './reducers/userReduser';\r\nimport { vacancyReducer } from './reducers/vacancyReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    candidate: candidateReducer,\r\n    country: countryReducer,\r\n    employee: employeeReducer,\r\n    office: officeReducer,\r\n    service: serviceReducer,\r\n    user: userReducer,\r\n    vacancy: vacancyReducer\r\n})\r\n\r\nexport const setupStore = () => {\r\n    return configureStore({\r\n        reducer: rootReducer\r\n    })\r\n}\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n","export enum ErrorStatus {\r\n    'BAD REQUEST' = '400',\r\n    'Unauthorized' = 401,\r\n    'Forbidden' = 403,\r\n    'Not Found' = '404',\r\n    'Internal Server Error' = '500'\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios'\r\nimport { ErrorStatus } from '../types/common/error';\r\nimport { refreshTokenAxios } from './auth';\r\n\r\nexport class AxiosMiddleware {\r\n    static boot(): void {\r\n        axios.defaults.baseURL = process.env.REACT_APP_BASE_API_URL_DEV;\r\n\r\n        // Request interceptor for API calls\r\n        axios.interceptors.request.use(\r\n            async config => {\r\n                const authFromLocalStorage = localStorage.getItem(\"auth\");\r\n                if (authFromLocalStorage) {\r\n                    const keys = JSON.parse(authFromLocalStorage);\r\n                    config.headers = {\r\n                        'Authorization': `Bearer ${keys.tokens.accessToken}`,\r\n                        'Accept': 'application/json'\r\n                    }\r\n                }\r\n                return config;\r\n            },\r\n            error => {\r\n                Promise.reject(error)\r\n            });\r\n\r\n        // Response interceptor for API calls\r\n        axios.interceptors.response.use(function (response: AxiosResponse): AxiosResponse {\r\n            return response;\r\n        },\r\n            async function (error: AxiosError) {\r\n                if (!error.status) {\r\n                    let errorMessage = \"\";\r\n                    try {\r\n                        if (error.response.status === ErrorStatus.Forbidden) {\r\n                            errorMessage = \"You are not allowed to this action.\";\r\n                            throw new Error();\r\n                        }\r\n                        if (error.response.status === ErrorStatus.Unauthorized) {\r\n                            errorMessage = \"Unable to refresh token, please Sign In.\";\r\n                            // Get existing tokens from localStorage and try to refresh\r\n                            const authFromLocalStorage = JSON.parse(localStorage.getItem(\"auth\"));\r\n                            const authModel = await refreshTokenAxios(authFromLocalStorage.tokens.accessToken, authFromLocalStorage.tokens.refreshToken)\r\n                            localStorage.setItem(\"auth\", JSON.stringify(authModel));\r\n\r\n                            // current response contains all settings needed to retry request\r\n                            axios.defaults.headers.common['Authorization'] = 'Bearer ' + authModel.tokens.accessToken;\r\n                            return axios(error.config);\r\n                        }\r\n                    } catch (error) {\r\n                        throw new Error(errorMessage);\r\n                    } finally {\r\n                        errorMessage = \"\";\r\n                    }\r\n                }\r\n                switch (error.status) {\r\n                    case ErrorStatus['Bad Request']:\r\n                        if (error.response) {\r\n                            if (error.response.data) {\r\n                                throw new Error(error.response.data['title']);\r\n                            }\r\n                            throw new Error('Network unavailable or server is not running.');\r\n                        }\r\n                        throw new Error(\"Bad Request Error\");\r\n                    case ErrorStatus.Forbidden:\r\n                        return;\r\n                    case ErrorStatus['Not Found']:\r\n                        throw new Error(error.response.data['title'] || 'Not Found Error');\r\n                    default:\r\n                        throw new Error('Internal server error.');\r\n                }\r\n            });\r\n    }\r\n}\r\n","import ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport { setupStore } from \"./store\";\nimport { AxiosMiddleware } from './api/middleware';\n\nconst store = setupStore();\n\nAxiosMiddleware.boot();\n\nconst root = ReactDOM.createRoot(\n    document.getElementById('root') as HTMLElement\n);\n\nroot.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nreportWebVitals();\n"],"sourceRoot":""}